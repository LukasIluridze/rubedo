{
  "version": 3,
  "sources": ["../src/index.ts", "../src/lib/Command/index.ts", "../src/config/commands.ts", "../src/lib/Command/utils.ts", "../src/lib/Command/ArgumentTypes.ts", "../src/config/database.ts", "../src/lib/Database/Database.ts", "../src/lib/Database/utils.ts", "../src/utils.ts", "../src/config/region.ts", "../src/modules/models/Region.ts", "../src/modules/models/Task.ts", "../src/lib/Form/Models/MessageForm.ts", "../src/lib/Database/tables.ts", "../src/lib/Command/Callback.ts", "../src/lib/Chest GUI/index.ts", "../src/config/chest.ts", "../src/lib/Scheduling/Timeout.ts", "../src/lib/Scheduling/utils.ts", "../src/lib/Chest GUI/Models/EntityChest.ts", "../src/lib/Events/onSlotChange.ts", "../src/modules/models/PlayerLog.ts", "../src/lib/Chest GUI/utils.ts", "../src/lib/Chest GUI/Models/ItemGrabbedCallback.ts", "../src/lib/Chest GUI/Models/PageItem.ts", "../src/lib/Chest GUI/Models/FillTypes.ts", "../src/lib/Chest GUI/Models/Page.ts", "../src/lib/Chest GUI/pages/home.ts", "../src/lang/text.ts", "../src/lib/Command/Command.ts", "../src/modules/models/Ban.ts", "../src/modules/commands/ban.ts", "../src/modules/commands/database.ts", "../src/modules/commands/ecwipe.ts", "../src/modules/models/Freeze.ts", "../src/modules/commands/freeze.ts", "../src/modules/commands/help.ts", "../src/modules/commands/lockdown.ts", "../src/modules/models/Mute.ts", "../src/modules/commands/mute.ts", "../src/modules/models/Npc.ts", "../src/modules/commands/npc.ts", "../src/modules/commands/ping.ts", "../src/modules/commands/region.ts", "../src/types.ts", "../src/modules/commands/role.ts", "../src/lib/Form/Models/ActionForm.ts", "../src/modules/forms/settings.ts", "../src/config/app.ts", "../src/config/enchantments.ts", "../src/config/moderation.ts", "../src/lib/Form/Models/ModelForm.ts", "../src/lib/Form/Models/FormCallback.ts", "../src/modules/forms/automod.ts", "../src/modules/forms/home.ts", "../src/modules/commands/settings.ts", "../src/modules/commands/vanish.ts", "../src/modules/commands/version.ts", "../src/modules/managers/ban.ts", "../src/modules/managers/freeze.ts", "../src/lib/Events/beforeChat.ts", "../src/modules/managers/mute.ts", "../src/modules/managers/region.ts", "../src/modules/events/playerJoin.ts", "../src/modules/pages/see.ts", "../src/modules/protections/cbe.ts", "../src/modules/protections/crasher.ts", "../src/modules/models/PreviousLocation.ts", "../src/modules/protections/fly.ts", "../src/modules/protections/gamemode.ts", "../src/modules/protections/nameSpoof.ts", "../src/modules/protections/nuker.ts", "../src/modules/managers/containers.ts", "../src/modules/models/BlockInventory.ts", "../src/modules/protections/spam.ts", "../src/modules/events/beforeDataDrivenEntityTriggerEvent.ts", "../src/modules/events/beforeWatchdogTerminate.ts", "../src/modules/events/worldInitialize.ts", "../src/config/objectives.ts", "../src/plugins/ChatRanks/index.ts", "../src/plugins/import.ts"],
  "sourcesContent": ["console.warn(`---- STARTING RUBEDO ----`);\nimport {\n  ItemStack,\n  Location,\n  MinecraftItemTypes,\n  world,\n} from \"@minecraft/server\";\nimport \"./lib/Command/index\";\nimport \"./lib/Chest GUI/index\";\nimport \"./modules/commands/import\";\nimport \"./modules/managers/import\";\nimport \"./modules/pages/import\";\nimport \"./modules/protections/import\";\nimport \"./modules/events/import\";\nimport \"./plugins/import\";\n\n/**\n * Stores npc locations that are verified to allow npcs to spawn in\n */\nexport let NPC_LOCATIONS: Array<Location> = [];\n\nexport function clearNpcLocations() {\n  NPC_LOCATIONS = [];\n}\n\n/**\n * This is the current tick that the server is at\n * this gets tracked to reduce lag for calling it\n */\nexport let CURRENT_TICK: number = null;\n\n/**\n * This is air as a item,\n */\nexport const AIR = new ItemStack(MinecraftItemTypes.stick, 0);\n\nworld.events.tick.subscribe((data) => {\n  if (!CURRENT_TICK) {\n    CURRENT_TICK = data.currentTick;\n  } else {\n    CURRENT_TICK = CURRENT_TICK + 1;\n  }\n});\n", "import { world } from \"@minecraft/server\";\r\nimport { PREFIX } from \"../../config/commands\";\r\nimport type { Command } from \"./Command\";\r\nimport {\r\n  commandNotFound,\r\n  commandSyntaxFail,\r\n  getChatAugments,\r\n  noPerm,\r\n  sendCallback,\r\n} from \"./utils\";\r\n\r\n/**\r\n * An array of all active commands\r\n */\r\nexport const COMMANDS: Command<any>[] = [];\r\n\r\nworld.events.beforeChat.subscribe((data) => {\r\n  if (!data.message.startsWith(PREFIX)) return; // This is not a command\r\n  data.cancel = true;\r\n  const args = getChatAugments(data.message, PREFIX);\r\n  const command = COMMANDS.find(\r\n    (c) =>\r\n      c.depth == 0 &&\r\n      (c.data.name == args[0] || c.data?.aliases?.includes(args[0]))\r\n  );\r\n  if (!command) return commandNotFound(data.sender, args[0]);\r\n  if (!command.data?.requires(data.sender)) return noPerm(data.sender, command);\r\n  args.shift(); // Remove first command so we can look at args\r\n  // Check Args/SubCommands for errors\r\n  const verifiedCommands: Command[] = [];\r\n  const getArg = (start: Command<any>, i: number): string => {\r\n    if (start.children.length > 0) {\r\n      const arg = start.children.find((v) => v.type.matches(args[i]).success);\r\n      if (!arg && !args[i] && start.callback) return;\r\n      if (!arg) return commandSyntaxFail(data.sender, command, start, args, i), \"fail\";\r\n      if (!arg.data?.requires(data.sender))\r\n        return noPerm(data.sender, arg), \"fail\";\r\n      verifiedCommands.push(arg);\r\n      return getArg(arg, i + 1);\r\n    }\r\n  };\r\n  if (getArg(command, 0)) return;\r\n  sendCallback(args, verifiedCommands, data, command);\r\n});\r\n", "/*\n|--------------------------------------------------------------------------\n| Command Prefix\n|--------------------------------------------------------------------------\n|\n| This is the prefix of the commands that are send in chat\n| changing this changes what people have to type in before using\n| a command for instance: -help. (-) is the command prefix.\n|\n*/\nexport const PREFIX = \"-\";\n", "import { BeforeChatEvent, Location, Player, Vector } from \"@minecraft/server\";\nimport { PREFIX } from \"../../config/commands\";\nimport { LiteralArgumentType, LocationArgumentType } from \"./ArgumentTypes\";\nimport { CommandCallback } from \"./Callback\";\nimport type { Command } from \"./Command\";\n\n/**\n * Returns a Before chat events augments\n * @example this.getChatAugments(BeforeChatEvent)\n */\nexport function getChatAugments(\n  message: string,\n  prefix: string\n): Array<string> {\n  return message\n    .slice(prefix.length)\n    .trim()\n    .match(/\"[^\"]+\"|[^\\s]+/g)\n    .map((e) => e.replace(/\"(.+)\"/, \"$1\").toString());\n}\n\n/**\n * Sends a command not found message to a player\n * @param player player to send message to\n */\nexport function commandNotFound(player: Player, command: string) {\n  player.tell({\n    rawtext: [\n      {\n        text: `\u00A7c`,\n      },\n      {\n        translate: `commands.generic.unknown`,\n        with: [`${command}`],\n      },\n    ],\n  });\n}\n\n/**\n * Sends a command not found message to a player\n * @param player player to send message to\n */\nexport function noPerm(player: Player, command: Command) {\n  player.tell({\n    rawtext: [\n      {\n        text: command.data.invaildPermission\n          ? command.data.invaildPermission\n          : `\u00A7cYou do not have perrmission to use \"${command.data.name}\"`,\n      },\n    ],\n  });\n}\n\n/**\n * Sends a syntax failure message to player\n * @param player\n * @param command\n * @param args\n * @param i\n */\nexport function commandSyntaxFail(\n  player: Player,\n  baseCommand: Command,\n  command: Command,\n  args: string[],\n  i: number\n) {\n  player.tell({\n    rawtext: [\n      {\n        text: `\u00A7c`,\n      },\n      {\n        translate: `commands.generic.syntax`,\n        with: [\n          `${PREFIX}${baseCommand.data.name} ${args.slice(0, i).join(\" \")}`,\n          args[i] ?? \" \",\n          args.slice(i + 1).join(\" \"),\n        ],\n      },\n    ],\n  });\n  if (command.children.length > 1 || !args[i]) {\n    // this type could be many things\n    const types = command.children.map((c) =>\n      c.type instanceof LiteralArgumentType ? c.type.name : c.type?.typeName\n    );\n    player.tell(\n      `\u00A7c\"${args[i] ?? \"undefined\"}\" is not vaild! Argument \"${\n        [...new Set(command.children.map((c) => c.type.name))][0]\n      }\" can be typeof: \"${types.join('\", \"')}\"`\n    );\n  } else {\n    // this type is only 1 thing\n    player.tell(`\u00A7c${command.children[0]?.type?.fail(args[i])}`);\n  }\n}\n\n/**\n * Returns a location of the inputed aguments\n * @example parseLocationAugs([\"~1\", \"3\", \"^7\"], { location: [1,2,3] , viewVector: [1,2,3] })\n */\nexport function parseLocationAugs(\n  [x, y, z]: [x: string, y: string, z: string],\n  { location, viewVector }: { location: Location; viewVector: Vector }\n): Location {\n  if (!x || !y || !x) return null;\n  const locations = [location.x, location.y, location.z];\n  const viewVectors = [viewVector.x, viewVector.y, viewVector.z];\n  const a = [x, y, z].map((arg) => {\n    const r = parseInt(arg.replace(/\\D/g, \"\"));\n    return isNaN(r) ? 0 : r;\n  });\n  const b = [x, y, z].map((arg, index) => {\n    return arg.includes(\"~\")\n      ? a[index] + locations[index]\n      : arg.includes(\"^\")\n      ? a[index] + viewVectors[index]\n      : a[index];\n  });\n  return new Location(b[0], b[1], b[2]);\n}\n\n/**\n * Sends a callback back to the command\n * @param cmdArgs the args that the command used\n * @param args args to use\n */\nexport function sendCallback(\n  cmdArgs: string[],\n  args: Command<any>[],\n  event: BeforeChatEvent,\n  baseCommand: Command<any>\n) {\n  const lastArg = args[args.length - 1] ?? baseCommand;\n  const argsToReturn: any[] = [];\n  for (const [i, arg] of args.entries()) {\n    if (arg.type.name.endsWith(\"*\")) continue;\n    if (arg.type instanceof LocationArgumentType) {\n      argsToReturn.push(\n        parseLocationAugs(\n          [cmdArgs[i], cmdArgs[i + 1], cmdArgs[i + 2]],\n          event.sender\n        )\n      );\n      continue;\n    }\n    if (arg.type instanceof LiteralArgumentType) continue;\n    argsToReturn.push(arg.type.matches(cmdArgs[i]).value ?? cmdArgs[i]);\n  }\n  lastArg.callback(new CommandCallback(event), ...argsToReturn);\n}\n", "import { Player, world } from \"@minecraft/server\";\r\nimport { TABLES } from \"../Database/tables\";\r\n\r\n/**\r\n * Fetch an online players data\r\n */\r\nexport function fetch(playerName: string): Player | null {\r\n  return [...world.getPlayers()].find((plr) => plr.name === playerName);\r\n}\r\n\r\nexport interface IArgumentReturnData<T> {\r\n  /**\r\n   * If this argument matches the value\r\n   */\r\n  success: boolean;\r\n  /**\r\n   * The parsed value that should be passed in command callback\r\n   * if there is no return type this will be null\r\n   */\r\n  value?: T;\r\n}\r\n\r\nexport abstract class IArgumentType {\r\n  /**\r\n   * The return type\r\n   */\r\n  type: any;\r\n  /**\r\n   * The name that the help for this command will see\r\n   * @example \"string\"\r\n   * @example \"Location\"\r\n   * @example \"int\"\r\n   * @example \"number\"\r\n   * @example \"UnitType\"\r\n   */\r\n  typeName: string;\r\n  /**\r\n   * The name this argument is\r\n   */\r\n  name: string = \"name\";\r\n  /**\r\n   * Checks if a value matches this argument type, also\r\n   * returns the corridsponding type\r\n   */\r\n  matches(value: string): IArgumentReturnData<any> {\r\n    return { success: true };\r\n  }\r\n  /**\r\n   * the fail message that should be sent if player fails to meet the matches critera\r\n   * @param value value that was sent\r\n   * @returns what would happen if you didnt enter the right value\r\n   */\r\n  fail(value: string): string {\r\n    return `Value must be of type string!`;\r\n  }\r\n  constructor(name: string = \"any\") {}\r\n}\r\n\r\nexport class LiteralArgumentType implements IArgumentType {\r\n  type: null;\r\n  typeName = \"literal\";\r\n  matches(value: string): IArgumentReturnData<null> {\r\n    return {\r\n      success: this.name == value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `${value} should be ${this.name}!`;\r\n  }\r\n  constructor(public name: string = \"literal\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class StringArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"string\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: value && value != \"\",\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value must be of type string!`;\r\n  }\r\n  constructor(public name: string = \"string\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class IntegerArgumentType implements IArgumentType {\r\n  type: number;\r\n  typeName = \"int\";\r\n  matches(value: string): IArgumentReturnData<number> {\r\n    return {\r\n      success: !isNaN(value as any),\r\n      value: parseInt(value),\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value must be vaild number!`;\r\n  }\r\n  constructor(public name: string = \"integer\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class FloatArgumentType implements IArgumentType {\r\n  type: number;\r\n  typeName = \"float\";\r\n  matches(value: string): IArgumentReturnData<number> {\r\n    return {\r\n      success: Boolean(value?.match(/^\\d+\\.\\d+$/)?.[0]),\r\n      value: parseInt(value),\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value must be vaild float!`;\r\n  }\r\n  constructor(public name: string = \"float\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class LocationArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"location\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: /^([~^]{0,1}(-\\d)?(\\d*)?(\\.(\\d+))?)$/.test(value),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value needs to be a vaild number, value can include: [~,^]`;\r\n  }\r\n  constructor(public name: string = \"location\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class BooleanArgumentType implements IArgumentType {\r\n  type: boolean;\r\n  typeName = \"boolean\";\r\n  matches(value: string): IArgumentReturnData<boolean> {\r\n    return {\r\n      success: Boolean(value?.match(/^(true|false)$/)?.[0]),\r\n      value: value == \"true\" ? true : false,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `\"${value}\" can be either \"true\" or \"false\"`;\r\n  }\r\n  constructor(public name: string = \"boolean\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class PlayerArgumentType implements IArgumentType {\r\n  type: Player;\r\n  typeName = \"playerName\";\r\n  matches(value: string): IArgumentReturnData<Player> {\r\n    return {\r\n      success: fetch(value) ? true : false,\r\n      value: fetch(value),\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `player: \"${value}\", is not in this world`;\r\n  }\r\n  constructor(public name: string = \"player\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class TargetArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"Target\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: Boolean(value?.match(/^(@.|\"[\\s\\S]+\")$/)?.[0]),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `${value} is not a vaild target`;\r\n  }\r\n  constructor(public name: string = \"target\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class ArrayArgumentType<T extends ReadonlyArray<string>>\r\n  implements IArgumentType\r\n{\r\n  type: T[number];\r\n  typeName = \"string\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: this.types.includes(value),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `\"${value}\" must be one of these values: ${this.types.join(\" | \")}`;\r\n  }\r\n  constructor(public name: string = \"array\", public types: T) {\r\n    this.name = name;\r\n    this.types = types;\r\n\r\n    this.typeName = types.join(\" | \").replace(/(.{25})..+/, \"$1...\");\r\n  }\r\n}\r\n\r\nexport class DurationArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"Duration\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: /^(\\d+[hdysmw],?)+$/.test(value),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `\"${value}\" must be a value like \"10d\" or \"3s\" the first part is the length second is unit`;\r\n  }\r\n  constructor(public name: string) {}\r\n}\r\n\r\nexport class PlayerNameArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"playerName\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    const player = TABLES.ids.get(value);\r\n    return {\r\n      success: player ? true : false,\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `player: \"${value}\" has never played this world before! Tip: if the name has spaces in it use quotes around name!`;\r\n  }\r\n  constructor(public name: string = \"playerName\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport const ArgumentTypes = {\r\n  string: StringArgumentType,\r\n  int: IntegerArgumentType,\r\n  float: FloatArgumentType,\r\n  location: LocationArgumentType,\r\n  boolean: BooleanArgumentType,\r\n  player: PlayerArgumentType,\r\n  target: TargetArgumentType,\r\n  array: ArrayArgumentType,\r\n  duration: DurationArgumentType,\r\n  playerName: PlayerNameArgumentType,\r\n};\r\n", "import { BlockLocation } from \"@minecraft/server\";\n\n/*\n|--------------------------------------------------------------------------\n| Max Databse string size\n|--------------------------------------------------------------------------\n|\n| Here is the max database save size meaing when a save gets made\n| it tests the size of that save and splits up the save depending on this\n| Size. Its releated to minecrafts 32k bit limit.\n|\n*/\nexport const MAX_DATABASE_STRING_SIZE = 32000;\n\n/*\n|--------------------------------------------------------------------------\n| Entity Id\n|--------------------------------------------------------------------------\n|\n| This is the entity id of the database this is what stores the information\n| of the database on its nameTag\n|\n*/\nexport const ENTITY_IDENTIFER = \"rubedo:database\";\n\n/*\n|--------------------------------------------------------------------------\n| Entity Spawn Location\n|--------------------------------------------------------------------------\n|\n| This is the spawn location of the database entitys there will be\n| Multiple entitys at this location for each chunk\n|\n*/\nexport const ENTITY_LOCATION = new BlockLocation(0, -64, 0);\n", "import {\n  ENTITY_IDENTIFER,\n  ENTITY_LOCATION,\n  MAX_DATABASE_STRING_SIZE,\n} from \"../../config/database\";\nimport {\n  Entity,\n  InventoryComponentContainer,\n  ItemStack,\n  MinecraftItemTypes,\n} from \"@minecraft/server\";\nimport { chunkString } from \"./utils\";\nimport { DIMENSIONS } from \"../../utils.js\";\n\nexport class Database<Type = never> {\n  /**\n   * The databse name\n   */\n  name: string;\n  /**\n   * The entitys this database has saved, used for memory and speed\n   */\n  savedEntitys: Array<Entity> | undefined;\n  /**\n   * Stores the information that this databse has saved\n   */\n  MEMORY: any | undefined;\n\n  /**\n   *  Compresses a value into a shorter string\n   * @param string value to compress\n   */\n  static compress(string: string): string {\n    //return LZString.compress(string);\n    return string;\n  }\n  /**\n   *  Compresses a value into a shorter string\n   * @param string value to compress\n   */\n  static decompress(string: string): string {\n    //return LZString.decompress(string);\n    return string;\n  }\n\n  /**\n   * Creates a new Database Entity\n   * @param name the database name\n   * @param index the index this entity is\n   * @returns Entity that was made\n   */\n  static createEntity(name: string, index: number): Entity {\n    let entity = DIMENSIONS.overworld.spawnEntity(\n      ENTITY_IDENTIFER,\n      ENTITY_LOCATION\n    );\n    entity.setDynamicProperty(\"name\", name);\n    entity.setDynamicProperty(\"index\", index);\n    const inv: InventoryComponentContainer =\n      entity.getComponent(\"inventory\").container;\n    const defaultItem = new ItemStack(MinecraftItemTypes.acaciaBoat, 1);\n    if (index == 0) defaultItem.nameTag = \"{}\";\n    inv.setItem(0, defaultItem);\n    return entity;\n  }\n\n  /**\n   * Gets the nameTag of the slot from the entitys inventory\n   * @param entity entity to grab from\n   * @param slot slot value to get\n   */\n  static getInventorySlotName(entity: Entity, slot: number): string {\n    const inv: InventoryComponentContainer =\n      entity.getComponent(\"inventory\").container;\n    return inv.getItem(slot)?.nameTag;\n  }\n\n  /**\n   * Sets the nameTag of the slot from the entitys inventory\n   * @param entity entity to grab from\n   * @param slot slot value to get\n   * @param value the value to set it to\n   */\n  static setInventorySlotName(\n    entity: Entity,\n    slot: number,\n    value: string\n  ): void {\n    const inv: InventoryComponentContainer =\n      entity.getComponent(\"inventory\").container;\n    let item = inv.getItem(slot);\n    item.nameTag = value;\n    return inv.setItem(slot, item);\n  }\n\n  /**\n   * Creates a new Database\n   * @param name max length 16\n   */\n  constructor(name: string) {\n    this.name = name;\n    this.savedEntitys = undefined;\n    this.MEMORY = undefined;\n  }\n\n  /**\n   * Grabs all entitys this database is assocated with\n   */\n  get entitys(): Array<Entity> {\n    if (this.savedEntitys) return this.savedEntitys;\n    const ens = DIMENSIONS.overworld\n      .getEntitiesAtBlockLocation(ENTITY_LOCATION)\n      .filter(\n        (e) =>\n          e.typeId == ENTITY_IDENTIFER && e.getDynamicProperty(\"name\") == this.name\n      );\n    this.savedEntitys = ens;\n    return ens;\n  }\n\n  /**\n   * Grabs the data of this name out of the local database\n   */\n  data() {\n    if (this.MEMORY) return this.MEMORY;\n    if (this.entitys.length == 0) Database.createEntity(this.name, 0);\n\n    // If there is only one entity there is no need to sort the data out\n    if (this.entitys.length == 1) {\n      let data = JSON.parse(\n        Database.decompress(Database.getInventorySlotName(this.entitys[0], 0))\n      );\n      this.MEMORY = data;\n      return data;\n    }\n    let data: any = new Array(this.entitys.length);\n    for (const entity of this.entitys) {\n      let index = entity.getDynamicProperty(\"index\") as number;\n      data[index] = Database.getInventorySlotName(entity, 0);\n    }\n    // idk why this needs try catch but it does :(\n    try {\n      data = JSON.parse(data.join(\"\"));\n    } catch (error) {\n      data = {};\n    }\n    this.MEMORY = data;\n    return data;\n  }\n\n  /**\n   * Saves data into the database\n   * @param data data to save\n   */\n  save(data: any) {\n    this.MEMORY = data;\n    /**\n     * Splits the data into chunks to then save across an array of entitys\n     */\n    const dataSplit = chunkString(\n      Database.compress(JSON.stringify(data)),\n      MAX_DATABASE_STRING_SIZE\n    );\n    if (this.entitys && dataSplit.length == this.entitys.length) {\n      for (let i = 0; i < dataSplit.length; i++) {\n        Database.setInventorySlotName(this.entitys[i], 0, dataSplit[i]);\n      }\n    } else {\n      // there is either no entitys or a diffrent amount\n      this.entitys?.forEach((e) => e?.triggerEvent(\"despawn\"));\n      this.savedEntitys = undefined;\n      for (let i = 0; i < dataSplit.length; i++) {\n        const entity = Database.createEntity(this.name, i);\n        Database.setInventorySlotName(entity, 0, dataSplit[i]);\n      }\n    }\n  }\n\n  /**\n   * Sets a key to a value in this database\n   * @param key key to set\n   * @param value value to set the key to\n   */\n  set(key: string, value: Type) {\n    const data = this.data();\n    data[key] = value;\n    this.save(data);\n  }\n\n  /**\n   * Grabs a value from the database by key\n   * @param key value to grab\n   */\n  get(key: string): Type {\n    return this.data()[key];\n  }\n\n  /**\n   * Check if the key exists in the table\n   * @param key the key to test\n   */\n  has(key: string): boolean {\n    return this.keys().includes(key);\n  }\n\n  /**\n   * Delete the key from the table\n   * @param key the key to test\n   */\n  delete(key: string): boolean {\n    let data = this.data();\n    const status = delete data[key];\n    this.save(data);\n    return status;\n  }\n\n  /**\n   * Returns the number of key/value pairs in the Map object.\n   */\n  size(): number {\n    return this.keys().length;\n  }\n\n  /**\n   * Clear everything in the table\n   */\n  clear(): void {\n    this.save({});\n  }\n\n  /**\n   * Get all the keys in the table\n   */\n  keys(): string[] {\n    return Object.keys(this.data());\n  }\n\n  /**\n   * Get all the values in the table\n   */\n  values(): Type[] {\n    return Object.values(this.data());\n  }\n\n  /**\n   * Gets all the keys and values\n   */\n  getCollection(): Object {\n    return this.data();\n  }\n}\n", "/**\n * Splits a string into chunk sizes\n */\nexport function chunkString(str: string, length: number): string[] {\n  return str.match(new RegExp(\".{1,\" + length + \"}\", \"g\"));\n}\n", "import {\n  world,\n  Player,\n  TickEvent,\n  BlockLocation,\n  MinecraftBlockTypes,\n  Entity,\n  MinecraftDimensionTypes,\n  Location,\n} from \"@minecraft/server\";\nimport type { durationSegment, durtationSegmentType, ROLES } from \"./types\";\nimport { TABLES } from \"./lib/Database/tables\";\nimport { Region } from \"./modules/models/Region.js\";\nimport { ChangePlayerRoleTask } from \"./modules/models/Task\";\nimport type { IplayerTickRegister } from \"./types\";\nimport { MessageForm } from \"./lib/Form/Models/MessageForm\";\n\n/**\n * This is to reduce lag when grabbing dimensions keep them set and pre-defined\n */\nexport const DIMENSIONS = {\n  overworld: world.getDimension(MinecraftDimensionTypes.overworld),\n  nether: world.getDimension(MinecraftDimensionTypes.nether),\n  theEnd: world.getDimension(MinecraftDimensionTypes.theEnd),\n  \"minecraft:overworld\": world.getDimension(MinecraftDimensionTypes.overworld),\n  \"minecraft:nether\": world.getDimension(MinecraftDimensionTypes.nether),\n  \"minecraft:the_end\": world.getDimension(MinecraftDimensionTypes.theEnd),\n};\n\n/**\n * Kicks a player\n * @param player player who should be kicked\n * @param message the message that should be show to player\n * @param onFail this needs to be used for loops to unregister\n */\nexport function kick(\n  player: Player,\n  message: Array<String> = [],\n  onFail?: () => void\n): void {\n  if (isServerOwner(player)) {\n    console.warn(`[WARNING]: TRIED TO KICK OWNER`);\n    player.tell(`You have been tried to kick, but you cant!`);\n    return onFail?.();\n  }\n  try {\n    player.runCommand(`kick \"${player.nameTag}\" \u00A7r${message.join(\"\\n\")}`);\n    player.triggerEvent(\"kick\");\n  } catch (error) {\n    if (!/\"statusCode\":-2147352576/.test(error)) return;\n    // This function just tried to kick the owner\n    if (onFail) onFail();\n  }\n}\n\n/**\n * Get score of an entity\n * @example getScore(Entity, 'Money');\n */\nexport function getScore(entity: Entity, objective: string): number {\n  try {\n    return world.scoreboard.getObjective(objective).getScore(entity.scoreboard);\n  } catch (error) {\n    return 0;\n  }\n}\n\n/**\n * grabs the score of a entity off of nameTag\n * @param name Entitys name\n * @param objective objective to get\n * @returns the score of the entity\n */\nexport function getScoreByName(name: string, objective: string): number {\n  try {\n    const command = DIMENSIONS.overworld.runCommand(\n      `scoreboard players test \"${name}\" \"${objective}\" * *`\n    );\n    return parseInt(String(command.statusMessage?.split(\" \")[1]), 10);\n  } catch (error) {\n    return 0;\n  }\n}\n\n/**\n * sets the score of a name\n * @example setScore(\"Smell of curry\", 'Money');\n */\nexport function setScore(\n  entityName: string,\n  objective: string,\n  value: Number\n): void {\n  try {\n    return DIMENSIONS.overworld.runCommand(\n      `scoreboard players set \"${entityName}\" ${objective} ${value}`\n    );\n  } catch (error) {\n    console.warn(error + error.stack);\n  }\n}\n\n/**\n * Gets the role of this player\n * @param player player to get role from\n * @example getRole(\"Smell of curry\")\n */\nexport function getRole(player: Player | string): keyof typeof ROLES {\n  if (player instanceof Player) {\n    return TABLES.roles.get(player.name) ?? \"member\";\n  } else {\n    return TABLES.roles.get(player) ?? \"member\";\n  }\n}\n\n/**\n * Sets the role of this player\n * @example setRole(\"Smell of curry\", \"admin\")\n */\nexport function setRole(\n  player: Player | string,\n  value: keyof typeof ROLES\n): void {\n  if (typeof player == \"string\") {\n    // we need to create a task that will update the role for\n    // that player when they join\n    // also we need to set there db_role back\n    TABLES.roles.set(player, value);\n    /**\n     * If the player is in the game just set it now\n     * if they are not in the game we will need to create a task\n     * to set there role when they join\n     */\n    const inGamePlayer = [...world.getPlayers()].find((p) => p.name == player);\n    if (inGamePlayer) {\n      inGamePlayer.setDynamicProperty(\"role\", value);\n    } else {\n      new ChangePlayerRoleTask(player, value);\n    }\n  } else {\n    // just change both of them no need for task\n    TABLES.roles.set(player.name, value);\n    player.setDynamicProperty(\"role\", value);\n  }\n}\n\n/**\n * Checks if a player is the owner of this world that was set using `/function`\n * @param player player to test\n * @returns if player is owner\n */\nexport function isServerOwner(player: Player): boolean {\n  return world.getDynamicProperty(\"worldsOwner\") == player.id;\n}\n\n/**\n * Checks if the server is locked down\n */\nexport function isLockedDown(): boolean {\n  return (world.getDynamicProperty(\"isLockDown\") ?? false) as boolean;\n}\n\n/**\n * Sets the server as lockdown or not\n * @param val if the server is locked down or not\n */\nexport function setLockDown(val: boolean) {\n  world.setDynamicProperty(\"isLockDown\", val);\n}\n\n/**\n * Sets Deny blocks at bottom of region every 5 mins\n */\nexport function loadRegionDenys() {\n  for (const region of Region.getAllRegions()) {\n    const loc1 = new BlockLocation(region.from.x, -64, region.from.z);\n    const loc2 = new BlockLocation(region.to.x, -64, region.to.z);\n    for (const blockLocation of loc1.blocksBetween(loc2)) {\n      DIMENSIONS[region.dimensionId as keyof typeof DIMENSIONS]\n        .getBlock(blockLocation)\n        ?.setType(MinecraftBlockTypes.deny);\n    }\n  }\n}\n\n/**\n * Stores all the callbacks in an array\n */\nconst CALLBACKS: IplayerTickRegister[] = [];\n\n/**\n * Sends a callback for each player\n * @returns the key to disable this callback\n */\nexport function forEachValidPlayer(\n  callback: (player: Player, event: TickEvent) => void,\n  delay = 0\n) {\n  CALLBACKS.push({ callback: callback, delay: delay, lastCall: 0 });\n}\n\nworld.events.tick.subscribe((tick) => {\n  const players = [...world.getPlayers()];\n  for (const [i, player] of players.entries()) {\n    if ([\"moderator\", \"admin\"].includes(getRole(player))) continue;\n    for (const CALLBACK of CALLBACKS) {\n      if (\n        CALLBACK.delay != 0 &&\n        tick.currentTick - CALLBACK.lastCall < CALLBACK.delay\n      )\n        continue;\n      CALLBACK.callback(player, tick);\n      if (i == players.length - 1) CALLBACK.lastCall = tick.currentTick;\n    }\n  }\n});\n\n/**\n * Runs a Command\n * @param command a minecraft /command\n * @param dimension: \"overworld\" | \"nether\" | \"the end\"\n * @param debug: true console logs the command, else it runs command\n * @example runCommand(`say test`)\n */\nexport function runCommand(\n  command: string,\n  dimension: string = \"overworld\",\n  debug: boolean = false\n): Object {\n  try {\n    return debug\n      ? console.warn(JSON.stringify(this.runCommand(command)))\n      : DIMENSIONS.overworld.runCommand(command);\n  } catch (error) {\n    return { error: true };\n  }\n}\n\n/**\n * Gets a players id based on a saved database values\n * @param playerName playerName to get\n */\nexport function getId(playerName: string): string | null {\n  return TABLES.ids.get(playerName);\n}\n\n/**\n *\n * @param duration time to convert\n * @example ```\n * durationToMs(\"10s\")\n * durationToMs(\"10d,2y\")\n * durationToMs(\"5m\")\n * durationToMs(\"23ms,10s\")\n * ```\n */\nexport function durationToMs(duration: string): number {\n  /**\n   * This holds the diffrent duration values this duration can have\n   * @example `[\"10d\", \"20s\", \"2h\"]`\n   * @example `[\"2h\"]`\n   */\n  const values: durationSegment[] = duration.split(\",\") as durationSegment[];\n  console.warn(values.length);\n  let ms = 0;\n  for (const value of values) {\n    const length = parseInt(value.match(/\\D+|\\d+/g)[0]);\n    const unit = value.match(/\\D+|\\d+/g)[1] as durtationSegmentType;\n    if (unit == \"y\") ms = ms + 3.17098e-11 * length;\n    if (unit == \"w\") ms = ms + 6.048e8 * length;\n    if (unit == \"d\") ms = ms + 8.64e7 * length;\n    if (unit == \"h\") ms = ms + 3.6e6 * length;\n    if (unit == \"m\") ms = ms + 60000 * length;\n    if (unit == \"s\") ms = ms + 1000 * length;\n    if (unit == \"ms\") ms = ms + length;\n  }\n  return ms;\n}\n\nexport function msToTime(duration: number) {\n  return new Date(duration).toString();\n}\n\n/**\n * Converts a location to a block location\n */\nexport function locationToBlockLocation(loc: Location): BlockLocation {\n  return new BlockLocation(\n    Math.floor(loc.x),\n    Math.floor(loc.y),\n    Math.floor(loc.z)\n  );\n}\n\n/**\n * Sends a confirmation message to a player to confirm a action\n * @param action action message to confirm\n * @param onConfirm callback to run when a player confirms the action\n * @param onCancel callback to run when a player cancels the action, this can be null\n * @example ```\n * confirmAction(\"Ban Smell of curry\", () => {\n * new Ban(\"Smell of curry\")\n * })\n * ```\n */\nexport function confirmAction(\n  player: Player,\n  action: string,\n  onConfirm: () => void,\n  onCancel: () => void = () => {}\n) {\n  new MessageForm(\"Confirm To Continue\", action)\n    .setButton1(\"Confirm\", onConfirm)\n    .setButton2(\"Never Mind\", onCancel)\n    .show(player)\n}\n", "/**\n * The default permissions for all regions made\n */\nexport const DEFAULT_REGION_PERMISSIONS = {\n  /**\n   * If players in this region can use doors, trapdoors, and switches like buttons and levers\n   */\n  doorsAndSwitches: true,\n  /**\n   * If players in this region can open containers, this is like chests, furnaces, hoppers, etc\n   */\n  openContainers: true,\n  /**\n   * If the players in this region can fight each other\n   */\n  pvp: false,\n  /**\n   * the entitys allowed in this region\n   */\n  allowedEntitys: [\"minecraft:player\", \"minecraft:npc\", \"minecraft:item\"],\n};\n\n/**\n * All doors and switches in minecraft\n */\nexport const DOORS_SWITCHES = [\n  \"minecraft:acacia_door\",\n  \"minecraft:acacia_trapdoor\",\n  \"minecraft:acacia_button\",\n  \"minecraft:birch_door\",\n  \"minecraft:birch_trapdoor\",\n  \"minecraft:birch_button\",\n  \"minecraft:crimson_door\",\n  \"minecraft:crimson_trapdoor\",\n  \"minecraft:crimson_button\",\n  \"minecraft:dark_oak_door\",\n  \"minecraft:dark_oak_trapdoor\",\n  \"minecraft:dark_oak_button\",\n  \"minecraft:jungle_door\",\n  \"minecraft:jungle_trapdoor\",\n  \"minecraft:jungle_button\",\n  \"minecraft:mangrove_door\",\n  \"minecraft:mangrove_trapdoor\",\n  \"minecraft:mangrove_button\",\n  \"minecraft:spruce_door\",\n  \"minecraft:spruce_trapdoor\",\n  \"minecraft:spruce_button\",\n  \"minecraft:warped_door\",\n  \"minecraft:warped_trapdoor\",\n  \"minecraft:warped_button\",\n  \"minecraft:wooden_door\",\n  \"minecraft:wooden_button\",\n  \"minecraft:trapdoor\",\n  \"minecraft:iron_door\",\n  \"minecraft:iron_trapdoor\",\n  \"minecraft:polished_blackstone_button\",\n  \"minecraft:lever\",\n];\n\n/**\n * A List of all containers a item could be in\n */\nexport const BLOCK_CONTAINERS = [\n  \"minecraft:chest\",\n  \"minecraft:ender_chest\",\n  \"minecraft:barrel\",\n  \"minecraft:trapped_chest\",\n  \"minecraft:dispenser\",\n  \"minecraft:dropper\",\n  \"minecraft:furnace\",\n  \"minecraft:blast_furnace\",\n  \"minecraft:lit_furnace\",\n  \"minecraft:lit_blast_furnace\",\n  \"minecraft:hopper\",\n  \"minecraft:shulker_box\",\n  \"minecraft:undyed_shulker_box\",\n];\n", "import { BlockLocation, Entity } from \"@minecraft/server\";\nimport { DEFAULT_REGION_PERMISSIONS } from \"../../config/region\";\nimport { TABLES } from \"../../lib/Database/tables\";\nimport type { IRegionCords, IRegionPermissions } from \"../../types\";\nimport { loadRegionDenys } from \"../../utils.js\";\n\n/**\n * Holds all regions in memory so its not grabbing them so much\n */\nexport const REGIONS: Array<Region> = [];\n\n/**\n * If the regions have been grabbed if not it will grab them and set this to true\n */\nlet REGIONS_HAVE_BEEN_GRABBED: boolean = false;\n\n/**\n * The Lowest Y value in minecraft\n */\nconst LOWEST_Y_VALUE: number = -64;\n\n/**\n * The HIGEST Y value in minecraft\n */\nconst HIGEST_Y_VALUE: number = 320;\n\n/**\n * Compare a array of numbers with 2 arrays\n * @param XYZa The first set of numbers\n * @param XYZb The second set of numbers\n * @param XYZc The set of numbers that should between the first and second set of numbers\n * @example betweenXYZ([1, 0, 1], [22, 81, 10], [19, 40, 6]));\n */\nfunction betweenXYZ(\n  XYZa: [number, number, number],\n  XYZb: [number, number, number],\n  XYZc: [number, number, number]\n): boolean {\n  return XYZc.every(\n    (c, i) => c >= Math.min(XYZa[i], XYZb[i]) && c <= Math.max(XYZa[i], XYZb[i])\n  );\n}\n\nexport class Region {\n  dimensionId: string;\n  from: IRegionCords;\n  to: IRegionCords;\n  key: string;\n  permissions: IRegionPermissions;\n  /**\n   * Gets all regions\n   */\n  static getAllRegions(): Array<Region> {\n    if (REGIONS_HAVE_BEEN_GRABBED) return REGIONS;\n    const regions = TABLES.regions\n      .values()\n      .map(\n        (region) =>\n          new Region(\n            region.from,\n            region.to,\n            region.dimensionId,\n            region.permissions,\n            region.key\n          )\n      );\n    regions.forEach((r) => {\n      REGIONS.push(r);\n    });\n    return regions;\n  }\n\n  /**\n   * Checks if a block location is in region\n   */\n  static blockLocationInRegion(\n    blockLocation: BlockLocation,\n    dimensionId: string\n  ): Region | undefined {\n    return this.getAllRegions().find(\n      (region) =>\n        region.dimensionId == dimensionId &&\n        betweenXYZ(\n          [region.from.x, LOWEST_Y_VALUE, region.from.z],\n          [region.to.x, HIGEST_Y_VALUE, region.to.z],\n          [blockLocation.x, blockLocation.y, blockLocation.z]\n        )\n    );\n  }\n\n  /**\n   * Removes a region at a block Location\n   * @param dimensionId the id of this dimension\n   * @returns if the region was removed or not\n   */\n  static removeRegionAtBlockLocation(\n    blockLocation: BlockLocation,\n    dimensionId: string\n  ): Boolean {\n    const region = this.blockLocationInRegion(blockLocation, dimensionId);\n    if (!region) return false;\n    return TABLES.regions.delete(region.key);\n  }\n  /**\n   * Creates a new Region to store in db\n   */\n  constructor(\n    from: IRegionCords,\n    to: IRegionCords,\n    dimensionId: string,\n    permissions?: IRegionPermissions,\n    key?: string\n  ) {\n    this.from = from;\n    this.to = to;\n    this.dimensionId = dimensionId;\n    this.permissions = permissions ?? DEFAULT_REGION_PERMISSIONS;\n    this.key = key ? key : Date.now().toString();\n\n    if (!key) {\n      this.update();\n      loadRegionDenys();\n      REGIONS.push(this);\n    }\n  }\n\n  /**\n   * Updates this region in the database\n   */\n  update(): void {\n    TABLES.regions.set(this.key, {\n      key: this.key,\n      from: this.from,\n      dimensionId: this.dimensionId,\n      permissions: this.permissions,\n      to: this.to,\n    });\n  }\n\n  /**\n   * removes this region\n   * @returns if the region was removed succesfully\n   */\n  delete(): boolean {\n    return TABLES.regions.delete(this.key);\n  }\n\n  /**\n   * Checks if a player is in this region\n   * @returns if a entity is in this region or not\n   */\n  entityInRegion(entity: Entity): Boolean {\n    return (\n      this.dimensionId == entity.dimension.id &&\n      betweenXYZ(\n        [this.from.x, LOWEST_Y_VALUE, this.from.z],\n        [this.to.x, HIGEST_Y_VALUE, this.to.z],\n        [entity.location.x, entity.location.y, entity.location.z]\n      )\n    );\n  }\n\n  /**\n   * Changes a permission to on or off\n   */\n  changePermission<T extends keyof IRegionPermissions>(\n    key: T,\n    value: IRegionPermissions[T]\n  ): void {\n    this.permissions[key] = value;\n    this.update();\n  }\n}\n", "import type { ROLES } from \"../../types\";\r\nimport { TABLES } from \"../../lib/Database/tables\";\r\nimport type { IChangePlayerRoleData } from \"../../types\";\r\n\r\nexport class ChangePlayerRoleTask {\r\n  /**\r\n   * The name of the player\r\n   */\r\n  playerName: string;\r\n  /**\r\n   * The role that the player should be set to\r\n   */\r\n  role: keyof typeof ROLES;\r\n\r\n  /**\r\n   *  gets all tasks that are present\r\n   * @returns all tasks\r\n   */\r\n  static getTasks(): Array<IChangePlayerRoleData> {\r\n    return TABLES.tasks.get(\"changePlayerRole\") ?? [];\r\n  }\r\n\r\n  /**\r\n   * Gets the role this player needs to be set to\r\n   * @param playerName name\r\n   */\r\n  static getPlayersRoleToSet(playerName: string): keyof typeof ROLES | null {\r\n    const tasks = ChangePlayerRoleTask.getTasks();\r\n    return tasks.find((t) => t.playerName == playerName)?.role;\r\n  }\r\n\r\n  constructor(playerName: string, role: keyof typeof ROLES) {\r\n    const tasks = ChangePlayerRoleTask.getTasks();\r\n    tasks.push({ playerName: playerName, role: role });\r\n    TABLES.tasks.set(\"changePlayerRole\", tasks);\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { MessageFormData } from \"@minecraft/server-ui\";\r\nimport { TIMEOUT_THRESHOLD } from \"../../../config/form\";\r\nimport type { ButtonCallback, IMessageFormButton } from \"../types\";\r\n\r\nexport class MessageForm {\r\n  /**\r\n   *  the title that this form should have\r\n   */\r\n  title?: string;\r\n  /**\r\n   * extra text that should be displayed in the form\r\n   */\r\n  body?: string;\r\n  /**\r\n   * The default minecraft form this form is based on\r\n   */\r\n  private form: MessageFormData;\r\n  /**\r\n   * the first button of the dialog.\r\n   */\r\n  private button1: IMessageFormButton;\r\n  /**\r\n   * the seccond button of the dialog.\r\n   */\r\n  private button2: IMessageFormButton;\r\n  /**\r\n   * The amount of times it takes to show this form in ms\r\n   * if this value goes above 200 it will time out\r\n   */\r\n  private triedToShow: number;\r\n\r\n  /**\r\n   * Creates a new form to be shown to a player\r\n   * @param title the title that this form should have\r\n   * @param body extra text that should be displayed in the form\r\n   */\r\n  constructor(title?: string, body?: string) {\r\n    this.title = title;\r\n    this.body = body;\r\n    this.form = new MessageFormData();\r\n\r\n    if (title) this.form.title(title);\r\n    if (body) this.form.body(body);\r\n\r\n    this.triedToShow = 0;\r\n  }\r\n\r\n  /**\r\n   * Method that sets the text for the first button of the dialog.\r\n   * @param text text to show on this button\r\n   * @param callback what happens when this button is clicked\r\n   * @example ```\r\n   * setButton1(\"settings\", () => {})\r\n   * ```\r\n   */\r\n  setButton1(text: string, callback: ButtonCallback): MessageForm {\r\n    this.button1 = { text: text, callback: callback };\r\n    this.form.button1(text);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Method that sets the text for the second button of the dialog.\r\n   * @param text text to show on this button\r\n   * @param callback what happens when this button is clicked\r\n   * @example ```\r\n   * setButton2(\"settings\", () => {})\r\n   * ```\r\n   */\r\n  setButton2(text: string, callback: ButtonCallback): MessageForm {\r\n    this.button2 = { text: text, callback: callback };\r\n    this.form.button2(text);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows this form to the player\r\n   * @param player player to show to\r\n   */\r\n  show(player: Player): void {\r\n    this.form.show(player).then((response) => {\r\n      if (response.canceled) {\r\n        if (response.cancelationReason == \"userBusy\") {\r\n          // check time and reshow form\r\n          if (this.triedToShow > TIMEOUT_THRESHOLD)\r\n            return player.tell(\r\n              `\u00A7cForm Timeout: tried to show form, but you were busy (close chat after running command)`\r\n            );\r\n          this.triedToShow++;\r\n          this.show(player);\r\n        }\r\n        return;\r\n      }\r\n      if (response.selection == 1) this.button1?.callback?.();\r\n      if (response.selection == 0) this.button2?.callback?.();\r\n    });\r\n  }\r\n}\r\n", "import type {\r\n  IRegionDB,\r\n  IMuteData,\r\n  IBanData,\r\n  IFreezeData,\r\n  INpcLocation,\r\n} from \"../../types\";\r\nimport type { ROLES } from \"../../types\";\r\nimport { Database } from \"../../lib/Database/Database\";\r\n\r\n/**\r\n * All the Database tables that are created\r\n */\r\nexport const TABLES = {\r\n  config: new Database<any>(\"config\"),\r\n  freezes: new Database<IFreezeData>(\"freezes\"),\r\n  mutes: new Database<IMuteData>(\"mutes\"),\r\n  bans: new Database<IBanData>(\"bans\"),\r\n  regions: new Database<IRegionDB>(\"regions\"),\r\n  roles: new Database<keyof typeof ROLES>(\"roles\"),\r\n  tasks: new Database<any>(\"tasks\"),\r\n  npcs: new Database<INpcLocation>(\"npcs\"),\r\n  ids: new Database<string>(\"ids\"),\r\n};\r\n", "import { BeforeChatEvent, Player } from \"@minecraft/server\";\r\n\r\nexport class CommandCallback {\r\n  data: BeforeChatEvent;\r\n  sender: Player;\r\n\r\n  /**\r\n   * Returns a commands callback\r\n   * @param data chat data that was used\r\n   */\r\n  constructor(data: BeforeChatEvent) {\r\n    this.data = data;\r\n    this.sender = data.sender;\r\n  }\r\n  /**\r\n   * Replys to the sender of a command callback\r\n   * @param text Message or a lang code\r\n   * @example ctx.reply('Hello World!');\r\n   */\r\n  reply(text: string) {\r\n    this.sender.tell(text);\r\n  }\r\n}\r\n", "import { Player, world } from \"@minecraft/server\";\r\nimport { ENTITY_INVENTORY, GUI_ITEM } from \"../../config/chest\";\r\nimport { DIMENSIONS } from \"../../utils.js\";\r\nimport { setTickInterval } from \"../Scheduling/utils\";\r\nimport { ChestGUI } from \"./Models/EntityChest\";\r\nimport { CHESTGUIS, CHEST_OPEN, getHeldItem } from \"./utils.js\";\r\nimport \"./pages/home\";\r\n\r\nworld.events.tick.subscribe((data) => {\r\n  for (const player of world.getPlayers()) {\r\n    /**\r\n     * Loop through all players, check if player has a chest gui\r\n     * if not create them one\r\n     * Once all players are checked verify there are no false entitys\r\n     */\r\n    if (getHeldItem(player)?.typeId != GUI_ITEM) {\r\n      if (CHESTGUIS[player.name]) CHESTGUIS[player.name].despawn();\r\n      continue;\r\n    }\r\n    // Player has a item Held we need to verify that they have a gui\r\n    if (Object.keys(CHESTGUIS).includes(player?.name)) continue;\r\n    // Player does not have a chest gui spawn them in one\r\n    CHESTGUIS[player.name] = new ChestGUI(player);\r\n  }\r\n});\r\n\r\nworld.events.beforeDataDrivenEntityTriggerEvent.subscribe((data) => {\r\n  if (!(data.entity instanceof Player)) return;\r\n  if (data.id == \"rubedo:has_container_open\") {\r\n    CHEST_OPEN.set(data.entity, true);\r\n  } else if (data.id == \"rubedo:dosent_have_container_open\") {\r\n    CHEST_OPEN.set(data.entity, false);\r\n  }\r\n});\r\n\r\n/**\r\n * This system will detect false entitys abd kill them to\r\n * reduce lag and elimate broken/left players/entitys\r\n */\r\nsetTickInterval(() => {\r\n  const vaildIds = Object.values(CHESTGUIS).map((c) => c.entity.id);\r\n  for (const entity of DIMENSIONS.overworld.getEntities({\r\n    type: ENTITY_INVENTORY,\r\n  })) {\r\n    if (vaildIds.includes(entity.id)) continue;\r\n    // This entity is not vaild\r\n    entity.triggerEvent(\"despawn\");\r\n  }\r\n}, 100);\r\n", "/*\n|--------------------------------------------------------------------------\n| Gui item\n|--------------------------------------------------------------------------\n|\n| This is the GUI item that is used to open up the gui\n| this is set to the identifer of item.json and is used to find the item\n| in the gui template\n|\n*/\nexport const GUI_ITEM = \"rubedo:gui\";\n\n/*\n|--------------------------------------------------------------------------\n| Entity Inventory\n|--------------------------------------------------------------------------\n|\n| The id of the entity inventory\n| this is found in the entities file\n| this will be updated if inventory entity is changed\n|\n*/\nexport const ENTITY_INVENTORY = \"rubedo:inventory\";\n\n/*\n|--------------------------------------------------------------------------\n| Default Static Page id\n|--------------------------------------------------------------------------\n|\n| This is the default static page id of what is open by default\n| when you click on the gui, this can be changed but it probably shouldnt\n| because static pages will need to be changed\n|\n*/\nexport const DEFAULT_STATIC_PAGE_ID = \"home\";\n", "import { TickEvent, world } from \"@minecraft/server\";\n\n/**\n * A list of timeouts that are occuring\n */\nconst TIMEOUTS: Map<string, Timeout> = new Map();\n\nexport class Timeout {\n  callbackTick: number | null;\n  tickDelay: number;\n  loop: boolean;\n  callback: (tick: number) => void;\n  id: any;\n  TickCallBack: (arg: TickEvent) => void;\n  /**\n   * Register a timeout\n   * @param {() => void} callback On timeout complete code to be executed\n   * @param {number} tick tick of the timeout\n   */\n  constructor(\n    callback: (tick: number) => void,\n    tick: number,\n    loop: boolean = false,\n    id: any = Date.now()\n  ) {\n    this.callbackTick = null;\n    this.tickDelay = tick;\n    this.loop = loop;\n    this.callback = callback;\n    this.id = id;\n\n    TIMEOUTS.set(id, this);\n\n    this.TickCallBack = world.events.tick.subscribe(({ currentTick }) => {\n      if (!this.callbackTick) this.callbackTick = currentTick + this.tickDelay;\n      if (this.callbackTick > currentTick) return;\n      this.callback(currentTick);\n\n      if (!this.loop) return this.expire();\n      this.callbackTick = currentTick + this.tickDelay;\n    });\n  }\n\n  /**\n   * Expires this tickTimeout\n   */\n  expire() {\n    world.events.tick.unsubscribe(this.TickCallBack);\n    TIMEOUTS.delete(this.id);\n  }\n}\n", "import { Timeout } from \"./Timeout\";\n\n/**\n * Sleeps your code\n * @param {number} tick time in ticks you want the return to occur\n * @returns {Promise<void>}\n */\nexport const sleep = (tick: number): Promise<void> => {\n  return new Promise((resolve) => setTickTimeout(resolve, tick));\n};\n\n/**\n * Register a tick timeout\n * @param callback Code you want to execute when the command is executed\n * @param tick time in ticks you want the return to occur\n */\nexport function setTickTimeout(callback: () => void, tick: number) {\n  new Timeout(callback, tick);\n}\n\n/**\n * Delay executing a function, REPEATEDLY\n */\nexport function setTickInterval(\n  callback: (tick: number) => void,\n  tick: number\n): any {\n  return new Timeout(callback, tick, true);\n}\n\n/**\n * Clears a interval\n */\nexport function clearTickInterval(callback: Timeout) {\n  callback.expire();\n}\n", "import { Entity, Player, world } from \"@minecraft/server\";\r\nimport { AIR } from \"../../../index.js\";\r\nimport { ENTITY_INVENTORY } from \"../../../config/chest\";\r\nimport {\r\n  ISlotChangeReturn,\r\n  onEntityInventorySlotChange,\r\n} from \"../../Events/onSlotChange\";\r\nimport {\r\n  CHESTGUIS,\r\n  CHEST_OPEN,\r\n  clearPlayersPointer,\r\n  getItemAtSlot,\r\n  PAGES,\r\n} from \"../utils.js\";\r\nimport { ItemGrabbedCallback } from \"./ItemGrabbedCallback\";\r\nimport { ISlot, Page } from \"./Page.js\";\r\n\r\nexport class ChestGUI {\r\n  /**\r\n   * The connected player to this gui\r\n   */\r\n  player: Player;\r\n  /**\r\n   * The entity that this chest gui is assoicated to\r\n   */\r\n  entity: Entity;\r\n  /**\r\n   * The event that is registerd on this gui\r\n   */\r\n  tickEvent: any;\r\n\r\n  /**\r\n   * The page that this gui is currently viewing\r\n   */\r\n  page: Page;\r\n\r\n  /**\r\n   * The event that is used to test for changes in inventory\r\n   */\r\n  slotChangeEvent: number;\r\n\r\n  /**\r\n   * if the player has a chest open\r\n   */\r\n  hasChestOpen: boolean;\r\n\r\n  /**\r\n   * Spawns a entity to be attached to the player\r\n   * @param player player this entity will be attcked to\r\n   */\r\n  static spawnEntity(player: Player): Entity {\r\n    try {\r\n      return player.dimension.spawnEntity(\r\n        ENTITY_INVENTORY,\r\n        player.headLocation\r\n      );\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Links a new chest gui to a player\r\n   * @param player player to link\r\n   */\r\n  constructor(player: Player) {\r\n    this.player = player;\r\n    this.entity = ChestGUI.spawnEntity(player);\r\n    if (this.entity) {\r\n      this.hasChestOpen = false;\r\n      this.setPage(\"home\");\r\n    }\r\n    this.tickEvent = world.events.tick.subscribe(() => {\r\n      if (!this.entity) return this.despawn();\r\n      if (CHEST_OPEN.get(this.player)) {\r\n        if (!this.hasChestOpen) {\r\n          // Player has this inventory open run checks for changes\r\n          this.slotChangeEvent = onEntityInventorySlotChange.subscribe(\r\n            { type: ENTITY_INVENTORY },\r\n            (entity, change) => {\r\n              if (entity.id != this.entity.id) return;\r\n              this.onSlotChange(change);\r\n            }\r\n          );\r\n        }\r\n        this.hasChestOpen = true;\r\n      } else {\r\n        // Player does not have inventory open but item is held\r\n        try {\r\n          this.entity.teleport(\r\n            this.player.headLocation,\r\n            this.player.dimension,\r\n            this.player.rotation.x,\r\n            this.player.rotation.y,\r\n            true\r\n          );\r\n        } catch (error) {\r\n          this.despawn();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets this gui to a page of items\r\n   * @param pageId page to set this gui too\r\n   */\r\n  setPage(pageId: string, extras?: any) {\r\n    const c = this.entity.getComponent(\"inventory\").container;\r\n    for (let i = 0; i < c.size; i++) {\r\n      c.setItem(i, AIR);\r\n    }\r\n    if (!Object.keys(PAGES).includes(pageId))\r\n      throw new Error(`pageId ${pageId} does not exist!`);\r\n    const page = PAGES[pageId];\r\n    this.page = page;\r\n\r\n    page.fillType(this.entity, page, extras);\r\n    this.entity.nameTag = `size:54`;\r\n  }\r\n\r\n  /**\r\n   * This runs when a slot gets changed in the chest inventory\r\n   */\r\n  onSlotChange(change: ISlotChangeReturn) {\r\n    /**\r\n     * The guiItem that was changed\r\n     */\r\n    const slot: ISlot = this.page.slots[change.slot];\r\n\r\n    if (!slot) {\r\n      // item was added to page that is not a valid slot so set that slot back to air\r\n      this.entity.getComponent(\"inventory\").container.setItem(change.slot, AIR);\r\n    } else if (change.changeType == \"delete\") {\r\n      // item was taken from this page\r\n      if (slot.item) clearPlayersPointer(this.player, change.item);\r\n      /**\r\n       * if the slot has a item that returns when something is grabbed, this checks\r\n       * if there is a item put into the slot to return, if not it will not send a\r\n       * callback by returning before\r\n       */\r\n      if (!slot.item && !getItemAtSlot(this.entity, change.slot)) return;\r\n      slot.action(new ItemGrabbedCallback(this, slot, change));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes this gui and despawns its entity\r\n   */\r\n  despawn() {\r\n    try {\r\n      this.entity?.triggerEvent(\"despawn\");\r\n    } catch (error) {}\r\n    try {\r\n      delete CHESTGUIS[this.player.name];\r\n    } catch (error) {}\r\n    if (this.tickEvent) world.events.tick.unsubscribe(this.tickEvent);\r\n    if (this.slotChangeEvent)\r\n      onEntityInventorySlotChange.unsubscribe(this.slotChangeEvent);\r\n  }\r\n}\r\n", "import {\r\n  Entity,\r\n  EntityQueryOptions,\r\n  ItemStack,\r\n  PlayerInventoryComponentContainer,\r\n} from \"@minecraft/server\";\r\nimport { DIMENSIONS } from \"../../utils.js\";\r\nimport { setTickInterval } from \"../Scheduling/utils\";\r\n\r\ntype onSlotChangeCallback = (entity: Entity, change: ISlotChangeReturn) => void;\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: onSlotChangeCallback;\r\n    entities: EntityQueryOptions;\r\n  };\r\n} = {};\r\n\r\nconst MAPPED_INVENTORYS: { [key: string]: Array<IMappedInventoryItem> } = {};\r\nexport const PREVIOUS_CHANGE: { [key: string]: ISlotChangeReturn } = {};\r\n\r\nexport interface ISlotChangeReturn {\r\n  /**\r\n   * Slot that changed\r\n   */\r\n  slot: number;\r\n  /**\r\n   * The uid of this item\r\n   */\r\n  uid: string;\r\n  /**\r\n   * The old uid of this item\r\n   */\r\n  oldUid?: string;\r\n  /**\r\n   * the item that was grabbed / put\r\n   */\r\n  item: ItemStack;\r\n  /**\r\n   * The old itemStack that was in this slot\r\n   */\r\n  oldItem?: ItemStack;\r\n  /**\r\n   * How the inventory has changed\r\n   */\r\n  changeType: \"delete\" | \"put\" | \"swap\" | \"fluctuation\" | \"move\";\r\n}\r\n\r\ninterface IMappedInventoryItem {\r\n  /**\r\n   * a unique id for a itemStack\r\n   */\r\n  uid: string;\r\n  /**\r\n   * the item\r\n   */\r\n  item: ItemStack;\r\n}\r\n\r\n/**\r\n * Finds and returns a slot change in a inventory\r\n */\r\nfunction getSlotChanges(\r\n  entity: Entity,\r\n  oldInv: Array<IMappedInventoryItem>,\r\n  newInv: Array<IMappedInventoryItem>\r\n): Array<ISlotChangeReturn> {\r\n  if (oldInv.length != newInv.length) return [];\r\n  const changes: Array<ISlotChangeReturn> = [];\r\n  for (let i = 0; i < newInv.length; i++) {\r\n    if (\r\n      oldInv[i]?.item?.amount < newInv[i]?.item?.amount ||\r\n      (oldInv[i]?.item?.amount > newInv[i]?.item?.amount &&\r\n        oldInv[i]?.item?.amount != 0)\r\n    ) {\r\n      // Checks if the item is the same but checks if the amount has changed\r\n      const change_data: ISlotChangeReturn = {\r\n        slot: i,\r\n        uid: newInv[i].uid,\r\n        oldUid: oldInv[i].uid,\r\n        item: newInv[i].item,\r\n        oldItem: oldInv[i].item,\r\n        changeType: \"fluctuation\",\r\n      };\r\n      changes.push(change_data);\r\n      PREVIOUS_CHANGE[entity.id] = change_data;\r\n      continue;\r\n    }\r\n    if (newInv[i].uid == oldInv[i].uid) continue; // no change\r\n    if (oldInv[i]?.item && newInv[i]?.item) {\r\n      // Checks if there was a new item but a new slot was not taken up\r\n      // Meaning that the item got used like using a bucket on a cow\r\n      const change_data: ISlotChangeReturn = {\r\n        slot: i,\r\n        uid: newInv[i].uid,\r\n        oldUid: oldInv[i].uid,\r\n        item: newInv[i].item,\r\n        oldItem: oldInv[i].item,\r\n        changeType: \"swap\",\r\n      };\r\n      changes.push(change_data);\r\n      PREVIOUS_CHANGE[entity.id] = change_data;\r\n    } else if (!newInv[i]?.item) {\r\n      // There is no more item in this slot\r\n      // Meaning the item has been moved across slots or been trown out\r\n      const change_data: ISlotChangeReturn = {\r\n        slot: i,\r\n        uid: oldInv[i].uid,\r\n        item: oldInv[i].item,\r\n        changeType: \"delete\",\r\n      };\r\n      changes.push(change_data);\r\n      PREVIOUS_CHANGE[entity.id] = change_data;\r\n    } else if (newInv[i]?.item) {\r\n      // New item has been added in this slot\r\n      if (\r\n        PREVIOUS_CHANGE[entity.id]?.changeType == \"delete\" &&\r\n        PREVIOUS_CHANGE[entity.id]?.uid == newInv[i].uid\r\n      ) {\r\n        // item has been moved across slots\r\n        const change_data: ISlotChangeReturn = {\r\n          slot: i,\r\n          uid: newInv[i].uid,\r\n          item: newInv[i].item,\r\n          changeType: \"move\",\r\n        };\r\n        changes.push(change_data);\r\n        PREVIOUS_CHANGE[entity.id] = change_data;\r\n        continue;\r\n      } else {\r\n        const change_data: ISlotChangeReturn = {\r\n          slot: i,\r\n          uid: newInv[i].uid,\r\n          item: newInv[i].item,\r\n          changeType: \"put\",\r\n        };\r\n        changes.push(change_data);\r\n        PREVIOUS_CHANGE[entity.id] = change_data;\r\n      }\r\n    }\r\n  }\r\n  return changes;\r\n}\r\n\r\n/**\r\n  * Converts a itemStack to a unique id\r\n  * @param {ItemStack} item\r\n  * @returns {string}\r\n \r\n  */\r\nexport function getItemUid(item: ItemStack): string {\r\n  if (!item) return \"\";\r\n  const data = [];\r\n  data.push(item.typeId);\r\n  data.push(item.nameTag);\r\n  data.push(item.data);\r\n  data.push(item.getLore().join(\"\"));\r\n  return data.join(\"\");\r\n}\r\n\r\n/**\r\n * Gets a entitys inventory but with mapped data\r\n */\r\nfunction mapInventory(\r\n  container: PlayerInventoryComponentContainer\r\n): Array<IMappedInventoryItem> {\r\n  const inventory = [];\r\n\r\n  for (let i = 0; i < container.size; i++) {\r\n    let item = container.getItem(i);\r\n    inventory[i] = {\r\n      uid: getItemUid(item),\r\n      item: item,\r\n    };\r\n  }\r\n  return inventory;\r\n}\r\n\r\nsetTickInterval(() => {\r\n  for (const callback of Object.values(CALLBACKS)) {\r\n    for (const entity of DIMENSIONS.overworld.getEntities(callback.entities)) {\r\n      const inventory = mapInventory(\r\n        entity.getComponent(\"inventory\").container\r\n      );\r\n      const changes = getSlotChanges(\r\n        entity,\r\n        MAPPED_INVENTORYS[entity.id] ?? inventory,\r\n        inventory\r\n      );\r\n      MAPPED_INVENTORYS[entity.id] = inventory;\r\n      if (changes.length == 0) continue;\r\n      if (entity.hasTag(\"skipCheck\")) {\r\n        entity.removeTag(\"skipCheck\");\r\n        delete PREVIOUS_CHANGE[entity.id];\r\n        continue;\r\n      }\r\n      for (const change of changes) {\r\n        callback.callback(entity, change);\r\n      }\r\n    }\r\n  }\r\n}, 5);\r\n\r\nexport class onEntityInventorySlotChange {\r\n  /**\r\n   * Subscribes to a callback to get notified when a entitys inventory changes\r\n   * @param callback what to be called when one of these entitys inventorys changes\r\n   * @param entities the entitys to grab from\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(\r\n    entities: EntityQueryOptions,\r\n    callback: onSlotChangeCallback\r\n  ): number {\r\n    const key = Date.now();\r\n    CALLBACKS[key] = { callback: callback, entities: entities };\r\n    return key;\r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n", "import { Player, world } from \"@minecraft/server\";\n\nexport class PlayerLog<T extends any = any> {\n  data: Map<string, T>;\n  events: Object;\n\n  constructor() {\n    this.data = new Map();\n    this.events = {\n      playerLeave: world.events.playerLeave.subscribe((data) =>\n        this.data.delete(data.playerName)\n      ),\n    };\n  }\n\n  /**\n   * Logs a player to a value\n   */\n  set(player: Player, value: T): void {\n    this.data.set(player.name, value);\n  }\n\n  /**\n   * Gets a players value\n   */\n  get(player: Player): T {\n    return this.data.get(player.name);\n  }\n\n  /**\n   * Deletes a player from log\n   */\n  delete(player: Player) {\n    this.data.delete(player.name);\n  }\n\n  /**\n   * Clears this Player log\n   */\n  clear() {\n    this.data.clear();\n  }\n\n  /**\n   * Gets all the players in the log\n   */\n  playerNames(): Array<string> {\n    return [...this.data.keys()];\n  }\n}\n", "import type { Entity, ItemStack, Player } from \"@minecraft/server\";\r\nimport { PlayerLog } from \"../../modules/models/PlayerLog\";\r\nimport type { ChestGUI } from \"./Models/EntityChest\";\r\nimport type { Page } from \"./Models/Page\";\r\n\r\n/**\r\n * This will link a players name to a chest gui instance\r\n */\r\nexport const CHESTGUIS: { [key: string]: ChestGUI } = {};\r\n\r\n/**\r\n * This will link a players name to a chest gui instance\r\n */\r\nexport const PAGES: { [key: string]: Page } = {};\r\n\r\n/**\r\n * This will keep track if a player has a chest open\r\n */\r\nexport const CHEST_OPEN = new PlayerLog<boolean>();\r\n\r\n/**\r\n * Gets a players held item\r\n */\r\nexport function getHeldItem(player: Player): ItemStack {\r\n  const inventory = player.getComponent(\"minecraft:inventory\").container;\r\n  return inventory.getItem(player.selectedSlot);\r\n}\r\n\r\n/**\r\n * Clears the player of a item in there pointer slot\r\n */\r\nexport async function clearPlayersPointer(\r\n  player: Player,\r\n  ItemToClear: ItemStack\r\n) {\r\n  try {\r\n    const inventory = player.getComponent(\"minecraft:inventory\").container;\r\n    let itemsToLoad = [];\r\n    for (let i = 0; i < inventory.size; i++) {\r\n      const item = inventory.getItem(i);\r\n      if (!item) continue;\r\n      if (item?.typeId == ItemToClear?.typeId) {\r\n        itemsToLoad.push({ slot: i, item: item });\r\n        inventory.setItem;\r\n        if (i < 9) {\r\n          player.runCommand(`replaceitem entity @s slot.hotbar ${i} air`);\r\n        } else {\r\n          player.runCommand(\r\n            `replaceitem entity @s slot.inventory ${i - 9} air`\r\n          );\r\n        }\r\n      }\r\n    }\r\n    player.runCommand(\r\n      `clear @s ${ItemToClear?.typeId} ${ItemToClear.data} ${ItemToClear.amount}`\r\n    );\r\n    for (const item of itemsToLoad) {\r\n      inventory.setItem(item.slot, item.item);\r\n    }\r\n  } catch (error) {\r\n    // the item couldnt be cleared that means\r\n    // they now have a item witch is really BAD\r\n    [\r\n      ...player.dimension.getEntities({\r\n        type: \"minecraft:item\",\r\n        location: player.location,\r\n        maxDistance: 2,\r\n        closest: 1,\r\n      }),\r\n    ].forEach((e) => e.kill());\r\n  }\r\n}\r\n\r\n/**\r\n * Gets a item at slot\r\n */\r\nexport function getItemAtSlot(entity: Entity, slot: number): ItemStack | null {\r\n  const inventory = entity.getComponent(\"minecraft:inventory\").container;\r\n  return inventory.getItem(slot);\r\n}\r\n", "import {\n  ActionFormData,\n  MessageFormData,\n  ModalFormData,\n  ActionFormResponse,\n  ModalFormResponse,\n  MessageFormResponse,\n} from \"@minecraft/server-ui\";\nimport { ChestGUI } from \"./EntityChest\";\nimport { ItemStack } from \"@minecraft/server\";\nimport { sleep } from \"../../Scheduling/utils\";\nimport { ItemDatabase } from \"../database/Item\";\nimport type { ISlot } from \"./Page\";\nimport type { ISlotChangeReturn } from \"../../Events/onSlotChange\";\n\ntype FormActionReturn<T> = T extends ActionFormData\n  ? Promise<ActionFormResponse>\n  : T extends ModalFormData\n  ? Promise<ModalFormResponse>\n  : Promise<MessageFormResponse>;\n\nexport class ItemGrabbedCallback {\n  gui: ChestGUI;\n  slot: ISlot;\n  change: ISlotChangeReturn;\n  /**\n   * New Callback\n   */\n  constructor(gui: ChestGUI, slot: ISlot, change: ISlotChangeReturn) {\n    this.gui = gui;\n    this.slot = slot;\n    this.change = change;\n  }\n\n  /**\n   * Messages to the owner of this gui\n   * @example ctx.reply('Hello World!');\n   */\n  message(text: string) {\n    this.gui.player.tell(text);\n  }\n\n  /**\n   * Gets the item added\n   */\n  getItemAdded(): ItemStack | null {\n    if (this.slot.item) return null;\n    return this.gui.entity\n      .getComponent(\"minecraft:inventory\")\n      .container.getItem(this.change.slot);\n  }\n\n  /**\n   * Gives the player the item the grabbed\n   */\n  GiveAction(item: ItemStack = this.slot.item.itemStack) {\n    this.gui.player.getComponent(\"minecraft:inventory\").container.addItem(item);\n  }\n\n  /**\n   * Gives the player the item that was grabbed also removes this item from the gui + db\n   * @param db the item database to remove this item from\n   */\n  TakeAction(db: ItemDatabase = null) {\n    this.gui.player\n      .getComponent(\"minecraft:inventory\")\n      .container.addItem(this.slot.item.itemStack);\n    this.gui.page.slots[this.change.slot] = null;\n    if (!db) return;\n    db.delete(this.slot.item.components.dbKey);\n  }\n\n  /**\n   * Changes the page of the chestGui when this item is grabbed\n   * @param page page to send to\n   * @param extras stuff to be passed onto the page\n   */\n  PageAction(page: string, extras?: any) {\n    this.gui.setPage(page, extras);\n  }\n\n  /**\n   * Closes the chect GUI when this item is grabbed\n   */\n  CloseAction() {\n    this.gui.despawn();\n  }\n\n  /**\n   * Sets the item back\n   */\n  SetAction() {\n    const container = this.gui.entity.getComponent(\n      \"minecraft:inventory\"\n    ).container;\n    container.setItem(this.change.slot, this.slot.item.itemStack);\n  }\n\n  /**\n   * Opens a form to the player\n   * @param {ActionFormData | ModalFormData | MessageFormData} form form to load\n   * @returns {Promise<ActionFormResponse | ModalFormResponse | MessageFormResponse>}\n   */\n  async FormAction<T extends ActionFormData | ModalFormData | MessageFormData>(\n    form: T\n  ): Promise<FormActionReturn<T>> {\n    this.CloseAction();\n    await sleep(5);\n    // @ts-ignore\n    return await form.show(this.gui.player);\n  }\n}\n", "import {\r\n  Enchantment,\r\n  EnchantmentList,\r\n  ItemStack,\r\n  ItemType,\r\n} from \"@minecraft/server\";\r\n\r\ninterface IPageItemComponents {\r\n  /**\r\n   * Number of the items in the stack. Valid values range between 0 and 64.\r\n   */\r\n  amount?: number;\r\n  /**\r\n   * A data value used to configure alternate states of the item.\r\n   */\r\n  data?: number;\r\n  /**\r\n   * Given name of this stack of items.\r\n   */\r\n  nameTag?: string;\r\n  /**\r\n   * a secondary display string - for an ItemStack.\r\n   */\r\n  loreList?: string[];\r\n  /**\r\n   * a collection of the enchantments on this item\r\n   */\r\n  enchantments?: Enchantment[];\r\n  /**\r\n   * A key that could be on this item, menaing its connect to database\r\n   */\r\n  dbKey?: string;\r\n}\r\n\r\nexport class PageItem {\r\n  /**\r\n   * The item type this item has\r\n   */\r\n  itemType: ItemType;\r\n  /**\r\n   * The components that this item\r\n   * this stores information such as data, enchantmenets etc\r\n   */\r\n  components: IPageItemComponents;\r\n\r\n  /**\r\n   * The itemStack that was set at item creation\r\n   */\r\n  setItemStack: ItemStack | null;\r\n\r\n  constructor(\r\n    itemType: ItemType,\r\n    components: IPageItemComponents = {},\r\n    itemStack?: ItemStack\r\n  ) {\r\n    this.itemType = itemType;\r\n    this.components = components;\r\n    this.setItemStack = itemStack;\r\n  }\r\n  /**\r\n   * gets itemStack that this PageItem is associated with\r\n   */\r\n  get itemStack(): ItemStack {\r\n    if (this.setItemStack) return this.setItemStack;\r\n    const itemStack = new ItemStack(this.itemType);\r\n    if (this.components) {\r\n      itemStack.amount = this.components?.amount ?? 1;\r\n      itemStack.data = this.components?.data ?? 0;\r\n      itemStack.nameTag = this.components?.nameTag;\r\n      itemStack.setLore(this.components?.loreList ?? []);\r\n      const enchantments: EnchantmentList =\r\n        itemStack.getComponent(\"enchantments\").enchantments;\r\n      for (const enchantment of this.components?.enchantments ?? []) {\r\n        enchantments.addEnchantment(enchantment);\r\n      }\r\n      itemStack.getComponent(\"enchantments\").enchantments = enchantments;\r\n    }\r\n    return itemStack;\r\n  }\r\n}\r\n", "import { Entity } from \"@minecraft/server\";\nimport { AIR } from \"../../../index.js\";\nimport { Page } from \"./Page.js\";\n\nexport type FillTypeCallback = (\n  entity: Entity,\n  page: Page,\n  extras: any\n) => void;\n\n/**\n * Fills a entity with desired itmes\n */\nexport function DefaultFill(entity: Entity, page: Page, extras: any) {\n  const container = entity.getComponent(\"minecraft:inventory\").container;\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n}\n", "import { PAGES } from \"../utils.js\";\r\nimport { DefaultFill, FillTypeCallback } from \"./FillTypes\";\r\nimport { ItemGrabbedCallback } from \"./ItemGrabbedCallback.js\";\r\nimport type { PageItem } from \"./PageItem\";\r\n\r\nexport interface ISlot {\r\n  /**\r\n   * The item that should be in this slot\r\n   */\r\n  item: PageItem;\r\n  /**\r\n   * What happens when there is a change in this slot\r\n   */\r\n  action: (ctx: ItemGrabbedCallback) => void;\r\n}\r\n\r\nexport class Page {\r\n  /**\r\n   * The id this page has\r\n   */\r\n  id: string;\r\n  /**\r\n   * How this page fills, these can be custom or kept default\r\n   */\r\n  fillType: FillTypeCallback;\r\n\r\n  /**\r\n   * The slots in this gui\r\n   */\r\n  slots: ISlot[];\r\n\r\n  constructor(id: string, fillType: FillTypeCallback = DefaultFill) {\r\n    if (Object.keys(PAGES).includes(id))\r\n      throw new Error(`Page: ${id}, Already exists!`);\r\n    this.id = id;\r\n    this.fillType = fillType;\r\n    this.slots = [];\r\n    PAGES[id] = this;\r\n  }\r\n\r\n  /**\r\n   * Sets slots in this page\r\n   */\r\n  setSlots(\r\n    slot: Array<number>,\r\n    item: PageItem,\r\n    action: (ctx: ItemGrabbedCallback) => void\r\n  ): Page {\r\n    const data = item ? { item: item, action: action } : null;\r\n    for (const i of slot) {\r\n      this.slots[i] = data;\r\n    }\r\n    return this;\r\n  }\r\n}\r\n", "import { PageItem } from \"../Models/PageItem.js\";\r\nimport { Page } from \"../Models/Page.js\";\r\nimport { MinecraftItemTypes } from \"@minecraft/server\";\r\n\r\n/**\r\n * The Home page of this GUI this is the most important because\r\n * when the GUI is opned it will open up here, any plugin can\r\n * change this but this is the default screen\r\n */\r\nexport let HOME_PAGE = new Page(\"home\")\r\n  .setSlots(\r\n    [\r\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 35, 36, 44, 45, 46, 47, 48,\r\n      50, 51, 52, 53,\r\n    ],\r\n    new PageItem(MinecraftItemTypes.stainedGlassPane, {\r\n      data: 15,\r\n      nameTag: \"\u00A7r\",\r\n    }),\r\n    (ctx) => {\r\n      ctx.SetAction();\r\n    }\r\n  )\r\n  .setSlots(\r\n    [22],\r\n    new PageItem(MinecraftItemTypes.enderChest, {\r\n      nameTag: \"\u00A7l\u00A7bInventory Viewer\",\r\n    }),\r\n    (ctx) => {\r\n      ctx.PageAction(\"moderation:see\");\r\n    }\r\n  )\r\n  .setSlots(\r\n    [54],\r\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\r\n    (ctx) => {\r\n      ctx.CloseAction();\r\n    }\r\n  );\r\n", "export const text = {\n  \"api.name\": () => \"Smelly API\",\n  \"api.error.unknown\": () => \"An unknown error has occured.\",\n  \"api.database.error.table_name\": (a: string, b: number) =>\n    `The display name ${a} is too long for an objective, it can be at most ${b} characters long`,\n  \"api.utilities.formatter.error.ms\": (a: string) =>\n    `${a} is not a string or a number`,\n  \"api.Providers.form.invaildtype\": (a: string, b: string) =>\n    `Type ${a} is not a vaild type to add a ${b}`,\n  \"api.Providers.form.invaildFormtype\": (a: string, b: string) => {\n    `The type ${a} is not a valid type, Vaild types: ${JSON.stringify(b)}`;\n  },\n  \"api.ChestGUI.error.pagenotfound\": (a: string) => `Page ${a} not found!`,\n  \"modules.protections.cps.clickingToFast\": () =>\n    `You are clicking to fast! Please click slower!`,\n  \"modules.managers.mute.isMuted\": () =>\n    `You are muted and cannot send messages please try again later`,\n  \"modules.commands.ban.reply\": (\n    playerName: string,\n    duration: string,\n    reason: string = \"\"\n  ) =>\n    `\u00A7cBanned \u00A7f\"\u00A7a${playerName}\u00A7f\" \u00A7cfor ${duration} Because: \"${\n      reason ?? \"No reason Provided\"\n    }\" \u00A7aSuccessfully`,\n  \"lockdown.kick.message\": () => [\n    `\u00A7cYou have been kicked!`,\n    `\u00A7aReason: \u00A7fServer is currently under LockDown`,\n    `\u00A7fServer will be up soon, Try to join later`,\n  ],\n  \"commands.ban.list.player\": (name: string, reason: string, expire: string) =>\n    `- \"${name}\" Because: ${reason}, Expiry ${expire}`,\n  \"commands.freeze.list.player\": (name: string, reason: string) =>\n    `- \"${name}\" Because: ${reason}`,\n  \"commands.mutes.list.player\": (\n    name: string,\n    reason: string,\n    expire: string\n  ) => `- \"${name}\" Because: ${reason}, Expiry: ${expire}`,\n  \"commands.lockdown.confirm\": \"Are you sure you want to lockdown the server, this will kick all active players and all players who try to join who are not admin\"\n};\n", "import { Location, Player } from \"@minecraft/server\";\r\nimport {\r\n  LiteralArgumentType,\r\n  IArgumentType,\r\n  LocationArgumentType,\r\n  StringArgumentType,\r\n  IntegerArgumentType,\r\n  ArrayArgumentType,\r\n  BooleanArgumentType,\r\n} from \"./ArgumentTypes.js\";\r\nimport { CommandCallback } from \"./Callback.js\";\r\nimport { COMMANDS } from \"./index.js\";\r\nimport type { AppendArgument, ICommandData, ArgReturn } from \"./types\";\r\nexport { ArgumentTypes } from \"./ArgumentTypes\";\r\n\r\nexport class Command<\r\n  Callback extends Function = (ctx: CommandCallback) => void\r\n> {\r\n  /**\r\n   * The Arguments on this command\r\n   */\r\n  children: Command<any>[];\r\n\r\n  /**\r\n   * Function to run when this command is called\r\n   */\r\n  callback: Callback;\r\n\r\n  constructor(\r\n    public data: ICommandData,\r\n    public type?: IArgumentType,\r\n    public depth: number = 0,\r\n    public parent?: Command<any>\r\n  ) {\r\n    if (!data.requires) data.requires = (player: Player) => true;\r\n    this.data = data;\r\n    this.type = type ?? new LiteralArgumentType(this.data.name);\r\n    this.children = [];\r\n    this.depth = depth;\r\n    this.parent = parent;\r\n    this.callback = null;\r\n\r\n    COMMANDS.push(this);\r\n  }\r\n\r\n  /**\r\n   * Adds a ranch to this command of your own type\r\n   * @param type a special type to be added\r\n   * @returns new branch to this command\r\n   */\r\n  argument<T extends IArgumentType>(type: T): ArgReturn<Callback, T[\"type\"]> {\r\n    const cmd = new Command<AppendArgument<Callback, T[\"type\"]>>(\r\n      this.data,\r\n      type,\r\n      this.depth + 1,\r\n      this\r\n    );\r\n    this.children.push(cmd);\r\n    return cmd;\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  string(name: string): ArgReturn<Callback, string> {\r\n    return this.argument(new StringArgumentType(name));\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  int(name: string): ArgReturn<Callback, number> {\r\n    return this.argument(new IntegerArgumentType(name));\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  array<T extends ReadonlyArray<string>>(\r\n    name: string,\r\n    types: T\r\n  ): ArgReturn<Callback, T[number]> {\r\n    return this.argument(new ArrayArgumentType(name, types));\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  boolean(name: string): ArgReturn<Callback, boolean> {\r\n    return this.argument(new BooleanArgumentType(name));\r\n  }\r\n\r\n  /**\r\n   * Adds a argument to this command to add 3 parameters with location types and to return a Location\r\n   * @param name name this argument  should have\r\n   * @returns new branch to this command\r\n   */\r\n  location(name: string): ArgReturn<Callback, Location> {\r\n    const cmd = this.argument(new LocationArgumentType(name));\r\n    if (!name.endsWith(\"*\")) {\r\n      const newArg = cmd.location(name + \"_y*\").location(name + \"_z*\");\r\n      //@ts-ignore\r\n      return newArg;\r\n    }\r\n    //@ts-ignore\r\n    return cmd;\r\n  }\r\n\r\n  /**\r\n   * Adds a subCommand to this argument\r\n   * @param name name this literal should have\r\n   * @returns new branch to this command\r\n   */\r\n  literal(data: ICommandData): Command<Callback> {\r\n    const cmd = new Command<Callback>(\r\n      data,\r\n      new LiteralArgumentType(data.name),\r\n      this.depth + 1,\r\n      this\r\n    );\r\n    this.children.push(cmd);\r\n    return cmd;\r\n  }\r\n\r\n  /**\r\n   * Registers this command and its apendending arguments\r\n   * @param callback what to run when this command gets called\r\n   */\r\n  executes(callback: Callback): Command<Callback> {\r\n    this.callback = callback;\r\n    return this;\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport type { IBanData } from \"../../types.js\";\nimport { durationToMs } from \"../../utils.js\";\n\nexport class Ban {\n  /**\n   * Ban a player for a set length\n   */\n  constructor(\n    player: string | Player,\n    duration?: string,\n    reason: string = \"No Reason\",\n    by: string = \"Smelly Anti Cheat\"\n  ) {\n    const id = player instanceof Player ? player.id : TABLES.ids.get(player);\n    if (!id) throw new Error(`\"${player}\" does not have a saved id!`);\n    const data: IBanData = {\n      key: id,\n      playerName: player instanceof Player ? player.name : player,\n      date: Date.now(),\n      duration: duration ? durationToMs(duration) : null,\n      expire: duration ? durationToMs(duration) + Date.now() : null,\n      reason: reason,\n      by: by,\n    };\n    TABLES.bans.set(id, data);\n  }\n}\n", "import { text } from \"../../lang/text.js\";\nimport type { CommandCallback } from \"../../lib/Command/Callback.js\";\nimport { Command, ArgumentTypes } from \"../../lib/Command/Command.js\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { confirmAction, getRole, msToTime } from \"../../utils.js\";\nimport { Ban } from \"../models/Ban.js\";\n\nfunction ban(\n  ctx: CommandCallback,\n  player: string,\n  duration: string,\n  reason: string,\n  by: string\n) {\n  if (TABLES.bans.get(TABLES.ids.get(player)))\n    return ctx.reply(`\u00A7c${player} is already banned`);\n  ctx.reply(`\u00A7aClose chat to confirm`);\n  confirmAction(\n    ctx.sender,\n    `Are you sure you want to ban ${player}, for ${duration ?? \"forever\"}`,\n    () => {\n      new Ban(player, duration, reason, ctx.sender.name);\n      ctx.reply(text[\"modules.commands.ban.reply\"](player, duration, reason));\n    }\n  );\n}\n\nconst root = new Command({\n  name: \"ban\",\n  description: \"Manage bans\",\n  requires: (player) => getRole(player) == \"admin\",\n});\n\nroot\n  .literal({\n    name: \"add\",\n    description: \"Bans a player\",\n  })\n  .argument(new ArgumentTypes.playerName())\n  .executes((ctx, player) => {\n    ban(ctx, player, null, null, ctx.sender.name);\n  })\n  .argument(new ArgumentTypes.duration(\"duration\"))\n  .executes((ctx, player, duration) => {\n    ban(ctx, player, duration, null, ctx.sender.name);\n  })\n  .string(\"reason\")\n  .executes((ctx, player, duration, reason) => {\n    ban(ctx, player, duration, reason, ctx.sender.name);\n  });\n\nroot\n  .literal({\n    name: \"remove\",\n    description: \"unbans a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const banData = TABLES.bans\n      .values()\n      .find((ban) => ban.playerName == playerName);\n    if (!banData) return ctx.reply(`${playerName} is not banned`);\n    if (TABLES.bans.delete(banData.key)) {\n      ctx.reply(`\u00A7a${playerName}\u00A7r has been Unbanned!`);\n    } else {\n      ctx.reply(`\u00A7cFailed to unban ${playerName}`);\n    }\n  });\n\nroot\n  .literal({\n    name: \"list\",\n    description: \"Lists all bans\",\n  })\n  .executes((ctx) => {\n    const bans = TABLES.bans.values();\n    if (bans.length == 0) return ctx.sender.tell(`\u00A7cNo one is banned!`);\n    ctx.sender.tell(`\u00A72--- Showing Bans (${bans.length}) ---`);\n    for (const ban of bans) {\n      ctx.sender.tell(\n        text[\"commands.ban.list.player\"](\n          ban.playerName,\n          ban.reason,\n          ban.expire ? msToTime(ban.duration) : \"Forever\"\n        )\n      );\n    }\n  });\n", "import { Command } from \"../../lib/Command/Command\";\nimport { TABLES } from \"../../lib/Database/tables\";\nimport { getRole } from \"../../utils\";\n\nconst dbcm = new Command({\n  name: \"database\",\n  description: \"Interacts with SA Database\",\n  aliases: [\"db\"],\n  requires: (player) => getRole(player) == \"admin\",\n});\n\ndbcm\n  .literal({\n    name: \"get\",\n  })\n  .string(\"table\")\n  .string(\"key\")\n  .executes((ctx, table, key) => {\n    try {\n      const data = TABLES[table as keyof typeof TABLES].get(key);\n      if (data) {\n        ctx.reply(data);\n      } else {\n        ctx.reply(`No data could be found for key ${key}`);\n      }\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n\ndbcm\n  .literal({\n    name: \"set\",\n  })\n  .string(\"table\")\n  .string(\"key\")\n  .string(\"value\")\n  .executes((ctx, table, key, value) => {\n    try {\n      TABLES[table as keyof typeof TABLES].set(key, value);\n      ctx.reply(`Set Key: \"${key}\", to value: \"${value}\" on table: \"${table}\"`);\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n\ndbcm\n  .literal({\n    name: \"clear\",\n  })\n  .string(\"table\")\n  .executes((ctx, table) => {\n    try {\n      TABLES[table as keyof typeof TABLES].clear();\n      ctx.reply(`Cleared Table ${table}`);\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n", "import { ArgumentTypes, Command } from \"../../lib/Command/Command.js\";\nimport { getRole } from \"../../utils.js\";\n\nnew Command({\n  name: \"ecwipe\",\n  description: \"Clears a players ender chest\",\n  requires: (player) => getRole(player) == \"admin\",\n})\n  .argument(new ArgumentTypes.player(\"player\"))\n  .executes((ctx, player) => {\n    for (let i = 0; i < 27; i++) {\n      player.runCommand(`replaceitem entity @s slot.enderchest ${i} air`);\n    }\n    ctx.reply(`Cleared ${player.name} Ender chest!`);\n  });\n", "import { Player } from \"@minecraft/server\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport type { IFreezeData } from \"../../types.js\";\n\nexport class Freeze {\n  /**\n   * Freeze a player\n   */\n  constructor(player: Player, reason: string = \"No Reason\") {\n    const data: IFreezeData = {\n      player: player.name,\n      key: player.id,\n      reason: reason,\n      location: {\n        x: player.location.x,\n        y: player.location.y,\n        z: player.location.z,\n        dimension: player.dimension.id,\n      },\n    };\n    TABLES.freezes.set(player.id, data);\n  }\n}\n", "import { ArgumentTypes, Command } from \"../../lib/Command/Command.js\";\nimport { Freeze } from \"../models/Freeze.js\";\nimport { getRole } from \"../../utils.js\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { text } from \"../../lang/text.js\";\n\nconst root = new Command({\n  name: \"freeze\",\n  description: \"Manage Freezes\",\n  requires: (player) => getRole(player) == \"admin\",\n});\n\nroot\n  .literal({\n    name: \"add\",\n    description: \"Freezes a player\",\n  })\n  .argument(new ArgumentTypes.player(\"player\"))\n  .string(\"reason\")\n  .executes((ctx, player, reason) => {\n    new Freeze(player, reason);\n    ctx.reply(\n      `\u00A7cFroze \u00A7f\"\u00A7a${player.name}\u00A7f\" Because: \"${reason}\" \u00A7aSuccessfully`\n    );\n    ctx.sender.tell(\n      `\u00A7cYou have been frozen by \u00A7f\"\u00A7a${ctx.sender.name}\u00A7f\" Because: \"${reason}\"`\n    );\n  });\n\nroot\n  .literal({\n    name: \"remove\",\n    description: \"unfreezes a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const freeze = TABLES.freezes\n      .values()\n      .find((freze) => freze.player == playerName);\n    if (!freeze) return ctx.reply(`${playerName} is not frozen`);\n\n    TABLES.freezes.delete(freeze.key);\n    ctx.reply(`\u00A7a${playerName}\u00A7r has been UnFrozen!`);\n  });\n\nroot\n  .literal({\n    name: \"list\",\n    description: \"Lists all freezes\",\n  })\n  .executes((ctx) => {\n    const freezes = TABLES.freezes.values();\n    if (freezes.length == 0) return ctx.sender.tell(`\u00A7cNo one is frozen!`);\n    ctx.sender.tell(`\u00A72--- Showing Freezes (${freezes.length}) ---`);\n    for (const freeze of freezes) {\n      ctx.sender.tell(\n        text[\"commands.freeze.list.player\"](freeze.player, freeze.reason)\n      );\n    }\n  });\n", "import { Player } from \"@minecraft/server\";\nimport { PREFIX } from \"../../config/commands.js\";\nimport {\n  IArgumentReturnData,\n  IArgumentType,\n} from \"../../lib/Command/ArgumentTypes.js\";\nimport { Command } from \"../../lib/Command/Command.js\";\nimport { COMMANDS } from \"../../lib/Command/index.js\";\n\nclass CommandNameArgumentType implements IArgumentType {\n  type: string;\n  typeName = \"CommandName\";\n  matches(value: string): IArgumentReturnData<string> {\n    return {\n      success: Boolean(\n        COMMANDS.find((c) => c.depth == 0 && c.data.name == value)\n      ),\n      value: value,\n    };\n  }\n  fail(value: string): string {\n    return `\"${value}\" is not a vaild command`;\n  }\n  constructor(public name: string) {}\n}\n\n/**\n * Sends text in chat relation to the args in the command to player\n */\nfunction sendCommandType(\n  baseCommand: Command,\n  args: Command[],\n  player: Player\n) {\n  player.tell(\n    `${PREFIX}${baseCommand.data.name} ${args\n      .map((a) =>\n        a.type.typeName == \"literal\"\n          ? a.data.name\n          : `<${a.type.name}: ${a.type.typeName}>`\n      )\n      .join(\" \")}`\n  );\n}\n\nfunction sendArguments(bc: Command, c: Command, args: Command[], p: Player) {\n  if (!c.data?.requires(p)) return;\n  if (c.callback) {\n    // command has a callback\n    sendCommandType(bc, c.depth == 0 ? args : args.concat(c), p);\n  }\n  if (c.children.length > 0) {\n    // cmd has arguments\n    for (const child of c.children) {\n      sendArguments(bc, child, c.depth == 0 ? args : args.concat(c), p);\n    }\n  }\n}\n\nfunction sendPageHeader(player: Player, p: number, maxPages: number) {\n  player.tell(\n    `\u00A72--- Showing help page ${p} of ${maxPages} (${PREFIX}help <page: int>) ---`\n  );\n}\n\nfunction getMaxPages(player: Player): number {\n  const cmds = COMMANDS.filter((c) => c.depth == 0 && c.data?.requires(player));\n  if (cmds.length == 0) return 0;\n  return Math.ceil(cmds.length / 5);\n}\n\nconst root = new Command({\n  name: \"help\",\n  description: \"Provides help/list of commands.\",\n  aliases: [\"?\", \"h\"],\n}).executes((ctx) => {\n  // show page 1\n  const maxPages = getMaxPages(ctx.sender);\n  const cmds = COMMANDS.filter(\n    (c) => c.depth == 0 && c.data?.requires(ctx.sender)\n  ).slice(1 * 5 - 5, 1 * 5);\n  sendPageHeader(ctx.sender, 1, maxPages);\n  for (const cmd of cmds) {\n    sendArguments(cmd, cmd, [], ctx.sender);\n  }\n});\n\nroot.int(\"page\").executes((ctx, p) => {\n  // shows page\n  const maxPages = getMaxPages(ctx.sender);\n  if (p > maxPages) p = maxPages;\n  const cmds = COMMANDS.filter(\n    (c) => c.depth == 0 && c.data?.requires(ctx.sender)\n  ).slice(p * 5 - 5, p * 5);\n  sendPageHeader(ctx.sender, p, maxPages);\n  for (const cmd of cmds) {\n    sendArguments(cmd, cmd, [], ctx.sender);\n  }\n});\n\nroot\n  .argument(new CommandNameArgumentType(\"command\"))\n  .executes((ctx, command) => {\n    // shows command\n    const cmd = COMMANDS.filter(\n      (c) => c.depth == 0 && c.data.name == command\n    )[0];\n    ctx.sender.tell(\n      `\u00A7e${cmd.data.name}: ${\n        cmd.data.aliases ? `aliases (${cmd.data.aliases.join(\", \")})` : \"\"\n      }`\n    );\n    ctx.sender.tell(`\u00A7e${cmd.data.description}`);\n    ctx.sender.tell(`Usage:`);\n    sendArguments(cmd, cmd, [], ctx.sender);\n  });\n", "import { world } from \"@minecraft/server\";\r\nimport { text } from \"../../lang/text.js\";\r\nimport { Command } from \"../../lib/Command/Command.js\";\r\nimport {\r\n  confirmAction,\r\n  getRole,\r\n  isLockedDown,\r\n  kick,\r\n  setLockDown,\r\n} from \"../../utils.js\";\r\n\r\nnew Command({\r\n  name: \"lockdown\",\r\n  description: \"Toggles the servers lockdown, meaning noone can join\",\r\n  requires: (player) => getRole(player) == \"admin\",\r\n}).executes((ctx) => {\r\n  if (isLockedDown()) {\r\n    setLockDown(false);\r\n    ctx.sender.tell(`Unlocked the server!`);\r\n  } else {\r\n    ctx.reply(`\u00A7aClose chat to confirm lockdown`);\r\n    confirmAction(ctx.sender, text[\"commands.lockdown.confirm\"], () => {\r\n      setLockDown(true);\r\n      for (const player of world.getPlayers()) {\r\n        if (getRole(player) == \"admin\") continue;\r\n        kick(player, text[\"lockdown.kick.message\"]());\r\n      }\r\n      world.say(`\u00A7l\u00A7cServer is now LOCKED!`);\r\n    });\r\n  }\r\n});\r\n", "import { Player } from \"@minecraft/server\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport type { IMuteData } from \"../../types.js\";\nimport { durationToMs } from \"../../utils.js\";\n\nexport class Mute {\n  length: number;\n  /**\n   * Gets the mute data for this player\n   */\n  static getMuteData(player: Player): IMuteData {\n    return TABLES.mutes.get(player.name);\n  }\n  /**\n   * Mutes a player for a length\n   */\n  constructor(\n    player: Player,\n    duration?: string,\n    reason: string = \"No Reason\",\n    by: string = \"Smelly Anti Cheat\"\n  ) {\n    const msLength = duration ? durationToMs(duration) : null;\n    const data: IMuteData = {\n      player: player.name,\n      date: Date.now(),\n      duration: msLength,\n      expire: msLength ? msLength + Date.now() : null,\n      reason: reason,\n      by: by,\n    };\n    TABLES.mutes.set(player.name, data);\n  }\n}\n", "import { ArgumentTypes, Command } from \"../../lib/Command/Command.js\";\nimport { Mute } from \"../models/Mute.js\";\nimport { getRole, msToTime } from \"../../utils.js\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { text } from \"../../lang/text.js\";\n\nconst root = new Command({\n  name: \"mute\",\n  description: \"Manage Mutes\",\n  requires: (player) => [\"admin\", \"moderator\"].includes(getRole(player)),\n});\n\nroot\n  .literal({\n    name: \"add\",\n    description: \"Mutes a player\",\n  })\n  .argument(new ArgumentTypes.player(\"player\"))\n  .argument(new ArgumentTypes.duration(\"duration\"))\n  .string(\"reason\")\n  .executes((ctx, player, duration, reason) => {\n    new Mute(player, duration, reason, ctx.sender.name);\n    ctx.reply(\n      `\u00A7cMuted \u00A7f\"\u00A7a${player.name}\u00A7f\" \u00A7cfor ${duration} Because: \"${reason}\" \u00A7aSuccessfully`\n    );\n    player.tell(\n      `\u00A7cYou have been muted by \u00A7f\"${ctx.sender.name}\" \u00A7cfor ${duration} Because: \"${reason}\"`\n    );\n  });\n\nroot\n  .literal({\n    name: \"remove\",\n    description: \"unmutes a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const mute = TABLES.mutes\n      .values()\n      .find((mute) => mute.player == playerName);\n    if (!mute) return ctx.reply(`${playerName} is not muted!`);\n\n    TABLES.mutes.delete(mute.player);\n    try {\n      ctx.sender.runCommand(`ability \"${playerName}\" mute false`);\n    } catch (error) {}\n    ctx.reply(`\u00A7a${playerName}\u00A7r has been UnMuted!`);\n  });\n\nroot\n  .literal({\n    name: \"list\",\n    description: \"Lists all feeezes\",\n  })\n  .executes((ctx) => {\n    const mutes = TABLES.mutes.values();\n    if (mutes.length == 0) return ctx.sender.tell(`\u00A7cNo one is muted!`);\n    ctx.sender.tell(`\u00A72--- Showing Mutes (${mutes.length}) ---`);\n    for (const mute of mutes) {\n      ctx.sender.tell(\n        text[\"commands.mutes.list.player\"](\n          mute.player,\n          mute.reason,\n          mute.expire ? msToTime(mute.expire) : \"Forever\"\n        )\n      );\n    }\n  });\n", "import { Dimension, Entity, Location } from \"@minecraft/server\";\r\nimport { clearNpcLocations, NPC_LOCATIONS } from \"../../index.js\";\r\nimport { TABLES } from \"../../lib/Database/tables.js\";\r\nimport type { INpcLocation } from \"../../types.js\";\r\n\r\nexport class Npc {\r\n  /**\r\n   * Checks if a entity is a vaild npc\r\n   * @param entity npc\r\n   */\r\n  static isVaild(entity: Entity): boolean {\r\n    if (entity.typeId != \"minecraft:npc\") return false;\r\n    if (NPC_LOCATIONS.find((l) => l.equals(entity.location))) return true;\r\n    return TABLES.npcs.keys().find((key) => entity.id == key) ? true : false;\r\n  }\r\n  /**\r\n   * Adds a new verifed npc to the world\r\n   */\r\n  constructor(location: Location, dimension: Dimension) {\r\n    NPC_LOCATIONS.push(location);\r\n    const entity = dimension.spawnEntity(\"minecraft:npc\", location);\r\n\r\n    const data: INpcLocation = {\r\n      dimension: entity.dimension.id,\r\n      x: entity.location.x,\r\n      y: entity.location.y,\r\n      z: entity.location.z,\r\n    };\r\n    TABLES.npcs.set(entity.id, data);\r\n    clearNpcLocations();\r\n  }\r\n}\r\n", "import { Command } from \"../../lib/Command/Command.js\";\nimport { getRole } from \"../../utils.js\";\nimport { Npc } from \"../models/Npc.js\";\n\nnew Command({\n  name: \"npc\",\n  description: \"Spawns a npc at your coordinates\",\n  requires: (player) => getRole(player) == \"admin\",\n}).executes((ctx) => {\n  new Npc(ctx.sender.location, ctx.sender.dimension);\n  ctx.reply(`Spawned a verifed npc at your current location`);\n});\n", "import { Command } from \"../../lib/Command/Command.js\";\nimport { world } from \"@minecraft/server\";\n\nnew Command({\n  name: \"ping\",\n  description: \"Returns the current TPS of the servers ping\",\n}).executes((ctx) => {\n  let pingTick = world.events.tick.subscribe(({ deltaTime }) => {\n    ctx.reply(`Pong! Current TPS: ${1 / deltaTime}`);\n    world.events.tick.unsubscribe(pingTick);\n  });\n});\n", "import { BlockLocation } from \"@minecraft/server\";\nimport { Command } from \"../../lib/Command/Command.js\";\nimport { Region } from \"../models/Region.js\";\nimport { getRole } from \"../../utils.js\";\n\nconst command = new Command({\n  name: \"region\",\n  description: \"Create a Region\",\n  requires: (player) => getRole(player) == \"admin\",\n});\n\ncommand\n  .literal({\n    name: \"add\",\n    description: \"Adds a new protection region\",\n  })\n  .int(\"from_x\")\n  .int(\"from_z\")\n  .int(\"to_x\")\n  .int(\"to_z\")\n  .executes((ctx, from_x, from_z, to_x, to_z) => {\n    new Region(\n      { x: from_x, z: from_z },\n      { x: to_x, z: to_z },\n      ctx.sender.dimension.id\n    );\n    ctx.reply(\n      `Created Region From ${from_x} -64 ${from_z} ${to_x} 320 ${to_z}`\n    );\n  });\n\ncommand\n  .literal({\n    name: \"remove\",\n    description: \"Removes a region at the players current postion\",\n  })\n  .executes((ctx) => {\n    const loc = new BlockLocation(\n      ctx.sender.location.x,\n      ctx.sender.location.y,\n      ctx.sender.location.z\n    );\n    const r = Region.removeRegionAtBlockLocation(loc, ctx.sender.dimension.id);\n    if (r) {\n      ctx.reply(`Removed Region at ${loc.x} ${loc.y} ${loc.z}`);\n    } else {\n      ctx.reply(`Failed to find/remove region at ${loc.x} ${loc.y} ${loc.z}`);\n    }\n  });\n\ncommand\n  .literal({\n    name: \"removeAll\",\n    description: \"Removes all regions\",\n  })\n  .executes((ctx) => {\n    Region.getAllRegions().forEach((r) => r.delete());\n    ctx.reply(`Removed All regions`);\n  });\n\ncommand\n  .literal({\n    name: \"list\",\n    description: \"Lists all regions and positions\",\n  })\n  .executes((ctx) => {\n    const regions = Region.getAllRegions();\n    for (const region of regions) {\n      ctx.reply(\n        `Region from ${region.from.x}, ${region.from.z} to ${region.to.x}, ${region.to.z} in dimension ${region.dimensionId}`\n      );\n    }\n    if (regions.length == 0) return ctx.reply(`No regions have been made yet`);\n  });\n\nconst permission = command.literal({\n  name: \"permission\",\n  description: \"Handels permissions for regions\",\n});\n\npermission\n  .literal({\n    name: \"set\",\n    description:\n      \"Sets a certin permission on the region the player is currently in to a value\",\n  })\n  .array(\"key\", [\"doorsAndSwitches\", \"openContainers\", \"pvp\"] as const)\n  .boolean(\"value\")\n  .executes((ctx, key, value) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    region.changePermission(key, value);\n    ctx.reply(`Changed permision ${key} to ${value}`);\n  });\n\npermission\n  .literal({\n    name: \"list\",\n    description: \"Lists the permissions for the current region\",\n  })\n  .executes((ctx) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    ctx.reply(\n      `Current region permissions ${JSON.stringify(region.permissions)}`\n    );\n  });\n\nconst entityCommands = permission.literal({\n  name: \"entities\",\n  description: \"Holds the subCommands for adding or removing allowedEntitys\",\n});\n\nentityCommands\n  .literal({\n    name: \"add\",\n    description: \"Adds a entity to the allowed entitys list\",\n  })\n  .string(\"entity\")\n  .executes((ctx, entity) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    const currentAllowedEntitys = region.permissions.allowedEntitys;\n    currentAllowedEntitys.push(entity);\n    region.changePermission(\"allowedEntitys\", currentAllowedEntitys);\n    ctx.reply(\n      `Added entity ${entity} to the allowed entitys of the region your currently standing in`\n    );\n  });\n\nentityCommands\n  .literal({\n    name: \"remove\",\n    description: \"Removes a entity from the allowed entitys in the region\",\n  })\n  .string(\"entity\")\n  // @ts-ignore\n  .executes((ctx, entity) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    let currentAllowedEntitys = region.permissions.allowedEntitys;\n    if (!currentAllowedEntitys.includes(entity))\n      return ctx.reply(\n        `The entity ${entity} is not allowed to enter the region`\n      );\n    currentAllowedEntitys = currentAllowedEntitys.filter((v) => v != entity);\n    region.changePermission(\"allowedEntitys\", currentAllowedEntitys);\n    ctx.reply(\n      `Removed entity ${entity} to the allowed entitys of the region your currently standing in`\n    );\n  });\n", "import { ItemStack, Player, TickEvent } from \"@minecraft/server\";\r\nimport type { BlockInventory } from \"./modules/models/BlockInventory\";\r\n\r\n/**\r\n * The roles that are in this server\r\n */\r\nexport enum ROLES {\r\n  member,\r\n  admin,\r\n  moderator,\r\n  builder,\r\n}\r\n\r\nexport interface IMsOptions {\r\n  compactDuration?: string;\r\n  fullDuration?: string;\r\n  avoidDuration?: Array<string>;\r\n}\r\n\r\nexport interface IplayerTickRegister {\r\n  /**\r\n   * callback to send\r\n   */\r\n  callback: (player: Player, event: TickEvent) => void;\r\n  /**\r\n   * delay in ticks\r\n   */\r\n  delay: number;\r\n  /**\r\n   * the last tick it sent a callback\r\n   */\r\n  lastCall: number;\r\n}\r\n\r\nexport interface ISlotChangeReturn {\r\n  /**\r\n   * Slot that changed\r\n   */\r\n  slot: number;\r\n  /**\r\n   * the item that was grabbed / put\r\n   */\r\n  item: ItemStack;\r\n}\r\n\r\nexport interface IEvents {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface IContainerLocation {\r\n  [key: string]: BlockInventory;\r\n}\r\n\r\nexport interface IBanData {\r\n  key: string;\r\n  playerName: string;\r\n  date: number;\r\n  duration: number;\r\n  expire: number | null;\r\n  reason: string;\r\n  by: string;\r\n}\r\n\r\nexport interface IFreezeData {\r\n  player: string;\r\n  key: string;\r\n  reason: string;\r\n  location: {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    dimension: string;\r\n  };\r\n}\r\n\r\nexport interface IMuteData {\r\n  player: string;\r\n  date: number;\r\n  duration: number | null;\r\n  expire: number | null;\r\n  reason: string;\r\n  by: string;\r\n}\r\n\r\nexport interface INpcLocation {\r\n  dimension: string;\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n}\r\n\r\nexport interface IRegionDB {\r\n  dimensionId: string;\r\n  from: IRegionCords;\r\n  to: IRegionCords;\r\n  key: string;\r\n  permissions: IRegionPermissions;\r\n}\r\n\r\nexport interface IRegionCords {\r\n  x: number;\r\n  z: number;\r\n}\r\n\r\nexport interface IRegionPermissions {\r\n  /**\r\n   * if the player can use chests, defualt: true\r\n   */\r\n  doorsAndSwitches: Boolean;\r\n  /**\r\n   * if the player can use doors, default: true\r\n   */\r\n  openContainers: Boolean;\r\n  /**\r\n   * if players can fight, default: false\r\n   */\r\n  pvp: Boolean;\r\n  /**\r\n   * the entitys allowed in this region\r\n   */\r\n  allowedEntitys: Array<string>;\r\n}\r\n\r\nexport interface IChangePlayerRoleData {\r\n  /**\r\n   * The name of the player\r\n   */\r\n  playerName: string;\r\n  /**\r\n   * The role that the player should be set to\r\n   */\r\n  role: keyof typeof ROLES;\r\n}\r\n\r\nexport type durtationSegmentType = \"y\" | \"w\" | \"d\" | \"h\" | \"m\" | \"s\" | \"ms\";\r\nexport type durationSegment = `${number}${durtationSegmentType}`;\r\n", "import { ROLES } from \"../../types\";\nimport { ArgumentTypes, Command } from \"../../lib/Command/Command\";\nimport { getRole, isServerOwner, setRole } from \"../../utils.js\";\n\n// Helper\nconst StringIsNumber = (value: any) => isNaN(Number(value)) === false;\n\n// Turn enum into array\nfunction ToArray(enumme: any) {\n  return (\n    Object.keys(enumme)\n      // @ts-ignore\n      .filter(StringIsNumber)\n      .map((key) => enumme[key])\n  );\n}\n\nconst root = new Command({\n  name: \"role\",\n  description: \"Changes the role for a player\",\n  requires: (player) => getRole(player) == \"admin\" || isServerOwner(player),\n});\n\nroot\n  .literal({\n    name: \"set\",\n    description: \"Sets the role for a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .argument(new ArgumentTypes.array(\"role\", ToArray(ROLES) as string[]))\n  .executes((ctx, playerName, role) => {\n    setRole(playerName, role as keyof typeof ROLES);\n    ctx.reply(`Changed role of ${playerName} to ${role}`);\n  });\n\nroot\n  .literal({\n    name: \"get\",\n    description: \"Gets the role of a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    ctx.reply(`${playerName} has role: ${getRole(playerName)}`);\n  });\n", "import { Player } from \"@minecraft/server\";\r\nimport { ActionFormData } from \"@minecraft/server-ui\";\r\nimport { TIMEOUT_THRESHOLD } from \"../../../config/form\";\r\nimport type { ButtonCallback, IActionFormButton } from \"../types\";\r\n\r\nexport class ActionForm {\r\n  /**\r\n   *  the title that this form should have\r\n   */\r\n  title?: string;\r\n  /**\r\n   * extra text that should be displayed in the form\r\n   */\r\n  body?: string;\r\n  /**\r\n   * The buttons this form has\r\n   */\r\n  private buttons: IActionFormButton[];\r\n\r\n  /**\r\n   * The default minecraft form this form is based on\r\n   */\r\n  private form: ActionFormData;\r\n\r\n  /**\r\n   * The amount of times it takes to show this form in ms\r\n   * if this value goes above 200 it will time out\r\n   */\r\n  private triedToShow: number;\r\n\r\n  /**\r\n   * Creates a new form to be shown to a player\r\n   * @param title the title that this form should have\r\n   * @param body extra text that should be displayed in the form\r\n   */\r\n  constructor(title?: string, body?: string) {\r\n    this.title = title;\r\n    this.body = body;\r\n    this.form = new ActionFormData();\r\n\r\n    if (title) this.form.title(title);\r\n    if (body) this.form.body(body);\r\n\r\n    this.buttons = [];\r\n\r\n    this.triedToShow = 0;\r\n  }\r\n\r\n  /**\r\n   * Adds a button to this form\r\n   * @param text text to show on this button\r\n   * @param iconPath the path this button shows\r\n   * @param callback what happens when this button is clicked\r\n   * @example ```\r\n   * addButton(\"settings\", \"textures/items/sum\")\r\n   * ```\r\n   */\r\n  addButton(\r\n    text: string,\r\n    iconPath: string = null,\r\n    callback: ButtonCallback\r\n  ): ActionForm {\r\n    this.buttons.push({\r\n      text: text,\r\n      iconPath: iconPath,\r\n      callback: callback,\r\n    });\r\n    this.form.button(text, iconPath);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows this form to the player\r\n   * @param player player to show to\r\n   */\r\n  show(player: Player): void {\r\n    this.form.show(player).then((response) => {\r\n      if (response.canceled) {\r\n        if (response.cancelationReason == \"userBusy\") {\r\n          // check time and reshow form\r\n          if (this.triedToShow > TIMEOUT_THRESHOLD)\r\n            return player.tell(\r\n              `\u00A7cForm Timeout: tried to show form, but you were busy (close chat after running command)`\r\n            );\r\n          this.triedToShow++;\r\n          this.show(player);\r\n        }\r\n        return;\r\n      }\r\n      this.buttons[response.selection].callback?.();\r\n    });\r\n  }\r\n}\r\n", "import { ItemTypes, MinecraftBlockTypes, Player } from \"@minecraft/server\";\r\nimport { APPEAL_LINK } from \"../../config/app\";\r\nimport { ENCHANTMENTS } from \"../../config/enchantments\";\r\nimport { BANNED_BLOCKS, BANNED_ITEMS } from \"../../config/moderation\";\r\nimport { TABLES } from \"../../lib/Database/tables\";\r\nimport { ModalForm } from \"../../lib/Form/Models/ModelForm\";\r\n\r\nexport function showPage1(player: Player) {\r\n  new ModalForm(\"Manage Banned Items\")\r\n    .addDropdown(\"Add/Remove Item\", [\"add\", \"remove\"] as const, 0)\r\n    .addTextField(\"Item Id\", \"minecraft:string\")\r\n    .show(player, (ctx, method, id) => {\r\n      if (!ItemTypes.get(id)?.id)\r\n        return ctx.error(\r\n          `\u00A7c\"${id}\" is not a vaild item id, note: this item must be either a item in a behavior pack or a default minecraft item`\r\n        );\r\n      if (method == \"add\") {\r\n        // add item to list\r\n        let items: Array<String> =\r\n          TABLES.config.get(\"banned_items\") ?? BANNED_ITEMS;\r\n        if (items.includes(id))\r\n          return ctx.error(`\u00A7cItem \"${id}\" is already banned`);\r\n        items.push(id);\r\n        TABLES.config.set(\"banned_items\", items);\r\n        player.tell(`Banned the item \"${id}\"`);\r\n      } else {\r\n        // remove item\r\n        let items: string[] = TABLES.config.get(\"banned_items\") ?? BANNED_ITEMS;\r\n        if (!items.includes(id))\r\n          return ctx.error(`\u00A7cItem: \"${id}\" is not banned`);\r\n        items = items.filter((p) => p != id);\r\n        TABLES.config.set(\"banned_items\", items);\r\n        player.tell(`Removed Banned item \"${id}\"`);\r\n      }\r\n    });\r\n}\r\n\r\nexport function showPage2(player: Player) {\r\n  new ModalForm(\"Manage Banned Blocks\")\r\n    .addDropdown(\"Add/Remove Block\", [\"add\", \"remove\"] as const, 0)\r\n    .addTextField(\"Block Id\", \"minecraft:barrier\")\r\n    .show(player, (ctx, method, id) => {\r\n      if (!MinecraftBlockTypes.get(id)?.id)\r\n        return ctx.error(\r\n          `\u00A7c\"${id}\" is not a vaild block id, note: this item must be either a block in a behavior pack or a default minecraft block`\r\n        );\r\n      if (method == \"add\") {\r\n        // add item to list\r\n        let blocks: string[] =\r\n          TABLES.config.get(\"banned_blocks\") ?? BANNED_BLOCKS;\r\n        if (blocks.includes(id))\r\n          return ctx.error(`\u00A7cBlock \"${id}\" is already banned`);\r\n        blocks.push(id);\r\n        TABLES.config.set(\"banned_blocks\", id);\r\n        player.tell(`Banned the block \"${id}\"`);\r\n      } else {\r\n        // remove item\r\n        let blocks: string[] =\r\n          TABLES.config.get(\"banned_blocks\") ?? BANNED_BLOCKS;\r\n        if (!blocks.includes(id))\r\n          return ctx.error(`block: \"${id}\" is not banned`);\r\n        blocks = blocks.filter((p) => p != id);\r\n        TABLES.config.set(\"banned_blocks\", id);\r\n        player.tell(`Removed Banned block \"${id}\"`);\r\n      }\r\n    });\r\n}\r\n\r\ntype MaxEnchantments = {\r\n  [key: string]: number;\r\n};\r\n\r\nexport function showPage3(player: Player) {\r\n  new ModalForm(\"Manage Enchantment Levels\")\r\n    .addDropdown(\"Enchantment to change\", Object.keys(ENCHANTMENTS), 0)\r\n    .addTextField(\"Level (number)\", \"5\")\r\n    .show(player, (ctx, enchantment, levelstring) => {\r\n      if (isNaN(levelstring as any))\r\n        return ctx.error(\r\n          `\u00A7c\"${levelstring}\" is not a number, please enter a value like, \"3\", \"9\", etc.`\r\n        );\r\n      const level = parseInt(levelstring);\r\n      let enchants: MaxEnchantments =\r\n        TABLES.config.get(\"enchantments\") ?? ENCHANTMENTS;\r\n      enchants[enchantment] = level;\r\n      TABLES.config.set(\"enchantments\", enchants);\r\n      player.tell(`Set max level for ${enchantment} to ${level}`);\r\n    });\r\n}\r\n\r\nexport function showPage4(player: Player) {\r\n  new ModalForm(\"Manage Appeal Link\")\r\n    .addTextField(\"Appeal Link\", APPEAL_LINK)\r\n    .show(player, (ctx, link) => {\r\n      TABLES.config.set(\"appealLink\", link);\r\n      player.tell(`Changed the servers appeal link to ${link}`);\r\n    });\r\n}\r\n", "/*\r\n|--------------------------------------------------------------------------\r\n| Version\r\n|--------------------------------------------------------------------------\r\n|\r\n| This is the version of rubedo recomended to NOT CHANGE could cause bugs.\r\n|\r\n*/\r\nexport const VERSION = \"2.5.1-beta\";\r\n\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Game Version\r\n|--------------------------------------------------------------------------\r\n|\r\n| This is the version of minecraft that this version of rubedo\r\n| was made for its a simple constant to tell creators what version\r\n| this gametest api is supposed to work perfectly for.\r\n|\r\n*/\r\nexport const GAME_VERSION = \"1.19.41\";\r\n\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Appeal Link\r\n|--------------------------------------------------------------------------\r\n|\r\n| This is the appeal link that gets showed when someone gets banned\r\n| this link pops up at the bottom of the ban message to show\r\n| where they can appeal there ban.\r\n|\r\n*/\r\nexport const APPEAL_LINK = \"https://discord.gg/dMa3A5UYKX\";\r\n", "/*\n|--------------------------------------------------------------------------\n| Enchantments\n|--------------------------------------------------------------------------\n|\n| This is the default enchantments that can be added to items\n| each enchantment is set to its desired max level this can be changed here\n| or in game using -config enchantments set \"enchantment\" value\n|\n*/\nexport const ENCHANTMENTS = {\n  aquaAffinity: 1,\n  baneOfArthropods: 5,\n  binding: 1,\n  blastProtection: 4,\n  channeling: 1,\n  depthStrider: 3,\n  efficiency: 5,\n  featherFalling: 4,\n  fireAspect: 2,\n  fireProtection: 4,\n  flame: 1,\n  fortune: 3,\n  frostWalker: 2,\n  impaling: 5,\n  infinity: 1,\n  knockback: 2,\n  looting: 3,\n  loyalty: 4,\n  luckOfTheSea: 3,\n  lure: 3,\n  mending: 1,\n  multishot: 1,\n  piercing: 4,\n  power: 5,\n  projectileProtection: 4,\n  protection: 4,\n  punch: 2,\n  quickCharge: 3,\n  respiration: 3,\n  riptide: 3,\n  sharpness: 5,\n  silkTouch: 1,\n  smite: 5,\n  soulSpeed: 3,\n  swiftSneak: 4,\n  thorns: 3,\n  unbreaking: 3,\n  vanishing: 1,\n};\n", "/**\n * This is a list of items that are banned from holding\n */\nexport const BANNED_ITEMS = [\n  \"minecraft:beehive\",\n  \"minecraft:bee_nest\",\n  \"minecraft:acacia_standing_sign\",\n  \"minecraft:acacia_wall_sign\",\n  \"minecraft:agent_spawn_egg\",\n  \"minecraft:allay_spawn_egg\",\n  \"minecraft:allow\",\n  \"minecraft:axolotl_bucket\",\n  \"minecraft:axolotl_spawn_egg\",\n  \"minecraft:balloon\",\n  \"minecraft:bamboo_sapling\",\n  \"minecraft:barrier\",\n  \"minecraft:barrier\",\n  \"minecraft:bat_spawn_egg\",\n  \"minecraft:bedrock\",\n  \"minecraft:bee_nest\",\n  \"minecraft:bee_spawn_egg\",\n  \"minecraft:beehive\",\n  \"minecraft:birch_standing_sign\",\n  \"minecraft:birch_wall_sign\",\n  \"minecraft:blackstone_double_slab\",\n  \"minecraft:blaze_spawn_egg\",\n  \"minecraft:border_block\",\n  \"minecraft:brewingstandblock\",\n  \"minecraft:bubble_column\",\n  \"minecraft:camera\",\n  \"minecraft:carrots\",\n  \"minecraft:cat_spawn_egg\",\n  \"minecraft:cave_spider_spawn_egg\",\n  \"minecraft:cave_vines\",\n  \"minecraft:cave_vines_body_with_berries\",\n  \"minecraft:chain_command_block\",\n  \"minecraft:chemical_heat\",\n  \"minecraft:chemistry_table\",\n  \"minecraft:chicken_spawn_egg\",\n  \"minecraft:client_request_placeholder_block\",\n  \"minecraft:cobbled_deepslate_double_slab\",\n  \"minecraft:cod_bucket\",\n  \"minecraft:cod_spawn_egg\",\n  \"minecraft:colored_torch\",\n  \"minecraft:colored_torch_bp\",\n  \"minecraft:colored_torch_rg\",\n  \"minecraft:command_block\",\n  \"minecraft:command_block_minecart\",\n  \"minecraft:compound\",\n  \"minecraft:compoundcreator\",\n  \"minecraft:cow_spawn_egg\",\n  \"minecraft:creeper_spawn_egg\",\n  \"minecraft:crimson_double_slab\",\n  \"minecraft:crimson_standing_sign\",\n  \"minecraft:crimson_wall_sign\",\n  \"minecraft:darkoak_standing_sign\",\n  \"minecraft:darkoak_wall_sign\",\n  \"minecraft:daylight_detector_inverted\",\n  \"minecraft:debug_stick\",\n  \"minecraft:deepslate_brick_double_slab\",\n  \"minecraft:deepslate_tile_double_slab\",\n  \"minecraft:deny\",\n  \"minecraft:dolphin_spawn_egg\",\n  \"minecraft:donkey_spawn_egg\",\n  \"minecraft:double_cut_copper_slab\",\n  \"minecraft:double_wooden_slab\",\n  \"minecraft:drowned_spawn_egg\",\n  \"minecraft:elder_guardian_spawn_egg\",\n  \"minecraft:end_gateway\",\n  \"minecraft:end_portal\",\n  \"minecraft:end_portal_frame\",\n  \"minecraft:enderman_spawn_egg\",\n  \"minecraft:endermite_spawn_egg\",\n  \"minecraft:evoker_spawn_egg\",\n  \"minecraft:exposed_double_cut_copper_slab\",\n  \"minecraft:fire\",\n  \"minecraft:flowing_lava\",\n  \"minecraft:flowing_water\",\n  \"minecraft:fox_spawn_egg\",\n  \"minecraft:frog_spawn_egg\",\n  \"minecraft:frosted_ice\",\n  \"minecraft:ghast_spawn_egg\",\n  \"minecraft:glow_squid_spawn_egg\",\n  \"minecraft:glow_stick\",\n  \"minecraft:glowingobsidian\",\n  \"minecraft:goat_spawn_egg\",\n  \"minecraft:guardian_spawn_egg\",\n  \"minecraft:hard_glass\",\n  \"minecraft:hard_glass_pane\",\n  \"minecraft:hard_stained_glass\",\n  \"minecraft:hard_stained_glass_pane\",\n  \"minecraft:hoglin_spawn_egg\",\n  \"minecraft:horse_spawn_egg\",\n  \"minecraft:husk_spawn_egg\",\n  \"minecraft:ice_bomb\",\n  \"minecraft:info_update\",\n  \"minecraft:info_update2\",\n  \"minecraft:invisible_bedrock\",\n  \"minecraft:invisiblebedrock\",\n  \"minecraft:item.acacia_door\",\n  \"minecraft:item.bed\",\n  \"minecraft:item.beetroot\",\n  \"minecraft:item.birch_door\",\n  \"minecraft:item.cake\",\n  \"minecraft:item.campfire\",\n  \"minecraft:item.cauldron\",\n  \"minecraft:item.chain\",\n  \"minecraft:item.crimson_door\",\n  \"minecraft:item.dark_oak_door\",\n  \"minecraft:item.flower_pot\",\n  \"minecraft:item.frame\",\n  \"minecraft:item.glow_frame\",\n  \"minecraft:item.hopper\",\n  \"minecraft:item.iron_door\",\n  \"minecraft:item.jungle_door\",\n  \"minecraft:item.kelp\",\n  \"minecraft:item.nether_sprouts\",\n  \"minecraft:item.nether_wart\",\n  \"minecraft:item.reeds\",\n  \"minecraft:item.skull\",\n  \"minecraft:item.soul_campfire\",\n  \"minecraft:item.spruce_door\",\n  \"minecraft:item.warped_door\",\n  \"minecraft:item.wheat\",\n  \"minecraft:item.wooden_door\",\n  \"minecraft:jigsaw\",\n  \"minecraft:jungle_standing_sign\",\n  \"minecraft:jungle_wall_sign\",\n  \"minecraft:lava\",\n  \"minecraft:lava_cauldron\",\n  \"minecraft:light_block\",\n  \"minecraft:lit_blast_furnace\",\n  \"minecraft:lit_deepslate_redstone_ore\",\n  \"minecraft:lit_furnace\",\n  \"minecraft:lit_redstone_lamp\",\n  \"minecraft:lit_redstone_ore\",\n  \"minecraft:lit_smoker\",\n  \"minecraft:llama_spawn_egg\",\n  \"minecraft:magma_cube_spawn_egg\",\n  \"minecraft:medicine\",\n  \"minecraft:melon_stem\",\n  \"minecraft:mob_spawner\",\n  \"minecraft:mooshroom_spawn_egg\",\n  \"minecraft:movingBlock\",\n  \"minecraft:moving_block\",\n  \"minecraft:movingblock\",\n  \"minecraft:mule_spawn_egg\",\n  \"minecraft:netherreactor\",\n  \"minecraft:npc_spawn\",\n  \"minecraft:npc_spawn_egg\",\n  \"minecraft:ocelot_spawn_egg\",\n  \"minecraft:oxidized_double_cut_copper_slab\",\n  \"minecraft:panda_spawn_egg\",\n  \"minecraft:parrot_spawn_egg\",\n  \"minecraft:phantom_spawn_egg\",\n  \"minecraft:pig_spawn_egg\",\n  \"minecraft:piglin_brute_spawn_egg\",\n  \"minecraft:piglin_spawn_egg\",\n  \"minecraft:pillager_spawn_egg\",\n  \"minecraft:piston_arm_collision\",\n  \"minecraft:piston_arm_collision\",\n  \"minecraft:pistonarmcollision\",\n  \"minecraft:polar_bear_spawn_egg\",\n  \"minecraft:polished_blackstone_brick_double_slab\",\n  \"minecraft:polished_blackstone_double_slab\",\n  \"minecraft:polished_deepslate_double_slab\",\n  \"minecraft:portal\",\n  \"minecraft:potatoes\",\n  \"minecraft:powder_snow\",\n  \"minecraft:powder_snow_bucket\",\n  \"minecraft:powered_comparator\",\n  \"minecraft:powered_repeater\",\n  \"minecraft:pufferfish_bucket\",\n  \"minecraft:pufferfish_spawn_egg\",\n  \"minecraft:pumpkin_stem\",\n  \"minecraft:rabbit_spawn_egg\",\n  \"minecraft:rapid_fertilizer\",\n  \"minecraft:ravager_spawn_egg\",\n  \"minecraft:real_double_stone_slab\",\n  \"minecraft:real_double_stone_slab2\",\n  \"minecraft:real_double_stone_slab3\",\n  \"minecraft:real_double_stone_slab4\",\n  \"minecraft:redstone_wire\",\n  \"minecraft:repeating_command_block\",\n  \"minecraft:reserved3\",\n  \"minecraft:reserved4\",\n  \"minecraft:reserved6\",\n  \"minecraft:salmon_bucket\",\n  \"minecraft:salmon_spawn_egg\",\n  \"minecraft:sea_turtle_spawn_egg\",\n  \"minecraft:sheep_spawn_egg\",\n  \"minecraft:shulker_spawn_egg\",\n  \"minecraft:silverfish_spawn_egg\",\n  \"minecraft:skeleton_horse_spawn_egg\",\n  \"minecraft:skeleton_spawn_egg\",\n  \"minecraft:slime_spawn_egg\",\n  \"minecraft:soul_fire\",\n  \"minecraft:soul_fire\",\n  \"minecraft:sparkler\",\n  \"minecraft:spawn_egg\",\n  \"minecraft:spawn_egg\",\n  \"minecraft:spawner\",\n  \"minecraft:spider_spawn_egg\",\n  \"minecraft:spruce_standing_sign\",\n  \"minecraft:spruce_wall_sign\",\n  \"minecraft:squid_spawn_egg\",\n  \"minecraft:standing_banner\",\n  \"minecraft:standing_sign\",\n  \"minecraft:stickyPistonArmCollision\",\n  \"minecraft:sticky_piston_arm_collision\",\n  \"minecraft:stonecutter\",\n  \"minecraft:stray_spawn_egg\",\n  \"minecraft:strider_spawn_egg\",\n  \"minecraft:structure_block\",\n  \"minecraft:structure_void\",\n  \"minecraft:tadpole_bucket\",\n  \"minecraft:tadpole_spawn_egg\",\n  \"minecraft:tripwire\",\n  \"minecraft:tropical_fish_bucket\",\n  \"minecraft:tropical_fish_spawn_egg\",\n  \"minecraft:underwater_torch\",\n  \"minecraft:unknown\",\n  \"minecraft:unlit_redstone_ore\",\n  \"minecraft:unpowered_comparator\",\n  \"minecraft:unpowered_repeater\",\n  \"minecraft:vex_spawn_egg\",\n  \"minecraft:villager_spawn_egg\",\n  \"minecraft:vindicator_spawn_egg\",\n  \"minecraft:wall_banner\",\n  \"minecraft:wall_sign\",\n  \"minecraft:wandering_trader_spawn_egg\",\n  \"minecraft:warden_spawn_egg\",\n  \"minecraft:warped_double_slab\",\n  \"minecraft:warped_standing_sign\",\n  \"minecraft:warped_wall_sign\",\n  \"minecraft:water\",\n  \"minecraft:waxed_double_cut_copper_slab\",\n  \"minecraft:waxed_exposed_double_cut_copper_slab\",\n  \"minecraft:waxed_oxidized_double_cut_copper_slab\",\n  \"minecraft:waxed_weathered_double_cut_copper_slab\",\n  \"minecraft:weathered_double_cut_copper_slab\",\n  \"minecraft:witch_spawn_egg\",\n  \"minecraft:wither_spawn_egg\",\n  \"minecraft:wolf_spawn_egg\",\n  \"minecraft:zoglin_spawn_egg\",\n  \"minecraft:zombie_horse_spawn_egg\",\n  \"minecraft:zombie_spawn_egg\",\n  \"minecraft:zombie_villager_spawn_egg\",\n  \"minecraft:zombified_piglin_spawn_egg\",\n];\n\n/**\n * List of blocks that cannot be placed down\n */\nexport const BANNED_BLOCKS = [\n  \"minecraft:moving_block\",\n  \"minecraft:beehive\",\n  \"minecraft:beenest\",\n];\n\n/**\n * A List of all containers a item could be in\n */\nexport const BLOCK_CONTAINERS = [\n  \"minecraft:chest\",\n  //\"minecraft:barrel\",\n  \"minecraft:trapped_chest\",\n  //\"minecraft:dispenser\",\n  //\"minecraft:dropper\",\n  //\"minecraft:furnace\",\n  //\"minecraft:blast_furnace\",\n  //\"minecraft:lit_furnace\",\n  //\"minecraft:lit_blast_furnace\",\n  //\"minecraft:hopper\",\n  //\"minecraft:shulker_box\",\n  //\"minecraft:undyed_shulker_box\",\n];\n\n/**\n * The block size to check for blockContainers\n */\nexport const CHECK_SIZE = { x: 7, y: 7, z: 7 };\n", "import { Player } from \"@minecraft/server\";\r\nimport { ModalFormData } from \"@minecraft/server-ui\";\r\nimport { TIMEOUT_THRESHOLD } from \"../../../config/form\";\r\nimport type { AppendFormField, IModalFormArg, Range } from \"../types\";\r\nimport { FormCallback } from \"./FormCallback\";\r\n\r\nexport class ModalForm<Callback extends Function = (ctx: FormCallback) => void> {\r\n  /**\r\n   *  the title that this form should have\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * The default minecraft form this form is based on\r\n   */\r\n  private form: ModalFormData;\r\n\r\n  /**\r\n   * The arguments this form has\r\n   */\r\n  private args: IModalFormArg[];\r\n\r\n  /**\r\n   * The amount of times it takes to show this form in ms\r\n   * if this value goes above 200 it will time out\r\n   */\r\n  private triedToShow: number;\r\n\r\n  /**\r\n   * Creates a new form to be shown to a player\r\n   * @param title the title that this form should have\r\n   */\r\n  constructor(title?: string) {\r\n    this.title = title;\r\n    this.form = new ModalFormData();\r\n\r\n    if (title) this.form.title(title);\r\n\r\n    this.args = [];\r\n\r\n    this.triedToShow = 0;\r\n  }\r\n\r\n  /**\r\n   * Adds a dropdown to this form\r\n   * @param label label to show on dropdown\r\n   * @param options the availiabe options for this dropdown\r\n   * @param defaultValueIndex the default value index\r\n   * @returns this\r\n   */\r\n  addDropdown<T extends ReadonlyArray<string>>(\r\n    label: string,\r\n    options: T,\r\n    defaultValueIndex?: number\r\n  ): ModalForm<AppendFormField<Callback, T[number]>> {\r\n    // @ts-ignore\r\n    this.args.push({ type: \"dropdown\", options: options });\r\n    // @ts-ignore\r\n    this.form.dropdown(label, options, defaultValueIndex);\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a slider to this form\r\n   * @param label label to be shown on this slider\r\n   * @param minimumValue the smallest value this can be\r\n   * @param maximumValue the maximum value this can be\r\n   * @param valueStep how this slider increments\r\n   * @param defaultValue the default value in slider\r\n   * @returns this\r\n   */\r\n  addSlider<T extends number, U extends number>(\r\n    label: string,\r\n    minimumValue: T,\r\n    maximumValue: U,\r\n    valueStep: number,\r\n    defaultValue?: number\r\n  ): ModalForm<AppendFormField<Callback, Range<T, U>>> {\r\n    this.args.push({ type: \"slider\" });\r\n    this.form.slider(\r\n      label,\r\n      minimumValue,\r\n      maximumValue,\r\n      valueStep,\r\n      defaultValue\r\n    );\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a toggle to this form\r\n   * @param label the name of this toggle\r\n   * @param defaultValue the default toggle value could be true or false\r\n   * @returns\r\n   */\r\n  addToggle(\r\n    label: string,\r\n    defaultValue?: boolean\r\n  ): ModalForm<AppendFormField<Callback, boolean>> {\r\n    this.args.push({ type: \"toggle\" });\r\n    this.form.toggle(label, defaultValue);\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a text field to this form\r\n   * @param label label for this textField\r\n   * @param placeholderText the text that shows on this field\r\n   * @param defaultValue the default value that this field has\r\n   */\r\n  addTextField(\r\n    label: string,\r\n    placeholderText: string,\r\n    defaultValue?: string\r\n  ): ModalForm<AppendFormField<Callback, string>> {\r\n    this.args.push({ type: \"textField\" });\r\n    this.form.textField(label, placeholderText, defaultValue);\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows this form to a player\r\n   * @param player player to show to\r\n   * @param callback sends a callback when this form is submited\r\n   */\r\n  show(player: Player, callback: Callback): void {\r\n    this.form.show(player).then((response) => {\r\n      if (response.canceled) {\r\n        if (response.cancelationReason == \"userBusy\") {\r\n          // check time and reshow form\r\n          if (this.triedToShow > TIMEOUT_THRESHOLD)\r\n            return player.tell(\r\n              `\u00A7cForm Timeout: tried to show form, but you were busy (close chat after running command)`\r\n            );\r\n          this.triedToShow++;\r\n          this.show(player, callback);\r\n        }\r\n        return;\r\n      }\r\n      callback(\r\n        new FormCallback(this, player, callback),\r\n        ...response.formValues.map((v, i) =>\r\n          this.args[i].type == \"dropdown\" ? this.args[i].options[v] : v\r\n        )\r\n      );\r\n    });\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { ActionForm } from \"./ActionForm\";\r\nimport { MessageForm } from \"./MessageForm\";\r\nimport { ModalForm } from \"./ModelForm\";\r\n\r\nexport class FormCallback {\r\n  /**\r\n   * form that was used in this call\r\n   */\r\n  private form: ActionForm | MessageForm | ModalForm<any>;\r\n  /**\r\n   * player that this form used\r\n   */\r\n  private player: Player;\r\n\r\n  /**\r\n   * the function that was called\r\n   */\r\n  private callback: () => void;\r\n\r\n  /**\r\n   * Creates a new form callback instance that can be used by\r\n   * buttons, and args to run various functions\r\n   * @param form form that is used in this call\r\n   */\r\n  constructor(\r\n    form: ActionForm | MessageForm | ModalForm<any>,\r\n    player: Player,\r\n    callback: any\r\n  ) {\r\n    this.form = form;\r\n    this.player = player;\r\n    this.callback = callback;\r\n  }\r\n\r\n  /**\r\n   * Reshows the form and shows the user a error message\r\n   * @param message error message to show\r\n   */\r\n  error(message: string) {\r\n    new MessageForm(\"Error\", message)\r\n      .setButton1(\"Return to form\", () => {\r\n        this.form.show(this.player, this.callback);\r\n      })\r\n      .setButton2(\"Cancel\", null)\r\n      .show(this.player);\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { TABLES } from \"../../lib/Database/tables\";\r\nimport { ActionForm } from \"../../lib/Form/Models/ActionForm\";\r\nimport { ModalForm } from \"../../lib/Form/Models/ModelForm\";\r\n\r\nexport function showPage1(player: Player) {\r\n  new ActionForm(\"Rubedo Settings\")\r\n    .addButton(\"Anti Spam\", \"textures/ui/permissions_op_crown.png\", () => {\r\n      showPage2(player);\r\n    })\r\n    .addButton(\"Cbe\", \"textures/blocks/sculk_shrieker_top.png\", () => {\r\n      showPage3(player);\r\n    })\r\n    .addButton(\"Gamemode\", \"textures/blocks/barrier.png\", () => {\r\n      showPage4(player);\r\n    })\r\n    .addButton(\"Nuker\", \"textures/ui/Feedback.png\", () => {\r\n      showPage5(player);\r\n    })\r\n    .show(player);\r\n}\r\n\r\nexport function showPage2(player: Player) {\r\n  const spam_config = TABLES.config.get(\"spam_config\") ?? {\r\n    repeatedMessages: true,\r\n    zalgo: true,\r\n    violationCount: 0,\r\n    permMutePlayer: false,\r\n  };\r\n  new ModalForm(\"Manage Spam Protection\")\r\n    .addToggle(\"Ban Repeated Messages\", spam_config.repeatedMessages)\r\n    .addToggle(\"Ban Zalgo\", spam_config.zalgo)\r\n    .addSlider(\r\n      \"Violation Count before ban (if ban is false this does nothing)\",\r\n      0,\r\n      20,\r\n      1,\r\n      spam_config.violationCount\r\n    )\r\n    .addToggle(\"Perm Mute Player\", spam_config.permMutePlayer)\r\n    .show(\r\n      player,\r\n      (ctx, repeatedMessages, zalgo, violationCount, permMutePlayer) => {\r\n        TABLES.config.set(\"spam_config\", {\r\n          repeatedMessages: repeatedMessages,\r\n          zalgo: zalgo,\r\n          violationCount: violationCount,\r\n          permMutePlayer: permMutePlayer,\r\n        });\r\n        player.tell(`Updated Spam Protection settings!`);\r\n      }\r\n    );\r\n}\r\n\r\nexport function showPage3(player: Player) {\r\n  const cbe_data = TABLES.config.get(\"cbe_config\") ?? {\r\n    clearItem: true,\r\n    violationCount: 0,\r\n    banPlayer: false,\r\n  };\r\n  new ModalForm(\"Manage CBE Protection\")\r\n    .addToggle(\"Clear Item\", cbe_data.clearItem)\r\n    .addSlider(\r\n      \"Violation Count before ban (if ban is false this does nothing)\",\r\n      0,\r\n      20,\r\n      1,\r\n      cbe_data.violationCount\r\n    )\r\n    .addToggle(\"Ban Player\", cbe_data.banPlayer)\r\n    .show(player, (ctx, clearItem, violationCount, banPlayer) => {\r\n      TABLES.config.set(\"cbe_config\", {\r\n        clearItem: clearItem,\r\n        violationCount: violationCount,\r\n        banPlayer: banPlayer,\r\n      });\r\n      player.tell(`Updated CBE Protection settings!`);\r\n    });\r\n}\r\n\r\nexport function showPage4(player: Player) {\r\n  const gamemode_data = TABLES.config.get(\"gamemode_config\") ?? {\r\n    setToSurvival: true,\r\n    clearPlayer: true,\r\n    violationCount: 0,\r\n    banPlayer: false,\r\n  };\r\n  new ModalForm(\"Manage Gamemode Protection\")\r\n    .addToggle(\"Set to survival\", gamemode_data.setToSurvival)\r\n    .addToggle(\r\n      \"Clear Player (Once this players gamemode has been switched back to survival should it clear the inventory?)\",\r\n      gamemode_data.clearPlayer\r\n    )\r\n    .addSlider(\r\n      \"Violation Count before ban (if ban is false this does nothing)\",\r\n      0,\r\n      20,\r\n      1,\r\n      gamemode_data.violationCount\r\n    )\r\n    .addToggle(\"Ban Player\", gamemode_data.banPlayer)\r\n    .show(\r\n      player,\r\n      (ctx, setToSurvival, clearPlayer, violationCount, banPlayer) => {\r\n        TABLES.config.set(\"gamemode_config\", {\r\n          setToSurvival: setToSurvival,\r\n          clearPlayer: clearPlayer,\r\n          violationCount: violationCount,\r\n          banPlayer: banPlayer,\r\n        });\r\n        player.tell(`Updated Gamemode Protection settings!`);\r\n      }\r\n    );\r\n}\r\n\r\nexport function showPage5(player: Player) {\r\n  const nuker_data = TABLES.config.get(\"nuker_data\") ?? {\r\n    violationCount: 0,\r\n    banPlayer: false,\r\n  };\r\n  new ModalForm(\"Manage Gamemode Protection\")\r\n    .addSlider(\r\n      \"Violation Count before ban (if ban is false this does nothing)\",\r\n      0,\r\n      20,\r\n      1,\r\n      nuker_data.violationCount\r\n    )\r\n    .addToggle(\"Ban Player\", nuker_data.banPlayer)\r\n    .show(player, (ctx, violationCount, banPlayer) => {\r\n      TABLES.config.set(\"nuker_data\", {\r\n        violationCount: violationCount,\r\n        banPlayer: banPlayer,\r\n      });\r\n      player.tell(`Updated Nuker Protection settings!`);\r\n    });\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { ActionForm } from \"../../lib/Form/Models/ActionForm\";\r\nimport * as settings from \"./settings\";\r\nimport * as automod from \"./automod\";\r\n\r\nexport function showHome(player: Player) {\r\n  new ActionForm(\"Rubedo Settings\")\r\n    .addButton(\"Auto Mod\", \"textures/ui/permissions_op_crown.png\", () => {\r\n      automod.showPage1(player);\r\n    })\r\n    .addButton(\"Banned items\", \"textures/blocks/sculk_shrieker_top.png\", () => {\r\n      settings.showPage1(player);\r\n    })\r\n    .addButton(\"Banned blocks\", \"textures/blocks/barrier.png\", () => {\r\n      settings.showPage2(player);\r\n    })\r\n    .addButton(\"Enchantments\", \"textures/items/book_enchanted.png\", () => {\r\n      settings.showPage3(player);\r\n    })\r\n    .addButton(\"Appeal Link\", \"textures/ui/Feedback.png\", () => {\r\n      settings.showPage4(player);\r\n    })\r\n    .show(player);\r\n}\r\n", "import { Command } from \"../../lib/Command/Command.js\";\r\nimport { getRole } from \"../../utils.js\";\r\nimport { showHome } from \"../forms/home.js\";\r\n\r\nnew Command({\r\n  name: \"settings\",\r\n  description: \"Opens up the settings menu for the player\",\r\n  requires: (player) => [\"admin\", \"moderator\"].includes(getRole(player)),\r\n}).executes((ctx) => {\r\n  showHome(ctx.sender);\r\n  ctx.sender.tell(`\u00A7aForm request sent, close chat to continue!`);\r\n});\r\n", "import { world } from \"@minecraft/server\";\nimport { Command } from \"../../lib/Command/Command.js\";\nimport { getRole } from \"../../utils.js\";\n\nnew Command({\n  name: \"vanish\",\n  description: \"Toggles Vanish Mode on the sender\",\n  requires: (player) => getRole(player) == \"admin\",\n})\n  .boolean(\"say\")\n  .executes((ctx, say) => {\n    if (ctx.sender.hasTag(`spectator`)) {\n      ctx.sender.runCommand(`gamemode c`);\n      ctx.sender.runCommand(`event entity @s removeSpectator`);\n      ctx.sender.removeTag(`spectator`);\n      if (!say) return;\n      world.say({\n        rawtext: [\n          {\n            translate: \"multiplayer.player.joined\",\n            with: [`\u00A7e${ctx.sender.name}`],\n          },\n        ],\n      });\n    } else {\n      ctx.sender.runCommand(`gamemode spectator`);\n      ctx.sender.runCommand(`event entity @s addSpectator`);\n      ctx.sender.addTag(`spectator`);\n      if (!say) return;\n      world.say({\n        rawtext: [\n          {\n            translate: \"multiplayer.player.left\",\n            with: [`\u00A7e${ctx.sender.name}`],\n          },\n        ],\n      });\n    }\n  });\n", "import { Command } from \"../../lib/Command/Command.js\";\nimport { VERSION } from \"../../config/app\";\n\nnew Command({\n  name: \"version\",\n  description: \"Get Current Version\",\n  aliases: [\"v\"],\n}).executes((ctx) => {\n  ctx.reply(`Current Rubedo Version: ${VERSION}`);\n});\n", "import { APPEAL_LINK } from \"../../config/app.js\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport {\n  kick,\n  forEachValidPlayer,\n  msToTime,\n} from \"../../utils.js\";\n\nforEachValidPlayer((player) => {\n  try {\n    const banData = TABLES.bans.get(player.id);\n    if (!banData) return;\n    console.warn(player.name);\n    if (banData.expire && banData.expire < Date.now())\n      return TABLES.bans.delete(player.id);\n    kick(\n      player,\n      [\n        `\u00A7cYou have been banned!`,\n        `\u00A7aReason: \u00A7f${banData.reason}`,\n        `\u00A7fExpiry: \u00A7b${banData.expire ? msToTime(banData.duration) : \"Forever\"}`,\n        `\u00A7fAppeal at: \u00A7b${TABLES.config.get(\"appealLink\") ?? APPEAL_LINK}`,\n      ],\n      () => {\n        console.warn(new Error(\"Failed to kick player\"));\n        TABLES.bans.delete(player.id);\n      }\n    );\n  } catch (error) {\n    console.warn(error + error.stack);\n  }\n}, 20);\n", "import { Location } from \"@minecraft/server\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { DIMENSIONS, forEachValidPlayer } from \"../../utils.js\";\n\nforEachValidPlayer((player) => {\n  const freezeData = TABLES.freezes.get(player.id);\n  if (!freezeData) return;\n  player.teleport(\n    new Location(\n      freezeData.location.x,\n      freezeData.location.y,\n      freezeData.location.z\n    ),\n    DIMENSIONS[freezeData.location.dimension as keyof typeof DIMENSIONS],\n    0,\n    0\n  );\n}, 20);\n", "import { world, BeforeChatEvent } from \"@minecraft/server\";\r\nimport { PREFIX } from \"../../config/commands\";\r\n\r\ntype beforeChatCallback = (arg: BeforeChatEvent) => void;\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: beforeChatCallback;\r\n  };\r\n} = {};\r\n\r\nworld.events.beforeChat.subscribe((data) => {\r\n  if (data.message.startsWith(PREFIX)) return; // This is a command\r\n  for (const callback of Object.values(CALLBACKS)) {\r\n    callback.callback(data);\r\n  }\r\n});\r\n\r\nexport class beforeChat {\r\n  /**\r\n   * Subscribes to a callback to get notified when a chat is sent that is not a command\r\n   * @param callback what to be called when one of these entitys inventorys changes\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(callback: beforeChatCallback): number {\r\n    const key = Date.now();\r\n    CALLBACKS[key] = { callback: callback };\r\n    return key;\r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n", "import { Mute } from \"../models/Mute.js\";\nimport { text } from \"../../lang/text.js\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { beforeChat } from \"../../lib/Events/beforeChat.js\";\n\nbeforeChat.subscribe((data) => {\n  const muteData = Mute.getMuteData(data.sender);\n  if (!muteData) return;\n  if (muteData.expire && muteData.expire < Date.now())\n    return TABLES.mutes.delete(data.sender.name);\n  data.cancel = true;\n  data.sender.tell(text[\"modules.managers.mute.isMuted\"]());\n});\n", "import { BlockLocation, Player, world } from \"@minecraft/server\";\nimport { Region } from \"../models/Region.js\";\nimport {\n  DIMENSIONS,\n  forEachValidPlayer,\n  getRole,\n  loadRegionDenys,\n} from \"../../utils.js\";\nimport { setTickInterval } from \"../../lib/Scheduling/utils.js\";\nimport { BLOCK_CONTAINERS, DOORS_SWITCHES } from \"../../config/region.js\";\n\n/**\n * Sets Deny blocks at bottom of region every 5 mins\n */\nsetTickInterval(() => {\n  loadRegionDenys();\n}, 6000);\n\n/**\n * Permissions for region\n */\nworld.events.beforeItemUseOn.subscribe((data) => {\n  if ([\"moderator\", \"admin\"].includes(getRole(data.source as Player))) return;\n  const region = Region.blockLocationInRegion(\n    data.blockLocation,\n    data.source.dimension.id\n  );\n  if (!region) return;\n  const block = data.source.dimension.getBlock(data.blockLocation);\n  if (\n    DOORS_SWITCHES.includes(block.typeId) &&\n    region.permissions.doorsAndSwitches\n  )\n    return;\n  if (\n    BLOCK_CONTAINERS.includes(block.typeId) &&\n    region.permissions.openContainers\n  )\n    return;\n  data.cancel = true;\n});\n\nworld.events.beforeExplosion.subscribe((data) => {\n  for (let i = 0; i < data.impactedBlocks.length; i++) {\n    const bL = data.impactedBlocks[i];\n    let region = Region.blockLocationInRegion(bL, data.dimension.id);\n    if (region) return (data.cancel = true);\n  }\n});\n\nworld.events.entityCreate.subscribe((data) => {\n  const region = Region.blockLocationInRegion(\n    new BlockLocation(\n      data.entity.location.x,\n      data.entity.location.y,\n      data.entity.location.z\n    ),\n    data.entity.dimension.id\n  );\n  if (!region) return;\n  if (region.permissions.allowedEntitys.includes(data.entity.typeId)) return;\n  data.entity.teleport({ x: 0, y: -64, z: 0 }, data.entity.dimension, 0, 0);\n  data.entity.kill();\n});\n\nsetTickInterval(() => {\n  for (const region of Region.getAllRegions()) {\n    for (const entity of DIMENSIONS[\n      region.dimensionId as keyof typeof DIMENSIONS\n    ].getEntities({ excludeTypes: region.permissions.allowedEntitys })) {\n      if (!region.entityInRegion(entity)) continue;\n      entity.teleport({ x: 0, y: -64, z: 0 }, entity.dimension, 0, 0);\n      entity.kill();\n    }\n  }\n}, 100);\n\n/**\n * Gives player a tag if they are in a region\n */\nforEachValidPlayer((player) => {\n  for (const region of Region.getAllRegions()) {\n    if (region.entityInRegion(player)) {\n      player.addTag(`inRegion`);\n      if (!region.permissions.pvp) player.addTag(`region-protected`);\n    } else {\n      player.removeTag(`inRegion`);\n      player.removeTag(`region-protected`);\n    }\n  }\n}, 5);\n", "import { world } from \"@minecraft/server\";\nimport { text } from \"../../lang/text\";\nimport { TABLES } from \"../../lib/Database/tables\";\nimport { DIMENSIONS, getRole, isLockedDown, kick, setRole } from \"../../utils\";\nimport { Mute } from \"../models/Mute\";\nimport { ChangePlayerRoleTask } from \"../models/Task\";\n\nworld.events.playerJoin.subscribe(({ player }) => {\n  if (isLockedDown() && getRole(player) != \"admin\")\n    return kick(player, text[\"lockdown.kick.message\"]());\n  let e = world.events.tick.subscribe((data) => {\n    try {\n      DIMENSIONS.overworld.runCommand(`testfor @a[name=\"${player.name}\"]`);\n      world.events.tick.unsubscribe(e);\n      if (Mute.getMuteData(player)) player.runCommand(`ability @s mute true`);\n      if (!player.hasTag(\"old\")) {\n        // Player is new!\n        TABLES.ids.set(player.name, player.id);\n      } else {\n        player.addTag(\"old\");\n      }\n      /**\n       * This is a role that was tried to push when the player was offline\n       * so were setting it now because the player just joined\n       */\n      const roleToSet = ChangePlayerRoleTask.getPlayersRoleToSet(player.name);\n      if (roleToSet) setRole(player, roleToSet);\n    } catch (error) {}\n  });\n});\n", "import {\n  Entity,\n  InventoryComponentContainer,\n  Items,\n  MinecraftItemTypes,\n  world,\n} from \"@minecraft/server\";\nimport { AIR } from \"../../index.js\";\nimport { PageItem } from \"../../lib/Chest GUI/Models/PageItem\";\nimport { Page } from \"../../lib/Chest GUI/Models/Page\";\nimport { CHESTGUIS } from \"../../lib/Chest GUI/utils.js\";\nimport { ItemType } from \"mojang-minecraft\";\n\n/**\n * The possible fillibale slots where items can be put\n * this is for inventory fill\n */\nconst FILLABLE_SLOTS = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44,\n];\n\n/**\n * The possible fillibale slots where items can be put\n * this is for inventory fill\n */\nconst FILLABLE_SLOTS_ENDERCHEST = [\n  10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32,\n  33, 34, 37, 38, 39, 40, 41, 42, 43,\n];\n\n/**\n * Fills the chest Screen with the desired kit\n */\nexport function ViewPlayersFill(entity: Entity, page: Page, extras: any) {\n  const container: InventoryComponentContainer = entity.getComponent(\n    \"minecraft:inventory\"\n  ).container;\n\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n  for (const [i, player] of [...world.getPlayers()].entries()) {\n    const slot = FILLABLE_SLOTS[i];\n    const item = new PageItem(MinecraftItemTypes.skull, {\n      nameTag: player.name,\n      data: 3,\n    });\n    container.setItem(slot, item.itemStack);\n    page.slots[slot] = {\n      item: item,\n      action: (ctx) => {\n        ctx.PageAction(\"moderation:see_inventory\", { name: player.name });\n      },\n    };\n  }\n}\n\n/**\n * Fills the chest Screen with the desired kit\n */\nexport function ViewPlayerInventoryFill(\n  entity: Entity,\n  page: Page,\n  extras: any\n) {\n  const container = entity.getComponent(\"minecraft:inventory\").container;\n\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n  const EnderChestItem = new PageItem(MinecraftItemTypes.enderChest, {\n    nameTag: `\u00A7eView \u00A7f${extras?.name}\u00A7e Ender Chest\\n\u00A7fNote: \u00A7cThis will not grab \u00A7lANY NBT!\u00A7r`,\n  });\n  container.setItem(49, EnderChestItem.itemStack);\n  page.slots[49] = {\n    item: EnderChestItem,\n    action: (ctx) => {\n      ctx.PageAction(\"moderation:see_ender_chest\", { name: extras.name });\n    },\n  };\n  const player = [...world.getPlayers()].find((p) => p.name == extras.name);\n  if (!player) {\n    const gui = Object.values(CHESTGUIS).find((e) => e.entity.id == entity.id);\n    gui.despawn();\n    player.tell(`\"${extras.name}\" Could not be found, Gui Crashed`);\n  }\n  const inventory = player.getComponent(\"inventory\").container;\n  /**\n   * the value of how many slots have been taken\n   */\n  let used_slots = 0;\n  for (let i = 0; i < inventory.size; i++) {\n    const item = inventory.getItem(i);\n    const slot = FILLABLE_SLOTS[used_slots];\n    used_slots++;\n    if (!item) {\n      container.setItem(slot, AIR);\n      continue;\n    }\n    container.setItem(slot, item);\n    page.slots[slot] = {\n      item: new PageItem(\n        Items.get(item.typeId),\n        { amount: item.amount, data: item.data },\n        item\n      ),\n      action: (ctx) => {\n        if (i < 9) {\n          player.runCommand(`replaceitem entity @s slot.hotbar ${i} air`);\n        } else {\n          player.runCommand(\n            `replaceitem entity @s slot.inventory ${i - 9} air`\n          );\n        }\n        ctx.GiveAction();\n        page.slots[slot] = {\n          item: null,\n          action: (ctx) => {\n            inventory.addItem(ctx.getItemAdded());\n          },\n        };\n      },\n    };\n  }\n}\n\n/**\n * Fills the chest Screen with the desired kit\n */\nexport function ViewPlayerEnderChestFill(\n  entity: Entity,\n  page: Page,\n  extras: any\n) {\n  const container = entity.getComponent(\"minecraft:inventory\").container;\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n  const player = [...world.getPlayers()].find((p) => p.name == extras?.name);\n  if (!player) {\n    const gui = Object.values(CHESTGUIS).find((e) => e.entity.id == entity.id);\n    gui.despawn();\n    player.tell(`\"${extras.name}\" Could not be found, Gui Crashed`);\n  }\n  /**\n   * the value of how many slots have been taken\n   */\n  let used_slots = 0;\n  const ItemTypes: ItemType[] = Object.values(MinecraftItemTypes);\n  for (const item of ItemTypes) {\n    try {\n      player.runCommand(\n        `testfor @s[hasitem={item=${item.id},location=slot.enderchest}]`\n      );\n      console.warn(`found ${item.id}`);\n      const ChestGuiItem = new PageItem(item, {\n        nameTag: \"Note: \u00A7l\u00A7cThis is not the exzact item\",\n      });\n      const slot = FILLABLE_SLOTS_ENDERCHEST[used_slots];\n      container.setItem(slot, ChestGuiItem.itemStack);\n      page.slots[slot] = {\n        item: ChestGuiItem,\n        action: (ctx) => {\n          ctx.GiveAction();\n          page.slots[slot] = null;\n        },\n      };\n      used_slots++;\n    } catch (error) {}\n  }\n}\n\nnew Page(\"moderation:see\", ViewPlayersFill)\n  .setSlots(\n    [45, 46, 47, 49, 51, 52, 53],\n    new PageItem(MinecraftItemTypes.stainedGlassPane, {\n      nameTag: \"\u00A7r\",\n      data: 15,\n    }),\n    (ctx) => {\n      ctx.SetAction();\n    }\n  )\n  .setSlots(\n    [50],\n    new PageItem(MinecraftItemTypes.arrow, {\n      nameTag: \"\u00A7fBack\",\n    }),\n    (ctx) => {\n      ctx.PageAction(\"home\");\n    }\n  )\n  .setSlots(\n    [48],\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\n    (ctx) => {\n      ctx.CloseAction();\n    }\n  );\n\nnew Page(\"moderation:see_inventory\", ViewPlayerInventoryFill)\n  .setSlots(\n    [45, 46, 47, 49, 51, 52, 53],\n    new PageItem(MinecraftItemTypes.stainedGlassPane, {\n      nameTag: \"\u00A7r\",\n      data: 15,\n    }),\n    (ctx) => {\n      ctx.SetAction();\n    }\n  )\n  .setSlots(\n    [50],\n    new PageItem(MinecraftItemTypes.arrow, {\n      nameTag: \"\u00A7fBack\",\n    }),\n    (ctx) => {\n      ctx.PageAction(\"moderation:see\");\n    }\n  )\n  .setSlots(\n    [48],\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\n    (ctx) => {\n      ctx.CloseAction();\n    }\n  );\n\nnew Page(\"moderation:see_ender_chest\", ViewPlayerEnderChestFill)\n  .setSlots(\n    [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 35, 36, 44, 45, 46, 47, 49,\n      51, 52, 53,\n    ],\n    new PageItem(MinecraftItemTypes.stainedGlassPane, {\n      nameTag: \"\u00A7r\",\n      data: 15,\n    }),\n    (ctx) => {\n      ctx.SetAction();\n    }\n  )\n  .setSlots(\n    [50],\n    new PageItem(MinecraftItemTypes.arrow, {\n      nameTag: \"\u00A7fBack\",\n    }),\n    (ctx) => {\n      ctx.PageAction(\"moderation:see\");\n    }\n  )\n  .setSlots(\n    [48],\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\n    (ctx) => {\n      ctx.CloseAction();\n    }\n  );\n", "import {\n  EnchantmentList,\n  ItemStack,\n  MinecraftBlockTypes,\n  MinecraftItemTypes,\n  world,\n} from \"@minecraft/server\";\nimport { BANNED_BLOCKS, BANNED_ITEMS } from \"../../config/moderation\";\nimport { ENCHANTMENTS } from \"../../config/enchantments\";\nimport { TABLES } from \"../../lib/Database/tables\";\nimport { Npc } from \"../models/Npc\";\nimport { forEachValidPlayer, getRole } from \"../../utils\";\nimport { PlayerLog } from \"../models/PlayerLog\";\nimport { Ban } from \"../models/Ban\";\n\n/**\n * Minecraft Bedrock Anti CBE\n * @license MIT\n * @author Smell of curry\n * @version 1.0.0\n * --------------------------------------------------------------------------\n * This is a anti hacked items, meaning it checks a players inventory every\n * tick then it tests if they have any banned items, then checks if they have\n * items that have hacked enchants and clears the item from inventory\n * --------------------------------------------------------------------------\n */\n\nconst AIR = new ItemStack(MinecraftItemTypes.stick, 0);\n\n/**\n * Enttiies that are not allowed to spawn because they can be used by CBE\n */\nconst CBE_ENTITIES = [\"minecraft:command_block_minecart\"];\n\n/**\n * Stores per world load violation data for players\n */\nconst ViolationCount = new PlayerLog<number>();\n\nforEachValidPlayer((player) => {\n  const cbe_data = TABLES.config.get(\"cbe_config\") ?? {\n    clearItem: true,\n    violationCount: 0,\n    banPlayer: false,\n  };\n  const inventory = player.getComponent(\"inventory\").container;\n  for (let i = 0; i < inventory.size; i++) {\n    const item = inventory.getItem(i);\n    if (!item) continue;\n    const clear = () => {\n      console.warn(`[Protection: CBE]: ${player.name} Has a CBE item!`);\n      if (cbe_data.clearItem)\n        player.getComponent(\"inventory\").container.setItem(i, AIR);\n      const count = (ViolationCount.get(player) ?? 0) + 1;\n      ViolationCount.set(player, count);\n      if (cbe_data.banPlayer && count >= cbe_data.violationCount)\n        new Ban(player, null, null, \"Cbe Detection\");\n    };\n\n    let bannedItems = TABLES.config.get(\"banned_items\") ?? BANNED_ITEMS;\n    if (bannedItems.includes(item.typeId)) return clear();\n\n    const enchs: EnchantmentList =\n      item.getComponent(\"enchantments\").enchantments;\n    const MAX_ENCHS = TABLES.config.get(\"enchantments\") ?? ENCHANTMENTS;\n    /**\n     * List of all enchs that are vaild and on the item\n     * Used to test if a enchant appears multiple times!\n     */\n    const ids: Array<string> = [];\n    for (const ench of enchs) {\n      let maxLevel = MAX_ENCHS[ench.type.id] ?? ench.type.maxLevel;\n      if (enchs.slot == 0 && !enchs.canAddEnchantment(ench)) return clear();\n      if (ench.level > maxLevel) return clear();\n      if (ids.includes(ench.type.id)) return clear();\n      ids.push(ench.type.id);\n    }\n  }\n});\n\nworld.events.beforeDataDrivenEntityTriggerEvent.subscribe(({ id, entity }) => {\n  if (id != \"minecraft:entity_spawned\") return;\n  const kill = () => {\n    try {\n      entity.triggerEvent(\"despawn\");\n      entity.kill();\n    } catch (error) {\n      entity.kill();\n    }\n  };\n  if (CBE_ENTITIES.includes(entity.typeId)) return kill();\n  if (entity.typeId == \"minecraft:npc\" && !Npc.isVaild(entity)) return kill();\n});\n\nworld.events.blockPlace.subscribe(({ block, player }) => {\n  if ([\"moderator\", \"admin\"].includes(getRole(player))) return;\n  const bannedBlocks = TABLES.config.get(\"banned_blocks\") ?? BANNED_BLOCKS;\n  if (bannedBlocks.includes(block.typeId))\n    block.setType(MinecraftBlockTypes.air);\n});\n", "import { Ban } from \"../models/Ban.js\";\nimport { forEachValidPlayer } from \"../../utils\";\n\n/**\n * Minecraft Bedrock Anti Crasher\n * @license MIT\n * @author Smell of curry\n * @version 1.0.0\n * --------------------------------------------------------------------------\n * This anti crasher works by testing if a player has reached a location\n * Horion's crasher teleports the player to 30 Million so we just test for\n * That location and if they are there we kick the player (USES: player.json)\n * --------------------------------------------------------------------------\n */\n\n/**\n * This is the distance where if you go past it will ban you\n */\nconst DISTANCE = 320000;\n\nforEachValidPlayer((player) => {\n  if (\n    Math.abs(player.location.x) > DISTANCE ||\n    Math.abs(player.location.y) > DISTANCE ||\n    Math.abs(player.location.z) > DISTANCE\n  ) {\n    new Ban(player, null, null, \"Hacking: Crasher\");\n  }\n});\n", "import {\n  Dimension,\n  Events,\n  Location,\n  Player,\n  world,\n  XYRotation,\n} from \"@minecraft/server\";\nimport { CURRENT_TICK } from \"../../index.js\";\nimport { PlayerLog } from \"./PlayerLog\";\n\nexport class PreviousLocation {\n  player: Player;\n  location: Location;\n  dimension: Dimension;\n  rotation: XYRotation;\n  tick: number;\n  storage: PlayerLog;\n  events: Object;\n  /**\n   * Saves a constructs a new saved location of a player\n   */\n  constructor(player: Player, tick: number, storage: PlayerLog) {\n    this.player = player;\n    this.location = player.location;\n    this.dimension = player.dimension;\n    this.rotation = player.rotation;\n    this.tick = tick;\n    this.storage = storage;\n\n    this.events = {\n      playerLeave: world.events.playerLeave.subscribe(({ playerName }) => {\n        if (playerName == this.player.name) this.expire();\n      }),\n    };\n\n    this.storage.set(player, this);\n  }\n\n  /**\n   * Teleports the player back to the previous location\n   */\n  back() {\n    this.player.teleport(\n      this.location,\n      this.dimension,\n      this.rotation.x,\n      this.rotation.y\n    );\n  }\n\n  /**\n   * Updates this save to a new location\n   */\n  update() {\n    this.tick = CURRENT_TICK;\n    this.location = this.player.location;\n    this.dimension = this.player.dimension;\n    this.rotation = this.player.rotation;\n  }\n\n  /**\n   * Expires this previous location\n   */\n  expire() {\n    this.storage.delete(this.player);\n    for (const key in this.events) {\n      // @ts-ignore\n      world.events[key as keyof Events].unsubscribe(this.events[key]);\n    }\n  }\n}\n", "import { PlayerLog } from \"../models/PlayerLog.js\";\nimport { forEachValidPlayer } from \"../../utils\";\nimport { PreviousLocation as PrevLo } from \"../models/PreviousLocation.js\";\nimport {\n  ItemStack,\n  Player,\n  PlayerInventoryComponentContainer,\n} from \"@minecraft/server\";\n\n/**\n * Minecraft Bedrock Anti Fly\n * @license MIT\n * @author Smell of curry\n * @author moisesgamingtv9\n * @version 1.0.0\n * --------------------------------------------------------------------------\n * This anti fly works by detecting horizontal velocity, bassicly when\n * the player has reached the FLYING_VELOCITY they are considered flying And\n * if they are considered flying for 1 second they will be teleported back.\n * --------------------------------------------------------------------------\n */\n\n/**\n * Stores Last Previous grounded location\n */\nexport const log = new PlayerLog();\n\n/**\n * The Velocity of the player when there flying\n */\nconst FLYING_VELOCITY = 0.9;\n\n/**\n * The max ammount of time in ticks you can \"fly\" for\n */\nconst FLY_TIME = 20;\n\n/**\n * If this is true it will damage the player when they get tped back\n */\nconst DAMAGE = true;\n\n/**\n * If a player has one of these tags then the proccess stops for them\n */\nconst TAGS = [\"gliding\", \"riding\", \"levitating\", \"swimming\"];\n\n/**\n * Gets a players held item\n * @example getHeldItem(Player);\n */\nfunction getHeldItem(player: Player): ItemStack | null {\n  const inventory: PlayerInventoryComponentContainer = player.getComponent(\n    \"minecraft:inventory\"\n  ).container;\n  return inventory.getItem(player.selectedSlot);\n}\n\nforEachValidPlayer((player, { currentTick }) => {\n  if (player.getTags().some((tag) => TAGS.includes(tag))) return;\n  const get = () => log.get(player) ?? new PrevLo(player, currentTick, log);\n  const velocity = Math.sqrt(player.velocity.x ** 2 + player.velocity.z ** 2);\n  if (player.hasTag(\"on_ground\")) return get().update();\n  if (velocity < FLYING_VELOCITY) return;\n  if (getHeldItem(player)?.typeId == \"minecraft:trident\") return;\n  if (currentTick - get().tick < FLY_TIME) return;\n  // Player is flying\n  get().back();\n  if (DAMAGE) {\n    try {\n      player.runCommand(`damage @s 4 fly_into_wall`);\n    } catch (error) {}\n  }\n}, 20);\n", "import { GameMode, world } from \"@minecraft/server\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { setTickInterval } from \"../../lib/Scheduling/utils.js\";\nimport { getRole } from \"../../utils.js\";\nimport { Ban } from \"../models/Ban.js\";\nimport { PlayerLog } from \"../models/PlayerLog.js\";\n\n/**\n * The gamemode that you cannot be in unless you have staff tag\n */\nconst ILLEGLE_GAMEMODE = GameMode.creative;\n\n/**\n * Stores per world load violation data for players\n */\nconst ViolationCount = new PlayerLog<number>();\n\nsetTickInterval(() => {\n  const gamemode_config = TABLES.config.get(\"gamemode_config\") ?? {\n    setToSurvival: true,\n    clearPlayer: true,\n    violationCount: 0,\n    banPlayer: false,\n  };\n  for (const player of world.getPlayers({ gameMode: ILLEGLE_GAMEMODE })) {\n    if ([\"moderator\", \"admin\", \"builder\"].includes(getRole(player))) continue;\n    try {\n      if (gamemode_config.setToSurvival) player.runCommand(`gamemode s`);\n      if (gamemode_config.clearPlayer) player.runCommand(`clear @s`);\n    } catch (error) {}\n    const count = (ViolationCount.get(player) ?? 0) + 1;\n    ViolationCount.set(player, count);\n    if (gamemode_config.banPlayer && count >= gamemode_config.violationCount)\n      new Ban(player, null, null, \"Invaild Gamemode\");\n  }\n}, 20);\n", "import { world } from \"@minecraft/server\";\nimport { TABLES } from \"../../lib/Database/tables\";\nimport { kick } from \"../../utils\";\n\n/**\n * If a player is using this name we know there using toolbox\n */\nconst TOOLBOX_NAME = `\u00A7c\u00A7k\u00A7m\u00A7A\u00A7r\u00A7cToolbox Gamer\u00A7k\u00A7mA\u00A7r`;\n\nworld.events.playerJoin.subscribe(({ player }) => {\n  const fail = () =>\n    kick(player, [\n      `\u00A7cYou have been kicked!`,\n      `\u00A7aReason: \u00A7f'${player.name}' is Detected for nameSpoof`,\n      `\u00A7fThis Server requires you to have a valid gamertag!`,\n    ]);\n  if (player.name == TOOLBOX_NAME) return fail();\n  if ([...world.getPlayers()].filter((p) => p.name == player.name).length > 1)\n    return fail();\n  if ((TABLES.ids.get(player.name) ?? player.id) != player.id) return fail();\n\n  // Player Probably isnt namespoofing\n});\n", "import { world, Location } from \"@minecraft/server\";\nimport { setTickTimeout } from \"../../lib/Scheduling/utils.js\";\nimport { BLOCK_CONTAINERS } from \"../../config/moderation\";\nimport { PlayerLog } from \"../models/PlayerLog.js\";\nimport { getRole } from \"../../utils.js\";\nimport { CONTAINER_LOCATIONS } from \"../managers/containers.js\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { Ban } from \"../models/Ban.js\";\n\n/**\n * Minecraft Bedrock Anti Nuker\n * @license MIT\n * @author Smell of curry\n * @version 1.0.0\n * --------------------------------------------------------------------------\n * This anti nuker works by loging everytime a player breaks a block\n * Then the next time they break a block it tests the time from now to then\n * And if they broke a block in 50 miliseconds than we place that block back\n * --------------------------------------------------------------------------\n */\n\n/**\n * The log of the players break times\n */\nconst log = new PlayerLog();\n\n/**\n * if a block is broken faster than this time it is considered hacking\n */\nconst IMPOSSIBLE_BREAK_TIME = 70;\n\n/**\n * When breaking vegitation blocks it could cause a false trigger\n * so when a block gets broken and it has one of the block tags\n * it gets skipped and doesnt count in the nuker event\n *\n * @link https://wiki.bedrock.dev/blocks/block-tags.html\n */\nconst VAILD_BLOCK_TAGS = [\n  \"snow\",\n  \"lush_plants_replaceable\",\n  \"azalea_log_replaceable\",\n  \"minecraft:crop\",\n  \"fertilize_area\",\n];\n\n/**\n * A list of all the blocks that are impossible to break unless you have hacks\n */\nconst IMPOSSIBLE_BREAKS = [\n  \"minecraft:water\",\n  \"minecraft:flowing_water\",\n  \"minecraft:lava\",\n  \"minecraft:flowing_lava\",\n  \"minecraft:bedrock\",\n];\n\n/**\n * Stores per world load violation data for players\n */\nconst ViolationCount = new PlayerLog<number>();\n\nworld.events.blockBreak.subscribe(\n  ({ block, brokenBlockPermutation, dimension, player }) => {\n    if ([\"moderator\", \"admin\"].includes(getRole(player))) return;\n    if (block.getTags().some((tag) => VAILD_BLOCK_TAGS.includes(tag))) return;\n    const old = log.get(player);\n    log.set(player, Date.now());\n    if (!old) return;\n\n    if (IMPOSSIBLE_BREAKS.includes(block.typeId)) return;\n    if (old < Date.now() - IMPOSSIBLE_BREAK_TIME) return;\n    const nuker_data = TABLES.config.get(\"nuker_data\") ?? {\n      violationCount: 0,\n      banPlayer: false,\n    };\n    const count = (ViolationCount.get(player) ?? 0) + 1;\n    ViolationCount.set(player, count);\n    if (nuker_data.banPlayer && count >= nuker_data.violationCount)\n      new Ban(player, null, null, \"Using Nuker\");\n\n    // setting block back\n    dimension\n      .getBlock(block.location)\n      .setPermutation(brokenBlockPermutation.clone());\n    // setting chest inventory back\n    if (BLOCK_CONTAINERS.includes(brokenBlockPermutation.type.id)) {\n      const OLD_INVENTORY = CONTAINER_LOCATIONS[JSON.stringify(block.location)];\n      if (OLD_INVENTORY) {\n        OLD_INVENTORY.load(block.getComponent(\"inventory\").container);\n      }\n    }\n    // killing dropped items\n    setTickTimeout(() => {\n      [\n        ...dimension.getEntities({\n          maxDistance: 2,\n          type: \"minecraft:item\",\n          location: new Location(\n            block.location.x,\n            block.location.y,\n            block.location.z\n          ),\n        }),\n      ].forEach((e) => e.kill());\n    }, 0);\n  }\n);\n", "import { world } from \"@minecraft/server\";\r\nimport { BLOCK_CONTAINERS, CHECK_SIZE } from \"../../config/moderation\";\r\nimport { setTickInterval } from \"../../lib/Scheduling/utils\";\r\nimport { IContainerLocation } from \"../../types\";\r\nimport { locationToBlockLocation } from \"../../utils\";\r\nimport { BlockInventory } from \"../models/BlockInventory\";\r\n\r\n/**\r\n * storage of all container locations in the world\r\n */\r\nexport let CONTAINER_LOCATIONS: IContainerLocation = {};\r\n\r\nsetTickInterval(() => {\r\n  CONTAINER_LOCATIONS = {};\r\n  for (const player of world.getPlayers()) {\r\n    const blockLoc = locationToBlockLocation(player.location);\r\n    const pos1 = blockLoc.offset(CHECK_SIZE.x, CHECK_SIZE.y, CHECK_SIZE.z);\r\n    const pos2 = blockLoc.offset(-CHECK_SIZE.x, -CHECK_SIZE.y, -CHECK_SIZE.z);\r\n\r\n    for (const location of pos1.blocksBetween(pos2)) {\r\n      if (location.y < -64) continue;\r\n      const block = player.dimension.getBlock(location);\r\n      if (!BLOCK_CONTAINERS.includes(block.typeId)) continue;\r\n      CONTAINER_LOCATIONS[JSON.stringify(location)] = new BlockInventory(\r\n        block.getComponent(\"inventory\").container\r\n      );\r\n    }\r\n  }\r\n}, 100);\r\n", "import { BlockInventoryComponentContainer, ItemStack } from \"@minecraft/server\";\n\nexport class BlockInventory {\n  emptySlotsCount: number;\n  size: number;\n  items: Array<ItemStack>;\n  /**\n   * Coverts a blockInventoryComponentContainer and saves it\n   * @param {BlockInventoryComponentContainer} inventory\n   */\n  constructor(inventory: BlockInventoryComponentContainer) {\n    this.emptySlotsCount = inventory.emptySlotsCount;\n    this.size = inventory.size;\n    this.items = [];\n    for (let i = 0; i < this.size; i++) {\n      this.items[i] = inventory.getItem(i);\n    }\n  }\n\n  /**\n   * Loads this inventory onto a BlockInventoryComponentContainer\n   * @param {BlockInventoryComponentContainer} block block to load on\n   */\n  load(block: BlockInventoryComponentContainer) {\n    for (let i = 0; i < block.size; i++) {\n      if (!this.items[i]) continue;\n      block.setItem(i, this.items[i]);\n    }\n  }\n}\n", "import { world } from \"@minecraft/server\";\r\nimport { PREFIX } from \"../../config/commands\";\r\nimport { TABLES } from \"../../lib/Database/tables\";\r\nimport { getRole } from \"../../utils\";\r\nimport { Mute } from \"../models/Mute\";\r\nimport { PlayerLog } from \"../models/PlayerLog\";\r\n\r\nconst previousMessage = new PlayerLog<string>();\r\n\r\n/**\r\n * Stores per world load violation data for players\r\n */\r\nconst ViolationCount = new PlayerLog<number>();\r\n\r\nworld.events.beforeChat.subscribe((data) => {\r\n  if (data.message.startsWith(PREFIX)) return;\r\n  if ([\"admin\", \"moderator\"].includes(getRole(data.sender))) return;\r\n  const spam_config = TABLES.config.get(\"spam_config\") ?? {\r\n    repeatedMessages: true,\r\n    zalgo: true,\r\n    violationCount: 0,\r\n    permMutePlayer: false,\r\n  };\r\n  const isSpam = () => {\r\n    const count = (ViolationCount.get(data.sender) ?? 0) + 1;\r\n    ViolationCount.set(data.sender, count);\r\n    if (spam_config.permMutePlayer && count >= spam_config.violationCount)\r\n      new Mute(data.sender, null, null, \"Reached Violation count\");\r\n  };\r\n  if (\r\n    spam_config.repeatedMessages &&\r\n    previousMessage.get(data.sender) == data.message\r\n  ) {\r\n    data.cancel = true;\r\n    isSpam();\r\n    return data.sender.tell(`\u00A7cRepeated message detected!`);\r\n  }\r\n  if (spam_config.zalgo && /%CC%/g.test(encodeURIComponent(data.message))) {\r\n    data.cancel = true;\r\n    isSpam();\r\n    return data.sender.tell(\r\n      `\u00A7cYou message contains some type of zalgo and cannot be sent!`\r\n    );\r\n  }\r\n  previousMessage.set(data.sender, data.message);\r\n});\r\n", "import { Player, world } from \"@minecraft/server\";\r\nimport { setRole } from \"../../utils\";\r\n\r\nlet e = world.events.beforeDataDrivenEntityTriggerEvent.subscribe((data) => {\r\n  if (world.getDynamicProperty(\"roleHasBeenSet\"))\r\n    return world.events.beforeDataDrivenEntityTriggerEvent.unsubscribe(e);\r\n  if (!(data.entity instanceof Player)) return;\r\n  if (data.id != \"rubedo:becomeAdmin\") return;\r\n  setRole(data.entity, \"admin\");\r\n  world.setDynamicProperty(\"roleHasBeenSet\", true);\r\n  world.setDynamicProperty(\"worldsOwner\", data.entity.id);\r\n  data.entity.tell(\r\n    `\u00A7l\u00A7cYou have been given admin, the function start will not work anymore!!!!`\r\n  );\r\n});\r\n", "import { system } from \"@minecraft/server\";\r\n\r\nsystem.events.beforeWatchdogTerminate.subscribe((data) => {\r\n  data.cancel = true;\r\n  console.warn(`WATCHDOG TRIED TO CRASH = ${data.terminateReason}`);\r\n});\r\n", "import {\r\n  DynamicPropertiesDefinition,\r\n  EntityTypes,\r\n  MinecraftEntityTypes,\r\n  world,\r\n} from \"@minecraft/server\";\r\nimport { ENTITY_IDENTIFER } from \"../../config/database\";\r\nimport { OBJECTIVES } from \"../../config/objectives\";\r\nimport { runCommand } from \"../../utils\";\r\n\r\nworld.events.worldInitialize.subscribe(({ propertyRegistry }) => {\r\n  /**\r\n   * Loads Ticking Area\r\n   */\r\n  runCommand(`tickingarea add 0 0 0 0 0 0 db true`);\r\n\r\n  let def = new DynamicPropertiesDefinition();\r\n  def.defineString(\"name\", 30);\r\n  def.defineNumber(\"index\");\r\n  propertyRegistry.registerEntityTypeDynamicProperties(\r\n    def,\r\n    EntityTypes.get(ENTITY_IDENTIFER)\r\n  );\r\n\r\n  let def2 = new DynamicPropertiesDefinition();\r\n  def2.defineString(\"role\", 30);\r\n  propertyRegistry.registerEntityTypeDynamicProperties(\r\n    def2,\r\n    MinecraftEntityTypes.player\r\n  );\r\n\r\n  let def3 = new DynamicPropertiesDefinition();\r\n  def3.defineBoolean(\"roleHasBeenSet\");\r\n  def3.defineString(\"worldsOwner\", 100);\r\n  def3.defineBoolean(\"isLockDown\");\r\n  propertyRegistry.registerWorldDynamicProperties(def3);\r\n\r\n  for (const obj of OBJECTIVES) {\r\n    world.scoreboard.addObjective(obj.objective, obj.displayName ?? \"\");\r\n  }\r\n});\r\n", "/*\n|--------------------------------------------------------------------------\n| Objectives\n|--------------------------------------------------------------------------\n|\n| This is a list of all objectives this pack uses\n| please add any objective to this list so it can be added at world creation\n| make sure to add them beofre sending pack to others and new worlds.\n|\n*/\ninterface IObjective {\n  objective: string;\n  displayName?: string;\n}\n\nexport const OBJECTIVES: Array<IObjective> = [];\n", "import { Player, world } from \"@minecraft/server\";\r\nimport { beforeChat } from \"../../lib/Events/beforeChat\";\r\n\r\n/**\r\n * The prefix that is added before a rank tag\r\n * @example `/tag @s add \"RANK_PREFIX\"member`\r\n */\r\nconst RANK_PREFIX = \"rank:\";\r\n\r\n/**\r\n * The default Rank that the player has in chat with no ranks\r\n */\r\nconst DEFAULT_RANK = \"\u00A7bMember\";\r\n\r\n/**\r\n * Gets chat ranks from a player\r\n * @param player\r\n * @returns ranks player has\r\n */\r\nfunction getRanks(player: Player): string[] {\r\n  const ranks = player\r\n    .getTags()\r\n    .map((v) => {\r\n      if (!v.startsWith(RANK_PREFIX)) return null;\r\n      return v.substring(RANK_PREFIX.length);\r\n    })\r\n    .filter((x) => x);\r\n  return ranks.length == 0 ? [DEFAULT_RANK] : ranks;\r\n}\r\n\r\nbeforeChat.subscribe((data) => {\r\n  data.sendToTargets = true;\r\n  data.targets = [];\r\n  const ranks = getRanks(data.sender).join(\"\u00A7r\u00A7l\u00A78][\u00A7r\");\r\n  const message = data.message;\r\n  world.say(`\u00A7r\u00A7l\u00A78[\u00A7r${ranks}\u00A7r\u00A7l\u00A78]\u00A7r\u00A77 ${data.sender.name}:\u00A7r ${message}`);\r\n});\r\n", "console.warn(`----- Importing Plugins -----`);\r\nimport \"./ChatRanks/index\";\r\n"],
  "mappings": "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ACA,0BACA,oBACA,qBACA,0BACA,oBACA,gCACA,4BACA,mCACA,4BACA,yBACA,8BACA,0BACA,mBACA,oBACA,0BACA,kCACA,uBACA,yCACA,gCACA,0BACA,4BACA,8BACA,6CACA,0CACA,uBACA,0BACA,0BACA,6BACA,6BACA,0BACA,mCACA,qBACA,4BACA,0BACA,8BACA,gCACA,kCACA,8BACA,kCACA,8BACA,uCACA,wBACA,wCACA,uCACA,iBACA,8BACA,6BACA,mCACA,+BACA,8BACA,qCACA,wBACA,uBACA,6BACA,+BACA,gCACA,6BACA,2CACA,iBACA,yBACA,0BACA,0BACA,2BACA,wBACA,4BACA,iCACA,uBACA,4BACA,2BACA,+BACA,uBACA,4BACA,+BACA,oCACA,6BACA,4BACA,2BACA,qBACA,wBACA,yBACA,8BACA,6BACA,6BACA,qBACA,0BACA,4BACA,sBACA,0BACA,0BACA,uBACA,8BACA,+BACA,4BACA,uBACA,4BACA,wBACA,2BACA,6BACA,sBACA,gCACA,6BACA,uBACA,uBACA,+BACA,6BACA,6BACA,uBACA,6BACA,mBACA,iCACA,6BACA,iBACA,0BACA,wBACA,8BACA,uCACA,wBACA,8BACA,6BACA,uBACA,4BACA,iCACA,qBACA,uBACA,wBACA,gCACA,wBACA,yBACA,wBACA,2BACA,0BACA,sBACA,0BACA,6BACA,4CACA,4BACA,6BACA,8BACA,0BACA,mCACA,6BACA,+BACA,iCACA,iCACA,+BACA,iCACA,kDACA,4CACA,2CACA,mBACA,qBACA,wBACA,+BACA,+BACA,6BACA,8BACA,iCACA,yBACA,6BACA,6BACA,8BACA,mCACA,oCACA,oCACA,oCACA,0BACA,oCACA,sBACA,sBACA,sBACA,0BACA,6BACA,iCACA,4BACA,8BACA,iCACA,qCACA,+BACA,4BACA,sBACA,sBACA,qBACA,sBACA,sBACA,oBACA,6BACA,iCACA,6BACA,4BACA,4BACA,0BACA,qCACA,wCACA,wBACA,4BACA,8BACA,4BACA,2BACA,2BACA,8B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",
  "names": ["ItemStack", "MinecraftItemTypes", "world", "world", "PREFIX", "Location", "world", "BlockLocation", "MAX_DATABASE_STRING_SIZE", "ENTITY_IDENTIFER", "ENTITY_LOCATION", "ItemStack", "MinecraftItemTypes", "chunkString", "str", "length", "world", "Player", "BlockLocation", "MinecraftBlockTypes", "MinecraftDimensionTypes", "DEFAULT_REGION_PERMISSIONS", "DOORS_SWITCHES", "BLOCK_CONTAINERS", "REGIONS", "REGIONS_HAVE_BEEN_GRABBED", "LOWEST_Y_VALUE", "HIGEST_Y_VALUE", "betweenXYZ", "XYZa", "XYZb", "XYZc", "c", "i", "Region", "regions", "TABLES", "region", "r", "blockLocation", "dimensionId", "from", "to", "permissions", "key", "DEFAULT_REGION_PERMISSIONS", "loadRegionDenys", "entity", "value", "ChangePlayerRoleTask", "TABLES", "playerName", "t", "role", "tasks", "MessageFormData", "MessageForm", "title", "body", "MessageFormData", "text", "callback", "player", "response", "DIMENSIONS", "world", "MinecraftDimensionTypes", "kick", "player", "message", "onFail", "isServerOwner", "error", "getRole", "player", "Player", "TABLES", "setRole", "value", "inGamePlayer", "world", "p", "ChangePlayerRoleTask", "isServerOwner", "isLockedDown", "setLockDown", "val", "loadRegionDenys", "region", "Region", "loc1", "BlockLocation", "loc2", "blockLocation", "DIMENSIONS", "MinecraftBlockTypes", "CALLBACKS", "forEachValidPlayer", "callback", "delay", "tick", "players", "i", "CALLBACK", "runCommand", "command", "dimension", "debug", "durationToMs", "duration", "values", "ms", "value", "length", "unit", "msToTime", "locationToBlockLocation", "loc", "BlockLocation", "confirmAction", "player", "action", "onConfirm", "onCancel", "MessageForm", "Database", "string", "name", "index", "entity", "DIMENSIONS", "ENTITY_IDENTIFER", "ENTITY_LOCATION", "inv", "defaultItem", "ItemStack", "MinecraftItemTypes", "slot", "value", "item", "ens", "e", "data", "dataSplit", "chunkString", "MAX_DATABASE_STRING_SIZE", "i", "key", "status", "TABLES", "Database", "fetch", "playerName", "world", "plr", "LiteralArgumentType", "name", "value", "StringArgumentType", "IntegerArgumentType", "FloatArgumentType", "LocationArgumentType", "BooleanArgumentType", "PlayerArgumentType", "fetch", "TargetArgumentType", "ArrayArgumentType", "types", "DurationArgumentType", "PlayerNameArgumentType", "TABLES", "ArgumentTypes", "CommandCallback", "data", "text", "getChatAugments", "message", "prefix", "e", "commandNotFound", "player", "command", "noPerm", "commandSyntaxFail", "baseCommand", "args", "i", "PREFIX", "types", "c", "LiteralArgumentType", "parseLocationAugs", "x", "y", "z", "location", "viewVector", "locations", "viewVectors", "a", "arg", "r", "b", "index", "Location", "sendCallback", "cmdArgs", "event", "lastArg", "argsToReturn", "LocationArgumentType", "CommandCallback", "COMMANDS", "world", "data", "PREFIX", "args", "getChatAugments", "command", "c", "commandNotFound", "noPerm", "verifiedCommands", "getArg", "start", "i", "arg", "v", "commandSyntaxFail", "sendCallback", "Player", "world", "GUI_ITEM", "ENTITY_INVENTORY", "world", "TIMEOUTS", "Timeout", "callback", "tick", "loop", "id", "currentTick", "sleep", "tick", "resolve", "setTickTimeout", "callback", "Timeout", "setTickInterval", "world", "CALLBACKS", "MAPPED_INVENTORYS", "PREVIOUS_CHANGE", "getSlotChanges", "entity", "oldInv", "newInv", "changes", "i", "change_data", "getItemUid", "item", "data", "mapInventory", "container", "inventory", "setTickInterval", "callback", "DIMENSIONS", "change", "onEntityInventorySlotChange", "entities", "key", "world", "PlayerLog", "data", "player", "value", "CHESTGUIS", "PAGES", "CHEST_OPEN", "PlayerLog", "getHeldItem", "player", "clearPlayersPointer", "ItemToClear", "inventory", "itemsToLoad", "i", "item", "e", "getItemAtSlot", "entity", "slot", "ItemGrabbedCallback", "gui", "slot", "change", "text", "item", "db", "page", "extras", "form", "sleep", "ChestGUI", "player", "ENTITY_INVENTORY", "world", "CHEST_OPEN", "onEntityInventorySlotChange", "entity", "change", "pageId", "extras", "c", "AIR", "PAGES", "page", "slot", "clearPlayersPointer", "getItemAtSlot", "ItemGrabbedCallback", "CHESTGUIS", "ItemStack", "PageItem", "itemType", "components", "itemStack", "enchantments", "enchantment", "DefaultFill", "entity", "page", "extras", "container", "i", "slot", "AIR", "Page", "id", "fillType", "DefaultFill", "PAGES", "slot", "item", "action", "data", "MinecraftItemTypes", "HOME_PAGE", "Page", "PageItem", "ctx", "world", "data", "player", "getHeldItem", "GUI_ITEM", "CHESTGUIS", "ChestGUI", "Player", "CHEST_OPEN", "setTickInterval", "vaildIds", "c", "entity", "DIMENSIONS", "ENTITY_INVENTORY", "text", "a", "b", "playerName", "duration", "reason", "name", "expire", "Command", "data", "type", "depth", "parent", "player", "LiteralArgumentType", "COMMANDS", "cmd", "name", "StringArgumentType", "IntegerArgumentType", "types", "ArrayArgumentType", "BooleanArgumentType", "LocationArgumentType", "callback", "Player", "Ban", "player", "duration", "reason", "by", "id", "Player", "TABLES", "data", "durationToMs", "ban", "ctx", "player", "duration", "reason", "by", "TABLES", "confirmAction", "Ban", "text", "root", "Command", "getRole", "ArgumentTypes", "playerName", "banData", "bans", "msToTime", "dbcm", "Command", "player", "getRole", "ctx", "table", "key", "data", "TABLES", "error", "value", "Command", "player", "getRole", "ArgumentTypes", "ctx", "i", "Freeze", "player", "reason", "data", "TABLES", "root", "Command", "player", "getRole", "ArgumentTypes", "ctx", "reason", "Freeze", "playerName", "freeze", "TABLES", "freze", "freezes", "text", "CommandNameArgumentType", "name", "value", "COMMANDS", "c", "sendCommandType", "baseCommand", "args", "player", "PREFIX", "a", "sendArguments", "bc", "p", "child", "sendPageHeader", "maxPages", "getMaxPages", "cmds", "root", "Command", "ctx", "cmd", "command", "world", "Command", "player", "getRole", "ctx", "isLockedDown", "setLockDown", "confirmAction", "text", "world", "kick", "Mute", "player", "TABLES", "duration", "reason", "by", "msLength", "durationToMs", "data", "root", "Command", "player", "getRole", "ArgumentTypes", "ctx", "duration", "reason", "Mute", "playerName", "mute", "TABLES", "mutes", "text", "msToTime", "Npc", "entity", "NPC_LOCATIONS", "l", "TABLES", "key", "location", "dimension", "data", "clearNpcLocations", "Command", "player", "getRole", "ctx", "Npc", "world", "Command", "ctx", "pingTick", "deltaTime", "BlockLocation", "command", "Command", "player", "getRole", "ctx", "from_x", "from_z", "to_x", "to_z", "Region", "loc", "BlockLocation", "r", "regions", "region", "permission", "key", "value", "entityCommands", "entity", "currentAllowedEntitys", "v", "ROLES", "StringIsNumber", "value", "ToArray", "enumme", "key", "root", "Command", "player", "getRole", "isServerOwner", "ArgumentTypes", "ROLES", "ctx", "playerName", "role", "setRole", "ActionFormData", "ActionForm", "title", "body", "ActionFormData", "text", "iconPath", "callback", "player", "response", "ItemTypes", "MinecraftBlockTypes", "VERSION", "APPEAL_LINK", "ENCHANTMENTS", "BANNED_ITEMS", "BANNED_BLOCKS", "BLOCK_CONTAINERS", "CHECK_SIZE", "ModalFormData", "FormCallback", "form", "player", "callback", "message", "MessageForm", "ModalForm", "title", "ModalFormData", "label", "options", "defaultValueIndex", "minimumValue", "maximumValue", "valueStep", "defaultValue", "placeholderText", "player", "callback", "response", "FormCallback", "v", "showPage1", "player", "ModalForm", "ctx", "method", "id", "ItemTypes", "items", "TABLES", "BANNED_ITEMS", "p", "showPage2", "MinecraftBlockTypes", "blocks", "BANNED_BLOCKS", "showPage3", "ENCHANTMENTS", "enchantment", "levelstring", "level", "enchants", "showPage4", "APPEAL_LINK", "link", "showPage1", "player", "ActionForm", "showPage2", "showPage3", "showPage4", "showPage5", "spam_config", "TABLES", "ModalForm", "ctx", "repeatedMessages", "zalgo", "violationCount", "permMutePlayer", "cbe_data", "clearItem", "banPlayer", "gamemode_data", "setToSurvival", "clearPlayer", "nuker_data", "showHome", "player", "ActionForm", "showPage1", "showPage2", "showPage3", "showPage4", "Command", "player", "getRole", "ctx", "showHome", "world", "Command", "player", "getRole", "ctx", "say", "world", "Command", "ctx", "VERSION", "forEachValidPlayer", "player", "banData", "TABLES", "kick", "msToTime", "APPEAL_LINK", "error", "Location", "forEachValidPlayer", "player", "freezeData", "TABLES", "Location", "DIMENSIONS", "world", "CALLBACKS", "world", "data", "PREFIX", "callback", "beforeChat", "key", "beforeChat", "data", "muteData", "Mute", "TABLES", "text", "BlockLocation", "world", "setTickInterval", "loadRegionDenys", "world", "data", "getRole", "region", "Region", "block", "DOORS_SWITCHES", "BLOCK_CONTAINERS", "i", "bL", "BlockLocation", "entity", "DIMENSIONS", "forEachValidPlayer", "player", "world", "world", "player", "isLockedDown", "getRole", "kick", "text", "data", "DIMENSIONS", "Mute", "TABLES", "roleToSet", "ChangePlayerRoleTask", "setRole", "Items", "MinecraftItemTypes", "world", "FILLABLE_SLOTS", "FILLABLE_SLOTS_ENDERCHEST", "ViewPlayersFill", "entity", "page", "extras", "container", "i", "slot", "AIR", "player", "world", "item", "PageItem", "MinecraftItemTypes", "ctx", "ViewPlayerInventoryFill", "EnderChestItem", "p", "CHESTGUIS", "e", "inventory", "used_slots", "Items", "ViewPlayerEnderChestFill", "ItemTypes", "ChestGuiItem", "Page", "ItemStack", "MinecraftBlockTypes", "MinecraftItemTypes", "world", "AIR", "ItemStack", "MinecraftItemTypes", "CBE_ENTITIES", "ViolationCount", "PlayerLog", "forEachValidPlayer", "player", "cbe_data", "TABLES", "inventory", "i", "item", "clear", "count", "Ban", "BANNED_ITEMS", "enchs", "MAX_ENCHS", "ENCHANTMENTS", "ids", "ench", "maxLevel", "world", "id", "entity", "kill", "Npc", "block", "getRole", "BANNED_BLOCKS", "MinecraftBlockTypes", "DISTANCE", "forEachValidPlayer", "player", "Ban", "world", "PreviousLocation", "player", "tick", "storage", "world", "playerName", "CURRENT_TICK", "key", "log", "PlayerLog", "FLYING_VELOCITY", "FLY_TIME", "DAMAGE", "TAGS", "getHeldItem", "player", "forEachValidPlayer", "currentTick", "tag", "get", "PreviousLocation", "velocity", "GameMode", "world", "ILLEGLE_GAMEMODE", "GameMode", "ViolationCount", "PlayerLog", "setTickInterval", "gamemode_config", "TABLES", "player", "world", "getRole", "count", "Ban", "world", "TOOLBOX_NAME", "world", "player", "fail", "kick", "p", "TABLES", "world", "Location", "world", "BlockInventory", "inventory", "i", "block", "CONTAINER_LOCATIONS", "setTickInterval", "player", "world", "blockLoc", "locationToBlockLocation", "pos1", "CHECK_SIZE", "pos2", "location", "block", "BLOCK_CONTAINERS", "BlockInventory", "log", "PlayerLog", "IMPOSSIBLE_BREAK_TIME", "VAILD_BLOCK_TAGS", "IMPOSSIBLE_BREAKS", "ViolationCount", "world", "block", "brokenBlockPermutation", "dimension", "player", "getRole", "tag", "old", "nuker_data", "TABLES", "count", "Ban", "BLOCK_CONTAINERS", "OLD_INVENTORY", "CONTAINER_LOCATIONS", "setTickTimeout", "Location", "e", "world", "previousMessage", "PlayerLog", "ViolationCount", "world", "data", "PREFIX", "getRole", "spam_config", "TABLES", "isSpam", "count", "Mute", "Player", "world", "e", "world", "data", "Player", "setRole", "system", "data", "DynamicPropertiesDefinition", "EntityTypes", "MinecraftEntityTypes", "world", "OBJECTIVES", "world", "propertyRegistry", "runCommand", "def", "DynamicPropertiesDefinition", "EntityTypes", "ENTITY_IDENTIFER", "def2", "MinecraftEntityTypes", "def3", "obj", "OBJECTIVES", "world", "RANK_PREFIX", "DEFAULT_RANK", "getRanks", "player", "ranks", "v", "x", "beforeChat", "data", "message", "world", "NPC_LOCATIONS", "clearNpcLocations", "CURRENT_TICK", "AIR", "ItemStack", "MinecraftItemTypes", "world", "data"]
}
