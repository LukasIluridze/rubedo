{
  "version": 3,
  "sources": ["../src/index.ts", "../src/lib/Command/index.ts", "../src/config/commands.ts", "../src/lib/Command/utils.ts", "../src/lib/Command/ArgumentTypes.ts", "../src/config/database.ts", "../src/lib/Database/Database.ts", "../src/lib/Database/utils.ts", "../src/utils.ts", "../src/config/region.ts", "../src/modules/models/Region.ts", "../src/modules/models/Task.ts", "../src/lib/Database/tables.ts", "../src/lib/Command/Callback.ts", "../src/lib/Chest GUI/index.ts", "../src/config/chest.ts", "../src/lib/Scheduling/Timeout.ts", "../src/lib/Scheduling/utils.ts", "../src/lib/Chest GUI/Models/EntityChest.ts", "../src/lib/Events/onSlotChange.ts", "../src/modules/models/PlayerLog.ts", "../src/lib/Chest GUI/utils.ts", "../src/lib/Chest GUI/Models/ItemGrabbedCallback.ts", "../src/lib/Chest GUI/Models/PageItem.ts", "../src/lib/Chest GUI/Models/FillTypes.ts", "../src/lib/Chest GUI/Models/Page.ts", "../src/lib/Chest GUI/pages/home.ts", "../src/lang/text.ts", "../src/lib/Command/Command.ts", "../src/modules/models/Ban.ts", "../src/modules/commands/ban.ts", "../src/modules/commands/database.ts", "../src/modules/commands/ecwipe.ts", "../src/modules/models/Freeze.ts", "../src/modules/commands/freeze.ts", "../src/modules/commands/help.ts", "../src/modules/commands/lockdown.ts", "../src/modules/models/Mute.ts", "../src/modules/commands/mute.ts", "../src/modules/models/Npc.ts", "../src/modules/commands/npc.ts", "../src/modules/commands/ping.ts", "../src/modules/commands/region.ts", "../src/types.ts", "../src/modules/commands/role.ts", "../src/lib/Form/Models/ActionForm.ts", "../src/config/form.ts", "../src/modules/forms/settings.ts", "../src/config/app.ts", "../src/config/enchantments.ts", "../src/config/moderation.ts", "../src/lib/Form/Models/ModelForm.ts", "../src/lib/Form/Models/MessageForm.ts", "../src/lib/Form/Models/FormCallback.ts", "../src/modules/forms/automod.ts", "../src/modules/forms/home.ts", "../src/modules/commands/settings.ts", "../src/modules/commands/vanish.ts", "../src/modules/commands/version.ts", "../src/modules/managers/ban.ts", "../src/modules/managers/freeze.ts", "../src/modules/managers/mute.ts", "../src/modules/managers/region.ts", "../src/modules/events/playerJoin.ts", "../src/modules/pages/see.ts", "../src/modules/protections/cbe.ts", "../src/modules/protections/crasher.ts", "../src/modules/models/PreviousLocation.ts", "../src/modules/protections/fly.ts", "../src/modules/protections/gamemode.ts", "../src/modules/protections/nameSpoof.ts", "../src/modules/protections/nuker.ts", "../src/modules/managers/containers.ts", "../src/modules/models/BlockInventory.ts", "../src/modules/protections/spam.ts", "../src/modules/events/beforeDataDrivenEntityTriggerEvent.ts", "../src/modules/events/beforeWatchdogTerminate.ts", "../src/modules/events/worldInitialize.ts", "../src/config/objectives.ts"],
  "sourcesContent": ["console.warn(`---- STARTING RUBEDO ----`);\nimport {\n  ItemStack,\n  Location,\n  MinecraftItemTypes,\n  world,\n} from \"@minecraft/server\";\nimport \"./lib/Command/index\";\nimport \"./lib/Chest GUI/index\";\nimport \"./modules/commands/import\";\nimport \"./modules/managers/import\";\nimport \"./modules/pages/import\";\nimport \"./modules/protections/import\";\nimport \"./modules/events/import\";\n\n/**\n * Stores npc locations that are verified to allow npcs to spawn in\n */\nexport let NPC_LOCATIONS: Array<Location> = [];\n \nexport function clearNpcLocations() {\n  NPC_LOCATIONS = [];\n}\n\n/**\n * This is the current tick that the server is at\n * this gets tracked to reduce lag for calling it\n */\nexport let CURRENT_TICK: number = null;\n\n/**\n * This is air as a item,\n */\nexport const AIR = new ItemStack(MinecraftItemTypes.stick, 0);\n\nworld.events.tick.subscribe((data) => {\n  if (!CURRENT_TICK) {\n    CURRENT_TICK = data.currentTick;\n  } else {\n    CURRENT_TICK = CURRENT_TICK + 1;\n  }\n});\n", "import { world } from \"@minecraft/server\";\r\nimport { PREFIX } from \"../../config/commands\";\r\nimport type { Command } from \"./Command\";\r\nimport {\r\n  commandNotFound,\r\n  commandSyntaxFail,\r\n  getChatAugments,\r\n  noPerm,\r\n  sendCallback,\r\n} from \"./utils\";\r\n\r\n/**\r\n * An array of all active commands\r\n */\r\nexport const COMMANDS: Command<any>[] = [];\r\n\r\nworld.events.beforeChat.subscribe((data) => {\r\n  if (!data.message.startsWith(PREFIX)) return; // This is not a command\r\n  data.cancel = true;\r\n  const args = getChatAugments(data.message, PREFIX);\r\n  const command = COMMANDS.find(\r\n    (c) =>\r\n      c.depth == 0 &&\r\n      (c.data.name == args[0] || c.data?.aliases?.includes(args[0]))\r\n  );\r\n  if (!command) return commandNotFound(data.sender, args[0]);\r\n  if (!command.data?.requires(data.sender)) return noPerm(data.sender, command);\r\n  args.shift(); // Remove first command so we can look at args\r\n  // Check Args/SubCommands for errors\r\n  const verifiedCommands: Command[] = [];\r\n  const getArg = (start: Command<any>, i: number): string => {\r\n    if (start.children.length > 0) {\r\n      const arg = start.children.find((v) => v.type.matches(args[i]).success);\r\n      if (!arg && !args[i] && start.callback) return;\r\n      if (!arg) return commandSyntaxFail(data.sender, command, start, args, i), \"fail\";\r\n      if (!arg.data?.requires(data.sender))\r\n        return noPerm(data.sender, arg), \"fail\";\r\n      verifiedCommands.push(arg);\r\n      return getArg(arg, i + 1);\r\n    }\r\n  };\r\n  if (getArg(command, 0)) return;\r\n  sendCallback(args, verifiedCommands, data, command);\r\n});\r\n", "/*\n|--------------------------------------------------------------------------\n| Command Prefix\n|--------------------------------------------------------------------------\n|\n| This is the prefix of the commands that are send in chat\n| changing this changes what people have to type in before using\n| a command for instance: -help. (-) is the command prefix.\n|\n*/\nexport const PREFIX = \"-\";\n", "import { BeforeChatEvent, Location, Player, Vector } from \"@minecraft/server\";\nimport { PREFIX } from \"../../config/commands\";\nimport { LiteralArgumentType, LocationArgumentType } from \"./ArgumentTypes\";\nimport { CommandCallback } from \"./Callback\";\nimport type { Command } from \"./Command\";\n\n/**\n * Returns a Before chat events augments\n * @example this.getChatAugments(BeforeChatEvent)\n */\nexport function getChatAugments(\n  message: string,\n  prefix: string\n): Array<string> {\n  return message\n    .slice(prefix.length)\n    .trim()\n    .match(/\"[^\"]+\"|[^\\s]+/g)\n    .map((e) => e.replace(/\"(.+)\"/, \"$1\").toString());\n}\n\n/**\n * Sends a command not found message to a player\n * @param player player to send message to\n */\nexport function commandNotFound(player: Player, command: string) {\n  player.tell({\n    rawtext: [\n      {\n        text: `\u00A7c`,\n      },\n      {\n        translate: `commands.generic.unknown`,\n        with: [`${command}`],\n      },\n    ],\n  });\n}\n\n/**\n * Sends a command not found message to a player\n * @param player player to send message to\n */\nexport function noPerm(player: Player, command: Command) {\n  player.tell({\n    rawtext: [\n      {\n        text: command.data.invaildPermission\n          ? command.data.invaildPermission\n          : `\u00A7cYou do not have perrmission to use \"${command.data.name}\"`,\n      },\n    ],\n  });\n}\n\n/**\n * Sends a syntax failure message to player\n * @param player\n * @param command\n * @param args\n * @param i\n */\nexport function commandSyntaxFail(\n  player: Player,\n  baseCommand: Command,\n  command: Command,\n  args: string[],\n  i: number\n) {\n  player.tell({\n    rawtext: [\n      {\n        text: `\u00A7c`,\n      },\n      {\n        translate: `commands.generic.syntax`,\n        with: [\n          `${PREFIX}${baseCommand.data.name} ${args.slice(0, i).join(\" \")}`,\n          args[i] ?? \" \",\n          args.slice(i + 1).join(\" \"),\n        ],\n      },\n    ],\n  });\n  if (command.children.length > 1 || !args[i]) {\n    // this type could be many things\n    const types = command.children.map((c) =>\n      c.type instanceof LiteralArgumentType ? c.type.name : c.type?.typeName\n    );\n    player.tell(`\u00A7c\"${args[i] ?? \"undefined\"}\" can be: \"${types.join('\", \"')}`);\n  } else {\n    // this type is only 1 thing\n    player.tell(`\u00A7c${command.children[0]?.type?.fail(args[i])}`);\n  }\n}\n\n/**\n * Returns a location of the inputed aguments\n * @example parseLocationAugs([\"~1\", \"3\", \"^7\"], { location: [1,2,3] , viewVector: [1,2,3] })\n */\nexport function parseLocationAugs(\n  [x, y, z]: [x: string, y: string, z: string],\n  { location, viewVector }: { location: Location; viewVector: Vector }\n): Location {\n  if (!x || !y || !x) return null;\n  const locations = [location.x, location.y, location.z];\n  const viewVectors = [viewVector.x, viewVector.y, viewVector.z];\n  const a = [x, y, z].map((arg) => {\n    const r = parseInt(arg.replace(/\\D/g, \"\"));\n    return isNaN(r) ? 0 : r;\n  });\n  const b = [x, y, z].map((arg, index) => {\n    return arg.includes(\"~\")\n      ? a[index] + locations[index]\n      : arg.includes(\"^\")\n      ? a[index] + viewVectors[index]\n      : a[index];\n  });\n  return new Location(b[0], b[1], b[2]);\n}\n\n/**\n * Sends a callback back to the command\n * @param cmdArgs the args that the command used\n * @param args args to use\n */\nexport function sendCallback(\n  cmdArgs: string[],\n  args: Command<any>[],\n  event: BeforeChatEvent,\n  baseCommand: Command<any>\n) {\n  const lastArg = args[args.length - 1] ?? baseCommand;\n  const argsToReturn: any[] = [];\n  for (const [i, arg] of args.entries()) {\n    if (arg.type.name.endsWith(\"*\")) continue;\n    if (arg.type instanceof LocationArgumentType) {\n      argsToReturn.push(\n        parseLocationAugs(\n          [cmdArgs[i], cmdArgs[i + 1], cmdArgs[i + 2]],\n          event.sender\n        )\n      );\n      continue;\n    }\n    if (arg.type instanceof LiteralArgumentType) continue;\n    argsToReturn.push(arg.type.matches(cmdArgs[i]).value ?? cmdArgs[i]);\n  }\n  lastArg.callback(new CommandCallback(event), ...argsToReturn);\n}\n", "import { Player, world } from \"@minecraft/server\";\r\nimport { TABLES } from \"../Database/tables\";\r\n\r\n/**\r\n * Fetch an online players data\r\n */\r\nexport function fetch(playerName: string): Player | null {\r\n  return [...world.getPlayers()].find((plr) => plr.name === playerName);\r\n}\r\n\r\nexport interface IArgumentReturnData<T> {\r\n  /**\r\n   * If this argument matches the value\r\n   */\r\n  success: boolean;\r\n  /**\r\n   * The parsed value that should be passed in command callback\r\n   * if there is no return type this will be null\r\n   */\r\n  value?: T;\r\n}\r\n\r\nexport abstract class IArgumentType {\r\n  /**\r\n   * The return type\r\n   */\r\n  type: any;\r\n  /**\r\n   * The name that the help for this command will see\r\n   * @example \"string\"\r\n   * @example \"Location\"\r\n   * @example \"int\"\r\n   * @example \"number\"\r\n   * @example \"UnitType\"\r\n   */\r\n  typeName: string;\r\n  /**\r\n   * The name this argument is\r\n   */\r\n  name: string = \"name\";\r\n  /**\r\n   * Checks if a value matches this argument type, also\r\n   * returns the corridsponding type\r\n   */\r\n  matches(value: string): IArgumentReturnData<any> {\r\n    return { success: true };\r\n  }\r\n  /**\r\n   * the fail message that should be sent if player fails to meet the matches critera\r\n   * @param value value that was sent\r\n   * @returns what would happen if you didnt enter the right value\r\n   */\r\n  fail(value: string): string {\r\n    return `Value must be of type string!`;\r\n  }\r\n  constructor(name: string = \"any\") {}\r\n}\r\n\r\nexport class LiteralArgumentType implements IArgumentType {\r\n  type: null;\r\n  typeName = \"literal\";\r\n  matches(value: string): IArgumentReturnData<null> {\r\n    return {\r\n      success: this.name == value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `${value} should be ${this.name}!`;\r\n  }\r\n  constructor(public name: string = \"literal\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class StringArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"string\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: value && value != \"\",\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value must be of type string!`;\r\n  }\r\n  constructor(public name: string = \"string\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class IntegerArgumentType implements IArgumentType {\r\n  type: number;\r\n  typeName = \"int\";\r\n  matches(value: string): IArgumentReturnData<number> {\r\n    return {\r\n      success: !isNaN(value as any),\r\n      value: parseInt(value),\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value must be vaild number!`;\r\n  }\r\n  constructor(public name: string = \"integer\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class FloatArgumentType implements IArgumentType {\r\n  type: number;\r\n  typeName = \"float\";\r\n  matches(value: string): IArgumentReturnData<number> {\r\n    return {\r\n      success: Boolean(value?.match(/^\\d+\\.\\d+$/)?.[0]),\r\n      value: parseInt(value),\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value must be vaild float!`;\r\n  }\r\n  constructor(public name: string = \"float\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class LocationArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"location\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: /^([~^]{0,1}(-\\d)?(\\d*)?(\\.(\\d+))?)$/.test(value),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value needs to be a vaild number, value can include: [~,^]`;\r\n  }\r\n  constructor(public name: string = \"location\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class BooleanArgumentType implements IArgumentType {\r\n  type: boolean;\r\n  typeName = \"boolean\";\r\n  matches(value: string): IArgumentReturnData<boolean> {\r\n    return {\r\n      success: Boolean(value?.match(/^(true|false)$/)?.[0]),\r\n      value: value == \"true\" ? true : false,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `\"${value}\" can be either \"true\" or \"false\"`;\r\n  }\r\n  constructor(public name: string = \"boolean\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class PlayerArgumentType implements IArgumentType {\r\n  type: Player;\r\n  typeName = \"playerName\";\r\n  matches(value: string): IArgumentReturnData<Player> {\r\n    return {\r\n      success: fetch(value) ? true : false,\r\n      value: fetch(value),\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `player: \"${value}\", is not in this world`;\r\n  }\r\n  constructor(public name: string = \"player\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class TargetArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"Target\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: Boolean(value?.match(/^(@.|\"[\\s\\S]+\")$/)?.[0]),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `${value} is not a vaild target`;\r\n  }\r\n  constructor(public name: string = \"target\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class ArrayArgumentType<T extends ReadonlyArray<string>>\r\n  implements IArgumentType\r\n{\r\n  type: T[number];\r\n  typeName = \"string\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: this.types.includes(value),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `\"${value}\" must be one of these values: ${this.types.join(\" | \")}`;\r\n  }\r\n  constructor(public name: string = \"array\", public types: T) {\r\n    this.name = name;\r\n    this.types = types;\r\n\r\n    this.typeName = types.join(\" | \").replace(/(.{25})..+/, \"$1...\");\r\n  }\r\n}\r\n\r\nexport class DurationArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"Duration\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: /^(\\d+[hdysmw],?)+$/.test(value),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `\"${value}\" must be a value like \"10d\" or \"3s\" the first part is the length second is unit}`;\r\n  }\r\n  constructor(public name: string) {}\r\n}\r\n\r\nexport class PlayerNameArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"playerName\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    const player = TABLES.ids.get(value);\r\n    return {\r\n      success: player ? true : false,\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `player: \"${value}\" has never played this world before! Tip: if the name has spaces in it use quotes around name!`;\r\n  }\r\n  constructor(public name: string = \"playerName\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport const ArgumentTypes = {\r\n  string: StringArgumentType,\r\n  int: IntegerArgumentType,\r\n  float: FloatArgumentType,\r\n  location: LocationArgumentType,\r\n  boolean: BooleanArgumentType,\r\n  player: PlayerArgumentType,\r\n  target: TargetArgumentType,\r\n  array: ArrayArgumentType,\r\n  duration: DurationArgumentType,\r\n  playerName: PlayerNameArgumentType,\r\n};\r\n", "import { BlockLocation } from \"@minecraft/server\";\n\n/*\n|--------------------------------------------------------------------------\n| Max Databse string size\n|--------------------------------------------------------------------------\n|\n| Here is the max database save size meaing when a save gets made\n| it tests the size of that save and splits up the save depending on this\n| Size. Its releated to minecrafts 32k bit limit.\n|\n*/\nexport const MAX_DATABASE_STRING_SIZE = 32000;\n\n/*\n|--------------------------------------------------------------------------\n| Entity Id\n|--------------------------------------------------------------------------\n|\n| This is the entity id of the database this is what stores the information\n| of the database on its nameTag\n|\n*/\nexport const ENTITY_IDENTIFER = \"rubedo:database\";\n\n/*\n|--------------------------------------------------------------------------\n| Entity Spawn Location\n|--------------------------------------------------------------------------\n|\n| This is the spawn location of the database entitys there will be\n| Multiple entitys at this location for each chunk\n|\n*/\nexport const ENTITY_LOCATION = new BlockLocation(0, -64, 0);\n", "import {\n  ENTITY_IDENTIFER,\n  ENTITY_LOCATION,\n  MAX_DATABASE_STRING_SIZE,\n} from \"../../config/database\";\nimport {\n  Entity,\n  InventoryComponentContainer,\n  ItemStack,\n  MinecraftItemTypes,\n} from \"@minecraft/server\";\nimport { chunkString } from \"./utils\";\nimport { DIMENSIONS } from \"../../utils.js\";\n\nexport class Database<Type = never> {\n  /**\n   * The databse name\n   */\n  name: string;\n  /**\n   * The entitys this database has saved, used for memory and speed\n   */\n  savedEntitys: Array<Entity> | undefined;\n  /**\n   * Stores the information that this databse has saved\n   */\n  MEMORY: any | undefined;\n\n  /**\n   *  Compresses a value into a shorter string\n   * @param string value to compress\n   */\n  static compress(string: string): string {\n    //return LZString.compress(string);\n    return string;\n  }\n  /**\n   *  Compresses a value into a shorter string\n   * @param string value to compress\n   */\n  static decompress(string: string): string {\n    //return LZString.decompress(string);\n    return string;\n  }\n\n  /**\n   * Creates a new Database Entity\n   * @param name the database name\n   * @param index the index this entity is\n   * @returns Entity that was made\n   */\n  static createEntity(name: string, index: number): Entity {\n    let entity = DIMENSIONS.overworld.spawnEntity(\n      ENTITY_IDENTIFER,\n      ENTITY_LOCATION\n    );\n    entity.setDynamicProperty(\"name\", name);\n    entity.setDynamicProperty(\"index\", index);\n    const inv: InventoryComponentContainer =\n      entity.getComponent(\"inventory\").container;\n    const defaultItem = new ItemStack(MinecraftItemTypes.acaciaBoat, 1);\n    if (index == 0) defaultItem.nameTag = \"{}\";\n    inv.setItem(0, defaultItem);\n    return entity;\n  }\n\n  /**\n   * Gets the nameTag of the slot from the entitys inventory\n   * @param entity entity to grab from\n   * @param slot slot value to get\n   */\n  static getInventorySlotName(entity: Entity, slot: number): string {\n    const inv: InventoryComponentContainer =\n      entity.getComponent(\"inventory\").container;\n    return inv.getItem(slot)?.nameTag;\n  }\n\n  /**\n   * Sets the nameTag of the slot from the entitys inventory\n   * @param entity entity to grab from\n   * @param slot slot value to get\n   * @param value the value to set it to\n   */\n  static setInventorySlotName(\n    entity: Entity,\n    slot: number,\n    value: string\n  ): void {\n    const inv: InventoryComponentContainer =\n      entity.getComponent(\"inventory\").container;\n    let item = inv.getItem(slot);\n    item.nameTag = value;\n    return inv.setItem(slot, item);\n  }\n\n  /**\n   * Creates a new Database\n   * @param name max length 16\n   */\n  constructor(name: string) {\n    this.name = name;\n    this.savedEntitys = undefined;\n    this.MEMORY = undefined;\n  }\n\n  /**\n   * Grabs all entitys this database is assocated with\n   */\n  get entitys(): Array<Entity> {\n    if (this.savedEntitys) return this.savedEntitys;\n    const ens = DIMENSIONS.overworld\n      .getEntitiesAtBlockLocation(ENTITY_LOCATION)\n      .filter(\n        (e) =>\n          e.typeId == ENTITY_IDENTIFER && e.getDynamicProperty(\"name\") == this.name\n      );\n    this.savedEntitys = ens;\n    return ens;\n  }\n\n  /**\n   * Grabs the data of this name out of the local database\n   */\n  data() {\n    if (this.MEMORY) return this.MEMORY;\n    if (this.entitys.length == 0) Database.createEntity(this.name, 0);\n\n    // If there is only one entity there is no need to sort the data out\n    if (this.entitys.length == 1) {\n      let data = JSON.parse(\n        Database.decompress(Database.getInventorySlotName(this.entitys[0], 0))\n      );\n      this.MEMORY = data;\n      return data;\n    }\n    let data: any = new Array(this.entitys.length);\n    for (const entity of this.entitys) {\n      let index = entity.getDynamicProperty(\"index\") as number;\n      data[index] = Database.getInventorySlotName(entity, 0);\n    }\n    // idk why this needs try catch but it does :(\n    try {\n      data = JSON.parse(data.join(\"\"));\n    } catch (error) {\n      data = {};\n    }\n    this.MEMORY = data;\n    return data;\n  }\n\n  /**\n   * Saves data into the database\n   * @param data data to save\n   */\n  save(data: any) {\n    this.MEMORY = data;\n    /**\n     * Splits the data into chunks to then save across an array of entitys\n     */\n    const dataSplit = chunkString(\n      Database.compress(JSON.stringify(data)),\n      MAX_DATABASE_STRING_SIZE\n    );\n    if (this.entitys && dataSplit.length == this.entitys.length) {\n      for (let i = 0; i < dataSplit.length; i++) {\n        Database.setInventorySlotName(this.entitys[i], 0, dataSplit[i]);\n      }\n    } else {\n      // there is either no entitys or a diffrent amount\n      this.entitys?.forEach((e) => e?.triggerEvent(\"despawn\"));\n      this.savedEntitys = undefined;\n      for (let i = 0; i < dataSplit.length; i++) {\n        const entity = Database.createEntity(this.name, i);\n        Database.setInventorySlotName(entity, 0, dataSplit[i]);\n      }\n    }\n  }\n\n  /**\n   * Sets a key to a value in this database\n   * @param key key to set\n   * @param value value to set the key to\n   */\n  set(key: string, value: Type) {\n    const data = this.data();\n    data[key] = value;\n    this.save(data);\n  }\n\n  /**\n   * Grabs a value from the database by key\n   * @param key value to grab\n   */\n  get(key: string): Type {\n    return this.data()[key];\n  }\n\n  /**\n   * Check if the key exists in the table\n   * @param key the key to test\n   */\n  has(key: string): boolean {\n    return this.keys().includes(key);\n  }\n\n  /**\n   * Delete the key from the table\n   * @param key the key to test\n   */\n  delete(key: string): boolean {\n    let data = this.data();\n    const status = delete data[key];\n    this.save(data);\n    return status;\n  }\n\n  /**\n   * Returns the number of key/value pairs in the Map object.\n   */\n  size(): number {\n    return this.keys().length;\n  }\n\n  /**\n   * Clear everything in the table\n   */\n  clear(): void {\n    this.save({});\n  }\n\n  /**\n   * Get all the keys in the table\n   */\n  keys(): string[] {\n    return Object.keys(this.data());\n  }\n\n  /**\n   * Get all the values in the table\n   */\n  values(): Type[] {\n    return Object.values(this.data());\n  }\n\n  /**\n   * Gets all the keys and values\n   */\n  getCollection(): Object {\n    return this.data();\n  }\n}\n", "/**\n * Splits a string into chunk sizes\n */\nexport function chunkString(str: string, length: number): string[] {\n  return str.match(new RegExp(\".{1,\" + length + \"}\", \"g\"));\n}\n", "import {\n  world,\n  Player,\n  TickEvent,\n  BlockLocation,\n  MinecraftBlockTypes,\n  Entity,\n  MinecraftDimensionTypes,\n  Location,\n} from \"@minecraft/server\";\nimport type { durationSegment, durtationSegmentType, ROLES } from \"./types\";\nimport { TABLES } from \"./lib/Database/tables\";\nimport { Region } from \"./modules/models/Region.js\";\nimport { ChangePlayerRoleTask } from \"./modules/models/Task\";\nimport type { IplayerTickRegister } from \"./types\";\n\n/**\n * This is to reduce lag when grabbing dimensions keep them set and pre-defined\n */\nexport const DIMENSIONS = {\n  overworld: world.getDimension(MinecraftDimensionTypes.overworld),\n  nether: world.getDimension(MinecraftDimensionTypes.nether),\n  theEnd: world.getDimension(MinecraftDimensionTypes.theEnd),\n  \"minecraft:overworld\": world.getDimension(MinecraftDimensionTypes.overworld),\n  \"minecraft:nether\": world.getDimension(MinecraftDimensionTypes.nether),\n  \"minecraft:the_end\": world.getDimension(MinecraftDimensionTypes.theEnd),\n};\n\n/**\n * Kicks a player\n * @param player player who should be kicked\n * @param message the message that should be show to player\n * @param onFail this needs to be used for loops to unregister\n */\nexport function kick(\n  player: Player,\n  message: Array<String> = [],\n  onFail?: () => void\n): void {\n  if (isServerOwner(player)) {\n    console.warn(`[WARNING]: TRIED TO KICK OWNER`);\n    player.tell(`You have been tried to kick, but you cant!`);\n    return onFail?.();\n  }\n  try {\n    player.runCommand(`kick \"${player.nameTag}\" \u00A7r${message.join(\"\\n\")}`);\n    player.triggerEvent(\"kick\");\n  } catch (error) {\n    if (!/\"statusCode\":-2147352576/.test(error)) return;\n    // This function just tried to kick the owner\n    if (onFail) onFail();\n  }\n}\n\n/**\n * Get score of an entity\n * @example getScore(Entity, 'Money');\n */\nexport function getScore(entity: Entity, objective: string): number {\n  try {\n    return world.scoreboard.getObjective(objective).getScore(entity.scoreboard);\n  } catch (error) {\n    return 0;\n  }\n}\n\n/**\n * grabs the score of a entity off of nameTag\n * @param name Entitys name\n * @param objective objective to get\n * @returns the score of the entity\n */\nexport function getScoreByName(name: string, objective: string): number {\n  try {\n    const command = DIMENSIONS.overworld.runCommand(\n      `scoreboard players test \"${name}\" \"${objective}\" * *`\n    );\n    return parseInt(String(command.statusMessage?.split(\" \")[1]), 10);\n  } catch (error) {\n    return 0;\n  }\n}\n\n/**\n * sets the score of a name\n * @example setScore(\"Smell of curry\", 'Money');\n */\nexport function setScore(\n  entityName: string,\n  objective: string,\n  value: Number\n): void {\n  try {\n    return DIMENSIONS.overworld.runCommand(\n      `scoreboard players set \"${entityName}\" ${objective} ${value}`\n    );\n  } catch (error) {\n    console.warn(error + error.stack);\n  }\n}\n\n/**\n * Gets the role of this player\n * @param player player to get role from\n * @example getRole(\"Smell of curry\")\n */\nexport function getRole(player: Player | string): keyof typeof ROLES {\n  if (player instanceof Player) {\n    return TABLES.roles.get(player.name) ?? \"member\";\n  } else {\n    return TABLES.roles.get(player) ?? \"member\";\n  }\n}\n\n/**\n * Sets the role of this player\n * @example setRole(\"Smell of curry\", \"admin\")\n */\nexport function setRole(\n  player: Player | string,\n  value: keyof typeof ROLES\n): void {\n  if (typeof player == \"string\") {\n    // we need to create a task that will update the role for\n    // that player when they join\n    // also we need to set there db_role back\n    TABLES.roles.set(player, value);\n    /**\n     * If the player is in the game just set it now\n     * if they are not in the game we will need to create a task\n     * to set there role when they join\n     */\n    const inGamePlayer = [...world.getPlayers()].find((p) => p.name == player);\n    if (inGamePlayer) {\n      inGamePlayer.setDynamicProperty(\"role\", value);\n    } else {\n      new ChangePlayerRoleTask(player, value);\n    }\n  } else {\n    // just change both of them no need for task\n    TABLES.roles.set(player.name, value);\n    player.setDynamicProperty(\"role\", value);\n  }\n}\n\n/**\n * Checks if a player is the owner of this world that was set using `/function`\n * @param player player to test\n * @returns if player is owner\n */\nexport function isServerOwner(player: Player): boolean {\n  return world.getDynamicProperty(\"worldsOwner\") == player.id;\n}\n\n/**\n * Checks if the server is locked down\n */\nexport function isLockedDown(): boolean {\n  return (world.getDynamicProperty(\"isLockDown\") ?? false) as boolean;\n}\n\n/**\n * Sets the server as lockdown or not\n * @param val if the server is locked down or not\n */\nexport function setLockDown(val: boolean) {\n  world.setDynamicProperty(\"isLockDown\", val);\n}\n\n/**\n * Sets Deny blocks at bottom of region every 5 mins\n */\nexport function loadRegionDenys() {\n  for (const region of Region.getAllRegions()) {\n    const loc1 = new BlockLocation(region.from.x, -64, region.from.z);\n    const loc2 = new BlockLocation(region.to.x, -64, region.to.z);\n    for (const blockLocation of loc1.blocksBetween(loc2)) {\n      DIMENSIONS[region.dimensionId as keyof typeof DIMENSIONS]\n        .getBlock(blockLocation)\n        ?.setType(MinecraftBlockTypes.deny);\n    }\n  }\n}\n\n/**\n * Stores all the callbacks in an array\n */\nconst CALLBACKS: IplayerTickRegister[] = [];\n\n/**\n * Sends a callback for each player\n * @returns the key to disable this callback\n */\nexport function forEachValidPlayer(\n  callback: (player: Player, event: TickEvent) => void,\n  delay = 0\n) {\n  CALLBACKS.push({ callback: callback, delay: delay, lastCall: 0 });\n}\n\nworld.events.tick.subscribe((tick) => {\n  const players = [...world.getPlayers()];\n  for (const [i, player] of players.entries()) {\n    if ([\"moderator\", \"admin\"].includes(getRole(player))) continue;\n    for (const CALLBACK of CALLBACKS) {\n      if (\n        CALLBACK.delay != 0 &&\n        tick.currentTick - CALLBACK.lastCall < CALLBACK.delay\n      )\n        continue;\n      CALLBACK.callback(player, tick);\n      if (i == players.length - 1) CALLBACK.lastCall = tick.currentTick;\n    }\n  }\n});\n\n/**\n * Runs a Command\n * @param command a minecraft /command\n * @param dimension: \"overworld\" | \"nether\" | \"the end\"\n * @param debug: true console logs the command, else it runs command\n * @example runCommand(`say test`)\n */\nexport function runCommand(\n  command: string,\n  dimension: string = \"overworld\",\n  debug: boolean = false\n): Object {\n  try {\n    return debug\n      ? console.warn(JSON.stringify(this.runCommand(command)))\n      : DIMENSIONS.overworld.runCommand(command);\n  } catch (error) {\n    return { error: true };\n  }\n}\n\n/**\n * Gets a players id based on a saved database values\n * @param playerName playerName to get\n */\nexport function getId(playerName: string): string | null {\n  return TABLES.ids.get(playerName);\n}\n\n/**\n *\n * @param duration time to convert\n * @example ```\n * durationToMs(\"10s\")\n * durationToMs(\"10d,2y\")\n * durationToMs(\"5m\")\n * durationToMs(\"23ms,10s\")\n * ```\n */\nexport function durationToMs(duration: string): number {\n  /**\n   * This holds the diffrent duration values this duration can have\n   * @example `[\"10d\", \"20s\", \"2h\"]`\n   * @example `[\"2h\"]`\n   */\n  const values: durationSegment[] = duration.split(\",\") as durationSegment[];\n  console.warn(values.length);\n  let ms = 0;\n  for (const value of values) {\n    const length = parseInt(value.match(/\\D+|\\d+/g)[0]);\n    const unit = value.match(/\\D+|\\d+/g)[1] as durtationSegmentType;\n    if (unit == \"y\") ms = ms + 3.17098e-11 * length;\n    if (unit == \"w\") ms = ms + 6.048e8 * length;\n    if (unit == \"d\") ms = ms + 8.64e7 * length;\n    if (unit == \"h\") ms = ms + 3.6e6 * length;\n    if (unit == \"m\") ms = ms + 60000 * length;\n    if (unit == \"s\") ms = ms + 1000 * length;\n    if (unit == \"ms\") ms = ms + length;\n  }\n  return ms;\n}\n\nexport function msToTime(duration: number) {\n  return new Date(duration).toString();\n}\n\n/**\n * Converts a location to a block location\n */\nexport function locationToBlockLocation(loc: Location): BlockLocation {\n  return new BlockLocation(\n    Math.floor(loc.x),\n    Math.floor(loc.y),\n    Math.floor(loc.z)\n  );\n}\n", "/**\n * The default permissions for all regions made\n */\nexport const DEFAULT_REGION_PERMISSIONS = {\n  /**\n   * If players in this region can use doors, trapdoors, and switches like buttons and levers\n   */\n  doorsAndSwitches: true,\n  /**\n   * If players in this region can open containers, this is like chests, furnaces, hoppers, etc\n   */\n  openContainers: true,\n  /**\n   * If the players in this region can fight each other\n   */\n  pvp: false,\n  /**\n   * the entitys allowed in this region\n   */\n  allowedEntitys: [\"minecraft:player\", \"minecraft:npc\", \"minecraft:item\"],\n};\n\n/**\n * All doors and switches in minecraft\n */\nexport const DOORS_SWITCHES = [\n  \"minecraft:acacia_door\",\n  \"minecraft:acacia_trapdoor\",\n  \"minecraft:acacia_button\",\n  \"minecraft:birch_door\",\n  \"minecraft:birch_trapdoor\",\n  \"minecraft:birch_button\",\n  \"minecraft:crimson_door\",\n  \"minecraft:crimson_trapdoor\",\n  \"minecraft:crimson_button\",\n  \"minecraft:dark_oak_door\",\n  \"minecraft:dark_oak_trapdoor\",\n  \"minecraft:dark_oak_button\",\n  \"minecraft:jungle_door\",\n  \"minecraft:jungle_trapdoor\",\n  \"minecraft:jungle_button\",\n  \"minecraft:mangrove_door\",\n  \"minecraft:mangrove_trapdoor\",\n  \"minecraft:mangrove_button\",\n  \"minecraft:spruce_door\",\n  \"minecraft:spruce_trapdoor\",\n  \"minecraft:spruce_button\",\n  \"minecraft:warped_door\",\n  \"minecraft:warped_trapdoor\",\n  \"minecraft:warped_button\",\n  \"minecraft:wooden_door\",\n  \"minecraft:wooden_button\",\n  \"minecraft:trapdoor\",\n  \"minecraft:iron_door\",\n  \"minecraft:iron_trapdoor\",\n  \"minecraft:polished_blackstone_button\",\n  \"minecraft:lever\",\n];\n\n/**\n * A List of all containers a item could be in\n */\nexport const BLOCK_CONTAINERS = [\n  \"minecraft:chest\",\n  \"minecraft:ender_chest\",\n  \"minecraft:barrel\",\n  \"minecraft:trapped_chest\",\n  \"minecraft:dispenser\",\n  \"minecraft:dropper\",\n  \"minecraft:furnace\",\n  \"minecraft:blast_furnace\",\n  \"minecraft:lit_furnace\",\n  \"minecraft:lit_blast_furnace\",\n  \"minecraft:hopper\",\n  \"minecraft:shulker_box\",\n  \"minecraft:undyed_shulker_box\",\n];\n", "import { BlockLocation, Entity } from \"@minecraft/server\";\nimport { DEFAULT_REGION_PERMISSIONS } from \"../../config/region\";\nimport { TABLES } from \"../../lib/Database/tables\";\nimport type { IRegionCords, IRegionPermissions } from \"../../types\";\nimport { loadRegionDenys } from \"../../utils.js\";\n\n/**\n * Holds all regions in memory so its not grabbing them so much\n */\nexport const REGIONS: Array<Region> = [];\n\n/**\n * If the regions have been grabbed if not it will grab them and set this to true\n */\nlet REGIONS_HAVE_BEEN_GRABBED: boolean = false;\n\n/**\n * The Lowest Y value in minecraft\n */\nconst LOWEST_Y_VALUE: number = -64;\n\n/**\n * The HIGEST Y value in minecraft\n */\nconst HIGEST_Y_VALUE: number = 320;\n\n/**\n * Compare a array of numbers with 2 arrays\n * @param XYZa The first set of numbers\n * @param XYZb The second set of numbers\n * @param XYZc The set of numbers that should between the first and second set of numbers\n * @example betweenXYZ([1, 0, 1], [22, 81, 10], [19, 40, 6]));\n */\nfunction betweenXYZ(\n  XYZa: [number, number, number],\n  XYZb: [number, number, number],\n  XYZc: [number, number, number]\n): boolean {\n  return XYZc.every(\n    (c, i) => c >= Math.min(XYZa[i], XYZb[i]) && c <= Math.max(XYZa[i], XYZb[i])\n  );\n}\n\nexport class Region {\n  dimensionId: string;\n  from: IRegionCords;\n  to: IRegionCords;\n  key: string;\n  permissions: IRegionPermissions;\n  /**\n   * Gets all regions\n   */\n  static getAllRegions(): Array<Region> {\n    if (REGIONS_HAVE_BEEN_GRABBED) return REGIONS;\n    const regions = TABLES.regions\n      .values()\n      .map(\n        (region) =>\n          new Region(\n            region.from,\n            region.to,\n            region.dimensionId,\n            region.permissions,\n            region.key\n          )\n      );\n    regions.forEach((r) => {\n      REGIONS.push(r);\n    });\n    return regions;\n  }\n\n  /**\n   * Checks if a block location is in region\n   */\n  static blockLocationInRegion(\n    blockLocation: BlockLocation,\n    dimensionId: string\n  ): Region | undefined {\n    return this.getAllRegions().find(\n      (region) =>\n        region.dimensionId == dimensionId &&\n        betweenXYZ(\n          [region.from.x, LOWEST_Y_VALUE, region.from.z],\n          [region.to.x, HIGEST_Y_VALUE, region.to.z],\n          [blockLocation.x, blockLocation.y, blockLocation.z]\n        )\n    );\n  }\n\n  /**\n   * Removes a region at a block Location\n   * @param dimensionId the id of this dimension\n   * @returns if the region was removed or not\n   */\n  static removeRegionAtBlockLocation(\n    blockLocation: BlockLocation,\n    dimensionId: string\n  ): Boolean {\n    const region = this.blockLocationInRegion(blockLocation, dimensionId);\n    if (!region) return false;\n    return TABLES.regions.delete(region.key);\n  }\n  /**\n   * Creates a new Region to store in db\n   */\n  constructor(\n    from: IRegionCords,\n    to: IRegionCords,\n    dimensionId: string,\n    permissions?: IRegionPermissions,\n    key?: string\n  ) {\n    this.from = from;\n    this.to = to;\n    this.dimensionId = dimensionId;\n    this.permissions = permissions ?? DEFAULT_REGION_PERMISSIONS;\n    this.key = key ? key : Date.now().toString();\n\n    if (!key) {\n      this.update();\n      loadRegionDenys();\n      REGIONS.push(this);\n    }\n  }\n\n  /**\n   * Updates this region in the database\n   */\n  update(): void {\n    TABLES.regions.set(this.key, {\n      key: this.key,\n      from: this.from,\n      dimensionId: this.dimensionId,\n      permissions: this.permissions,\n      to: this.to,\n    });\n  }\n\n  /**\n   * removes this region\n   * @returns if the region was removed succesfully\n   */\n  delete(): boolean {\n    return TABLES.regions.delete(this.key);\n  }\n\n  /**\n   * Checks if a player is in this region\n   * @returns if a entity is in this region or not\n   */\n  entityInRegion(entity: Entity): Boolean {\n    return (\n      this.dimensionId == entity.dimension.id &&\n      betweenXYZ(\n        [this.from.x, LOWEST_Y_VALUE, this.from.z],\n        [this.to.x, HIGEST_Y_VALUE, this.to.z],\n        [entity.location.x, entity.location.y, entity.location.z]\n      )\n    );\n  }\n\n  /**\n   * Changes a permission to on or off\n   */\n  changePermission<T extends keyof IRegionPermissions>(\n    key: T,\n    value: IRegionPermissions[T]\n  ): void {\n    this.permissions[key] = value;\n    this.update();\n  }\n}\n", "import type { ROLES } from \"../../types\";\r\nimport { TABLES } from \"../../lib/Database/tables\";\r\nimport type { IChangePlayerRoleData } from \"../../types\";\r\n\r\nexport class ChangePlayerRoleTask {\r\n  /**\r\n   * The name of the player\r\n   */\r\n  playerName: string;\r\n  /**\r\n   * The role that the player should be set to\r\n   */\r\n  role: keyof typeof ROLES;\r\n\r\n  /**\r\n   *  gets all tasks that are present\r\n   * @returns all tasks\r\n   */\r\n  static getTasks(): Array<IChangePlayerRoleData> {\r\n    return TABLES.tasks.get(\"changePlayerRole\") ?? [];\r\n  }\r\n\r\n  /**\r\n   * Gets the role this player needs to be set to\r\n   * @param playerName name\r\n   */\r\n  static getPlayersRoleToSet(playerName: string): keyof typeof ROLES | null {\r\n    const tasks = ChangePlayerRoleTask.getTasks();\r\n    return tasks.find((t) => t.playerName == playerName)?.role;\r\n  }\r\n\r\n  constructor(playerName: string, role: keyof typeof ROLES) {\r\n    const tasks = ChangePlayerRoleTask.getTasks();\r\n    tasks.push({ playerName: playerName, role: role });\r\n    TABLES.tasks.set(\"changePlayerRole\", tasks);\r\n  }\r\n}\r\n", "import type {\r\n  IRegionDB,\r\n  IMuteData,\r\n  IBanData,\r\n  IFreezeData,\r\n  INpcLocation,\r\n} from \"../../types\";\r\nimport type { ROLES } from \"../../types\";\r\nimport { Database } from \"../../lib/Database/Database\";\r\n\r\n/**\r\n * All the Database tables that are created\r\n */\r\nexport const TABLES = {\r\n  config: new Database<any>(\"config\"),\r\n  freezes: new Database<IFreezeData>(\"freezes\"),\r\n  mutes: new Database<IMuteData>(\"mutes\"),\r\n  bans: new Database<IBanData>(\"bans\"),\r\n  regions: new Database<IRegionDB>(\"regions\"),\r\n  roles: new Database<keyof typeof ROLES>(\"roles\"),\r\n  tasks: new Database<any>(\"tasks\"),\r\n  npcs: new Database<INpcLocation>(\"npcs\"),\r\n  ids: new Database<string>(\"ids\"),\r\n};\r\n", "import { BeforeChatEvent, Player } from \"@minecraft/server\";\r\n\r\nexport class CommandCallback {\r\n  data: BeforeChatEvent;\r\n  sender: Player;\r\n\r\n  /**\r\n   * Returns a commands callback\r\n   * @param data chat data that was used\r\n   */\r\n  constructor(data: BeforeChatEvent) {\r\n    this.data = data;\r\n    this.sender = data.sender;\r\n  }\r\n  /**\r\n   * Replys to the sender of a command callback\r\n   * @param text Message or a lang code\r\n   * @example ctx.reply('Hello World!');\r\n   */\r\n  reply(text: string) {\r\n    this.sender.tell(text);\r\n  }\r\n}\r\n", "import { Player, world } from \"@minecraft/server\";\r\nimport { ENTITY_INVENTORY, GUI_ITEM } from \"../../config/chest\";\r\nimport { DIMENSIONS } from \"../../utils.js\";\r\nimport { setTickInterval } from \"../Scheduling/utils\";\r\nimport { ChestGUI } from \"./Models/EntityChest\";\r\nimport { CHESTGUIS, CHEST_OPEN, getHeldItem } from \"./utils.js\";\r\nimport \"./pages/home\";\r\n\r\nworld.events.tick.subscribe((data) => {\r\n  for (const player of world.getPlayers()) {\r\n    /**\r\n     * Loop through all players, check if player has a chest gui\r\n     * if not create them one\r\n     * Once all players are checked verify there are no false entitys\r\n     */\r\n    if (getHeldItem(player)?.typeId != GUI_ITEM) {\r\n      if (CHESTGUIS[player.name]) CHESTGUIS[player.name].despawn();\r\n      continue;\r\n    }\r\n    // Player has a item Held we need to verify that they have a gui\r\n    if (Object.keys(CHESTGUIS).includes(player?.name)) continue;\r\n    // Player does not have a chest gui spawn them in one\r\n    CHESTGUIS[player.name] = new ChestGUI(player);\r\n  }\r\n});\r\n\r\nworld.events.beforeDataDrivenEntityTriggerEvent.subscribe((data) => {\r\n  if (!(data.entity instanceof Player)) return;\r\n  if (data.id == \"rubedo:has_container_open\") {\r\n    CHEST_OPEN.set(data.entity, true);\r\n  } else if (data.id == \"rubedo:dosent_have_container_open\") {\r\n    CHEST_OPEN.set(data.entity, false);\r\n  }\r\n});\r\n\r\n/**\r\n * This system will detect false entitys abd kill them to\r\n * reduce lag and elimate broken/left players/entitys\r\n */\r\nsetTickInterval(() => {\r\n  const vaildIds = Object.values(CHESTGUIS).map((c) => c.entity.id);\r\n  for (const entity of DIMENSIONS.overworld.getEntities({\r\n    type: ENTITY_INVENTORY,\r\n  })) {\r\n    if (vaildIds.includes(entity.id)) continue;\r\n    // This entity is not vaild\r\n    entity.triggerEvent(\"despawn\");\r\n  }\r\n}, 100);\r\n", "/*\n|--------------------------------------------------------------------------\n| Gui item\n|--------------------------------------------------------------------------\n|\n| This is the GUI item that is used to open up the gui\n| this is set to the identifer of item.json and is used to find the item\n| in the gui template\n|\n*/\nexport const GUI_ITEM = \"rubedo:gui\";\n\n/*\n|--------------------------------------------------------------------------\n| Entity Inventory\n|--------------------------------------------------------------------------\n|\n| The id of the entity inventory\n| this is found in the entities file\n| this will be updated if inventory entity is changed\n|\n*/\nexport const ENTITY_INVENTORY = \"rubedo:inventory\";\n\n/*\n|--------------------------------------------------------------------------\n| Default Static Page id\n|--------------------------------------------------------------------------\n|\n| This is the default static page id of what is open by default\n| when you click on the gui, this can be changed but it probably shouldnt\n| because static pages will need to be changed\n|\n*/\nexport const DEFAULT_STATIC_PAGE_ID = \"home\";\n", "import { TickEvent, world } from \"@minecraft/server\";\n\n/**\n * A list of timeouts that are occuring\n */\nconst TIMEOUTS: Map<string, Timeout> = new Map();\n\nexport class Timeout {\n  callbackTick: number | null;\n  tickDelay: number;\n  loop: boolean;\n  callback: (tick: number) => void;\n  id: any;\n  TickCallBack: (arg: TickEvent) => void;\n  /**\n   * Register a timeout\n   * @param {() => void} callback On timeout complete code to be executed\n   * @param {number} tick tick of the timeout\n   */\n  constructor(\n    callback: (tick: number) => void,\n    tick: number,\n    loop: boolean = false,\n    id: any = Date.now()\n  ) {\n    this.callbackTick = null;\n    this.tickDelay = tick;\n    this.loop = loop;\n    this.callback = callback;\n    this.id = id;\n\n    TIMEOUTS.set(id, this);\n\n    this.TickCallBack = world.events.tick.subscribe(({ currentTick }) => {\n      if (!this.callbackTick) this.callbackTick = currentTick + this.tickDelay;\n      if (this.callbackTick > currentTick) return;\n      this.callback(currentTick);\n\n      if (!this.loop) return this.expire();\n      this.callbackTick = currentTick + this.tickDelay;\n    });\n  }\n\n  /**\n   * Expires this tickTimeout\n   */\n  expire() {\n    world.events.tick.unsubscribe(this.TickCallBack);\n    TIMEOUTS.delete(this.id);\n  }\n}\n", "import { Timeout } from \"./Timeout\";\n\n/**\n * Sleeps your code\n * @param {number} tick time in ticks you want the return to occur\n * @returns {Promise<void>}\n */\nexport const sleep = (tick: number): Promise<void> => {\n  return new Promise((resolve) => setTickTimeout(resolve, tick));\n};\n\n/**\n * Register a tick timeout\n * @param callback Code you want to execute when the command is executed\n * @param tick time in ticks you want the return to occur\n */\nexport function setTickTimeout(callback: () => void, tick: number) {\n  new Timeout(callback, tick);\n}\n\n/**\n * Delay executing a function, REPEATEDLY\n */\nexport function setTickInterval(\n  callback: (tick: number) => void,\n  tick: number\n): any {\n  return new Timeout(callback, tick, true);\n}\n\n/**\n * Clears a interval\n */\nexport function clearTickInterval(callback: Timeout) {\n  callback.expire();\n}\n", "import { Entity, Player, world } from \"@minecraft/server\";\r\nimport { AIR } from \"../../../index.js\";\r\nimport { ENTITY_INVENTORY } from \"../../../config/chest\";\r\nimport {\r\n  ISlotChangeReturn,\r\n  onEntityInventorySlotChange,\r\n} from \"../../Events/onSlotChange\";\r\nimport {\r\n  CHESTGUIS,\r\n  CHEST_OPEN,\r\n  clearPlayersPointer,\r\n  getItemAtSlot,\r\n  PAGES,\r\n} from \"../utils.js\";\r\nimport { ItemGrabbedCallback } from \"./ItemGrabbedCallback\";\r\nimport { ISlot, Page } from \"./Page.js\";\r\n\r\nexport class ChestGUI {\r\n  /**\r\n   * The connected player to this gui\r\n   */\r\n  player: Player;\r\n  /**\r\n   * The entity that this chest gui is assoicated to\r\n   */\r\n  entity: Entity;\r\n  /**\r\n   * The event that is registerd on this gui\r\n   */\r\n  tickEvent: any;\r\n\r\n  /**\r\n   * The page that this gui is currently viewing\r\n   */\r\n  page: Page;\r\n\r\n  /**\r\n   * The event that is used to test for changes in inventory\r\n   */\r\n  slotChangeEvent: number;\r\n\r\n  /**\r\n   * if the player has a chest open\r\n   */\r\n  hasChestOpen: boolean;\r\n\r\n  /**\r\n   * Spawns a entity to be attached to the player\r\n   * @param player player this entity will be attcked to\r\n   */\r\n  static spawnEntity(player: Player): Entity {\r\n    try {\r\n      return player.dimension.spawnEntity(\r\n        ENTITY_INVENTORY,\r\n        player.headLocation\r\n      );\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Links a new chest gui to a player\r\n   * @param player player to link\r\n   */\r\n  constructor(player: Player) {\r\n    this.player = player;\r\n    this.entity = ChestGUI.spawnEntity(player);\r\n    if (this.entity) {\r\n      this.hasChestOpen = false;\r\n      this.setPage(\"home\");\r\n    }\r\n    this.tickEvent = world.events.tick.subscribe(() => {\r\n      if (!this.entity) return this.despawn();\r\n      if (CHEST_OPEN.get(this.player)) {\r\n        if (!this.hasChestOpen) {\r\n          // Player has this inventory open run checks for changes\r\n          this.slotChangeEvent = onEntityInventorySlotChange.subscribe(\r\n            { type: ENTITY_INVENTORY },\r\n            (entity, change) => {\r\n              if (entity.id != this.entity.id) return;\r\n              this.onSlotChange(change);\r\n            }\r\n          );\r\n        }\r\n        this.hasChestOpen = true;\r\n      } else {\r\n        // Player does not have inventory open but item is held\r\n        try {\r\n          this.entity.teleport(\r\n            this.player.headLocation,\r\n            this.player.dimension,\r\n            0,\r\n            0\r\n          );\r\n        } catch (error) {\r\n          this.despawn();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets this gui to a page of items\r\n   * @param pageId page to set this gui too\r\n   */\r\n  setPage(pageId: string, extras?: any) {\r\n    const c = this.entity.getComponent(\"inventory\").container;\r\n    for (let i = 0; i < c.size; i++) {\r\n      c.setItem(i, AIR);\r\n    }\r\n    if (!Object.keys(PAGES).includes(pageId))\r\n      throw new Error(`pageId ${pageId} does not exist!`);\r\n    const page = PAGES[pageId];\r\n    this.page = page;\r\n\r\n    page.fillType(this.entity, page, extras);\r\n    this.entity.nameTag = `size:54`;\r\n  }\r\n\r\n  /**\r\n   * This runs when a slot gets changed in the chest inventory\r\n   */\r\n  onSlotChange(change: ISlotChangeReturn) {\r\n    /**\r\n     * The guiItem that was changed\r\n     */\r\n    const slot: ISlot = this.page.slots[change.slot];\r\n\r\n    if (!slot) {\r\n      // item was added to page that is not a valid slot so set that slot back to air\r\n      this.entity.getComponent(\"inventory\").container.setItem(change.slot, AIR);\r\n    } else if (change.changeType == \"delete\") {\r\n      // item was taken from this page\r\n      if (slot.item) clearPlayersPointer(this.player, change.item);\r\n      /**\r\n       * if the slot has a item that returns when something is grabbed, this checks\r\n       * if there is a item put into the slot to return, if not it will not send a\r\n       * callback by returning before\r\n       */\r\n      if (!slot.item && !getItemAtSlot(this.entity, change.slot)) return;\r\n      slot.action(new ItemGrabbedCallback(this, slot, change));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes this gui and despawns its entity\r\n   */\r\n  despawn() {\r\n    try {\r\n      this.entity?.triggerEvent(\"despawn\");\r\n    } catch (error) {}\r\n    try {\r\n      delete CHESTGUIS[this.player.name];\r\n    } catch (error) {}\r\n    if (this.tickEvent) world.events.tick.unsubscribe(this.tickEvent);\r\n    if (this.slotChangeEvent)\r\n      onEntityInventorySlotChange.unsubscribe(this.slotChangeEvent);\r\n  }\r\n}\r\n", "import {\r\n  Entity,\r\n  EntityQueryOptions,\r\n  ItemStack,\r\n  PlayerInventoryComponentContainer,\r\n} from \"@minecraft/server\";\r\nimport { DIMENSIONS } from \"../../utils.js\";\r\nimport { setTickInterval } from \"../Scheduling/utils\";\r\n\r\ntype onSlotChangeCallback = (entity: Entity, change: ISlotChangeReturn) => void;\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: onSlotChangeCallback;\r\n    entities: EntityQueryOptions;\r\n  };\r\n} = {};\r\n\r\nconst MAPPED_INVENTORYS: { [key: string]: Array<IMappedInventoryItem> } = {};\r\nexport const PREVIOUS_CHANGE: { [key: string]: ISlotChangeReturn } = {};\r\n\r\nexport interface ISlotChangeReturn {\r\n  /**\r\n   * Slot that changed\r\n   */\r\n  slot: number;\r\n  /**\r\n   * The uid of this item\r\n   */\r\n  uid: string;\r\n  /**\r\n   * The old uid of this item\r\n   */\r\n  oldUid?: string;\r\n  /**\r\n   * the item that was grabbed / put\r\n   */\r\n  item: ItemStack;\r\n  /**\r\n   * The old itemStack that was in this slot\r\n   */\r\n  oldItem?: ItemStack;\r\n  /**\r\n   * How the inventory has changed\r\n   */\r\n  changeType: \"delete\" | \"put\" | \"swap\" | \"fluctuation\" | \"move\";\r\n}\r\n\r\ninterface IMappedInventoryItem {\r\n  /**\r\n   * a unique id for a itemStack\r\n   */\r\n  uid: string;\r\n  /**\r\n   * the item\r\n   */\r\n  item: ItemStack;\r\n}\r\n\r\n/**\r\n * Finds and returns a slot change in a inventory\r\n */\r\nfunction getSlotChanges(\r\n  entity: Entity,\r\n  oldInv: Array<IMappedInventoryItem>,\r\n  newInv: Array<IMappedInventoryItem>\r\n): Array<ISlotChangeReturn> {\r\n  if (oldInv.length != newInv.length) return [];\r\n  const changes: Array<ISlotChangeReturn> = [];\r\n  for (let i = 0; i < newInv.length; i++) {\r\n    if (\r\n      oldInv[i]?.item?.amount < newInv[i]?.item?.amount ||\r\n      (oldInv[i]?.item?.amount > newInv[i]?.item?.amount &&\r\n        oldInv[i]?.item?.amount != 0)\r\n    ) {\r\n      // Checks if the item is the same but checks if the amount has changed\r\n      const change_data: ISlotChangeReturn = {\r\n        slot: i,\r\n        uid: newInv[i].uid,\r\n        oldUid: oldInv[i].uid,\r\n        item: newInv[i].item,\r\n        oldItem: oldInv[i].item,\r\n        changeType: \"fluctuation\",\r\n      };\r\n      changes.push(change_data);\r\n      PREVIOUS_CHANGE[entity.id] = change_data;\r\n      continue;\r\n    }\r\n    if (newInv[i].uid == oldInv[i].uid) continue; // no change\r\n    if (oldInv[i]?.item && newInv[i]?.item) {\r\n      // Checks if there was a new item but a new slot was not taken up\r\n      // Meaning that the item got used like using a bucket on a cow\r\n      const change_data: ISlotChangeReturn = {\r\n        slot: i,\r\n        uid: newInv[i].uid,\r\n        oldUid: oldInv[i].uid,\r\n        item: newInv[i].item,\r\n        oldItem: oldInv[i].item,\r\n        changeType: \"swap\",\r\n      };\r\n      changes.push(change_data);\r\n      PREVIOUS_CHANGE[entity.id] = change_data;\r\n    } else if (!newInv[i]?.item) {\r\n      // There is no more item in this slot\r\n      // Meaning the item has been moved across slots or been trown out\r\n      const change_data: ISlotChangeReturn = {\r\n        slot: i,\r\n        uid: oldInv[i].uid,\r\n        item: oldInv[i].item,\r\n        changeType: \"delete\",\r\n      };\r\n      changes.push(change_data);\r\n      PREVIOUS_CHANGE[entity.id] = change_data;\r\n    } else if (newInv[i]?.item) {\r\n      // New item has been added in this slot\r\n      if (\r\n        PREVIOUS_CHANGE[entity.id]?.changeType == \"delete\" &&\r\n        PREVIOUS_CHANGE[entity.id]?.uid == newInv[i].uid\r\n      ) {\r\n        // item has been moved across slots\r\n        const change_data: ISlotChangeReturn = {\r\n          slot: i,\r\n          uid: newInv[i].uid,\r\n          item: newInv[i].item,\r\n          changeType: \"move\",\r\n        };\r\n        changes.push(change_data);\r\n        PREVIOUS_CHANGE[entity.id] = change_data;\r\n        continue;\r\n      } else {\r\n        const change_data: ISlotChangeReturn = {\r\n          slot: i,\r\n          uid: newInv[i].uid,\r\n          item: newInv[i].item,\r\n          changeType: \"put\",\r\n        };\r\n        changes.push(change_data);\r\n        PREVIOUS_CHANGE[entity.id] = change_data;\r\n      }\r\n    }\r\n  }\r\n  return changes;\r\n}\r\n\r\n/**\r\n  * Converts a itemStack to a unique id\r\n  * @param {ItemStack} item\r\n  * @returns {string}\r\n \r\n  */\r\nexport function getItemUid(item: ItemStack): string {\r\n  if (!item) return \"\";\r\n  const data = [];\r\n  data.push(item.typeId);\r\n  data.push(item.nameTag);\r\n  data.push(item.data);\r\n  data.push(item.getLore().join(\"\"));\r\n  return data.join(\"\");\r\n}\r\n\r\n/**\r\n * Gets a entitys inventory but with mapped data\r\n */\r\nfunction mapInventory(\r\n  container: PlayerInventoryComponentContainer\r\n): Array<IMappedInventoryItem> {\r\n  const inventory = [];\r\n\r\n  for (let i = 0; i < container.size; i++) {\r\n    let item = container.getItem(i);\r\n    inventory[i] = {\r\n      uid: getItemUid(item),\r\n      item: item,\r\n    };\r\n  }\r\n  return inventory;\r\n}\r\n\r\nsetTickInterval(() => {\r\n  for (const callback of Object.values(CALLBACKS)) {\r\n    for (const entity of DIMENSIONS.overworld.getEntities(callback.entities)) {\r\n      const inventory = mapInventory(\r\n        entity.getComponent(\"inventory\").container\r\n      );\r\n      const changes = getSlotChanges(\r\n        entity,\r\n        MAPPED_INVENTORYS[entity.id] ?? inventory,\r\n        inventory\r\n      );\r\n      MAPPED_INVENTORYS[entity.id] = inventory;\r\n      if (changes.length == 0) continue;\r\n      if (entity.hasTag(\"skipCheck\")) {\r\n        entity.removeTag(\"skipCheck\");\r\n        delete PREVIOUS_CHANGE[entity.id];\r\n        continue;\r\n      }\r\n      for (const change of changes) {\r\n        callback.callback(entity, change);\r\n      }\r\n    }\r\n  }\r\n}, 5);\r\n\r\nexport class onEntityInventorySlotChange {\r\n  /**\r\n   * Subscribes to a callback to get notified when a entitys inventory changes\r\n   * @param callback what to be called when one of these entitys inventorys changes\r\n   * @param entities the entitys to grab from\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(\r\n    entities: EntityQueryOptions,\r\n    callback: onSlotChangeCallback\r\n  ): number {\r\n    const key = Date.now();\r\n    CALLBACKS[key] = { callback: callback, entities: entities };\r\n    return key;\r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n", "import { Player, world } from \"@minecraft/server\";\n\nexport class PlayerLog<T extends any = any> {\n  data: Map<string, T>;\n  events: Object;\n\n  constructor() {\n    this.data = new Map();\n    this.events = {\n      playerLeave: world.events.playerLeave.subscribe((data) =>\n        this.data.delete(data.playerName)\n      ),\n    };\n  }\n\n  /**\n   * Logs a player to a value\n   */\n  set(player: Player, value: T): void {\n    this.data.set(player.name, value);\n  }\n\n  /**\n   * Gets a players value\n   */\n  get(player: Player): T {\n    return this.data.get(player.name);\n  }\n\n  /**\n   * Deletes a player from log\n   */\n  delete(player: Player) {\n    this.data.delete(player.name);\n  }\n\n  /**\n   * Clears this Player log\n   */\n  clear() {\n    this.data.clear();\n  }\n\n  /**\n   * Gets all the players in the log\n   */\n  playerNames(): Array<string> {\n    return [...this.data.keys()];\n  }\n}\n", "import type { Entity, ItemStack, Player } from \"@minecraft/server\";\r\nimport { PlayerLog } from \"../../modules/models/PlayerLog\";\r\nimport type { ChestGUI } from \"./Models/EntityChest\";\r\nimport type { Page } from \"./Models/Page\";\r\n\r\n/**\r\n * This will link a players name to a chest gui instance\r\n */\r\nexport const CHESTGUIS: { [key: string]: ChestGUI } = {};\r\n\r\n/**\r\n * This will link a players name to a chest gui instance\r\n */\r\nexport const PAGES: { [key: string]: Page } = {};\r\n\r\n/**\r\n * This will keep track if a player has a chest open\r\n */\r\nexport const CHEST_OPEN = new PlayerLog<boolean>();\r\n\r\n/**\r\n * Gets a players held item\r\n */\r\nexport function getHeldItem(player: Player): ItemStack {\r\n  const inventory = player.getComponent(\"minecraft:inventory\").container;\r\n  return inventory.getItem(player.selectedSlot);\r\n}\r\n\r\n/**\r\n * Clears the player of a item in there pointer slot\r\n */\r\nexport async function clearPlayersPointer(\r\n  player: Player,\r\n  ItemToClear: ItemStack\r\n) {\r\n  try {\r\n    const inventory = player.getComponent(\"minecraft:inventory\").container;\r\n    let itemsToLoad = [];\r\n    for (let i = 0; i < inventory.size; i++) {\r\n      const item = inventory.getItem(i);\r\n      if (!item) continue;\r\n      if (item?.typeId == ItemToClear?.typeId) {\r\n        itemsToLoad.push({ slot: i, item: item });\r\n        inventory.setItem;\r\n        if (i < 9) {\r\n          player.runCommand(`replaceitem entity @s slot.hotbar ${i} air`);\r\n        } else {\r\n          player.runCommand(\r\n            `replaceitem entity @s slot.inventory ${i - 9} air`\r\n          );\r\n        }\r\n      }\r\n    }\r\n    player.runCommand(\r\n      `clear @s ${ItemToClear?.typeId} ${ItemToClear.data} ${ItemToClear.amount}`\r\n    );\r\n    for (const item of itemsToLoad) {\r\n      inventory.setItem(item.slot, item.item);\r\n    }\r\n  } catch (error) {\r\n    // the item couldnt be cleared that means\r\n    // they now have a item witch is really BAD\r\n    [\r\n      ...player.dimension.getEntities({\r\n        type: \"minecraft:item\",\r\n        location: player.location,\r\n        maxDistance: 2,\r\n        closest: 1,\r\n      }),\r\n    ].forEach((e) => e.kill());\r\n  }\r\n}\r\n\r\n/**\r\n * Gets a item at slot\r\n */\r\nexport function getItemAtSlot(entity: Entity, slot: number): ItemStack | null {\r\n  const inventory = entity.getComponent(\"minecraft:inventory\").container;\r\n  return inventory.getItem(slot);\r\n}\r\n", "import {\n  ActionFormData,\n  MessageFormData,\n  ModalFormData,\n  ActionFormResponse,\n  ModalFormResponse,\n  MessageFormResponse,\n} from \"@minecraft/server-ui\";\nimport { ChestGUI } from \"./EntityChest\";\nimport { ItemStack } from \"@minecraft/server\";\nimport { sleep } from \"../../Scheduling/utils\";\nimport { ItemDatabase } from \"../database/Item\";\nimport type { ISlot } from \"./Page\";\nimport type { ISlotChangeReturn } from \"../../Events/onSlotChange\";\n\ntype FormActionReturn<T> = T extends ActionFormData\n  ? Promise<ActionFormResponse>\n  : T extends ModalFormData\n  ? Promise<ModalFormResponse>\n  : Promise<MessageFormResponse>;\n\nexport class ItemGrabbedCallback {\n  gui: ChestGUI;\n  slot: ISlot;\n  change: ISlotChangeReturn;\n  /**\n   * New Callback\n   */\n  constructor(gui: ChestGUI, slot: ISlot, change: ISlotChangeReturn) {\n    this.gui = gui;\n    this.slot = slot;\n    this.change = change;\n  }\n\n  /**\n   * Messages to the owner of this gui\n   * @example ctx.reply('Hello World!');\n   */\n  message(text: string) {\n    this.gui.player.tell(text);\n  }\n\n  /**\n   * Gets the item added\n   */\n  getItemAdded(): ItemStack | null {\n    if (this.slot.item) return null;\n    return this.gui.entity\n      .getComponent(\"minecraft:inventory\")\n      .container.getItem(this.change.slot);\n  }\n\n  /**\n   * Gives the player the item the grabbed\n   */\n  GiveAction(item: ItemStack = this.slot.item.itemStack) {\n    this.gui.player.getComponent(\"minecraft:inventory\").container.addItem(item);\n  }\n\n  /**\n   * Gives the player the item that was grabbed also removes this item from the gui + db\n   * @param db the item database to remove this item from\n   */\n  TakeAction(db: ItemDatabase = null) {\n    this.gui.player\n      .getComponent(\"minecraft:inventory\")\n      .container.addItem(this.slot.item.itemStack);\n    this.gui.page.slots[this.change.slot] = null;\n    if (!db) return;\n    db.delete(this.slot.item.components.dbKey);\n  }\n\n  /**\n   * Changes the page of the chestGui when this item is grabbed\n   * @param page page to send to\n   * @param extras stuff to be passed onto the page\n   */\n  PageAction(page: string, extras?: any) {\n    this.gui.setPage(page, extras);\n  }\n\n  /**\n   * Closes the chect GUI when this item is grabbed\n   */\n  CloseAction() {\n    this.gui.despawn();\n  }\n\n  /**\n   * Sets the item back\n   */\n  SetAction() {\n    const container = this.gui.entity.getComponent(\n      \"minecraft:inventory\"\n    ).container;\n    container.setItem(this.change.slot, this.slot.item.itemStack);\n  }\n\n  /**\n   * Opens a form to the player\n   * @param {ActionFormData | ModalFormData | MessageFormData} form form to load\n   * @returns {Promise<ActionFormResponse | ModalFormResponse | MessageFormResponse>}\n   */\n  async FormAction<T extends ActionFormData | ModalFormData | MessageFormData>(\n    form: T\n  ): Promise<FormActionReturn<T>> {\n    this.CloseAction();\n    await sleep(5);\n    // @ts-ignore\n    return await form.show(this.gui.player);\n  }\n}\n", "import {\r\n  Enchantment,\r\n  EnchantmentList,\r\n  ItemStack,\r\n  ItemType,\r\n} from \"@minecraft/server\";\r\n\r\ninterface IPageItemComponents {\r\n  /**\r\n   * Number of the items in the stack. Valid values range between 0 and 64.\r\n   */\r\n  amount?: number;\r\n  /**\r\n   * A data value used to configure alternate states of the item.\r\n   */\r\n  data?: number;\r\n  /**\r\n   * Given name of this stack of items.\r\n   */\r\n  nameTag?: string;\r\n  /**\r\n   * a secondary display string - for an ItemStack.\r\n   */\r\n  loreList?: string[];\r\n  /**\r\n   * a collection of the enchantments on this item\r\n   */\r\n  enchantments?: Enchantment[];\r\n  /**\r\n   * A key that could be on this item, menaing its connect to database\r\n   */\r\n  dbKey?: string;\r\n}\r\n\r\nexport class PageItem {\r\n  /**\r\n   * The item type this item has\r\n   */\r\n  itemType: ItemType;\r\n  /**\r\n   * The components that this item\r\n   * this stores information such as data, enchantmenets etc\r\n   */\r\n  components: IPageItemComponents;\r\n\r\n  /**\r\n   * The itemStack that was set at item creation\r\n   */\r\n  setItemStack: ItemStack | null;\r\n\r\n  constructor(\r\n    itemType: ItemType,\r\n    components: IPageItemComponents = {},\r\n    itemStack?: ItemStack\r\n  ) {\r\n    this.itemType = itemType;\r\n    this.components = components;\r\n    this.setItemStack = itemStack;\r\n  }\r\n  /**\r\n   * gets itemStack that this PageItem is associated with\r\n   */\r\n  get itemStack(): ItemStack {\r\n    if (this.setItemStack) return this.setItemStack;\r\n    const itemStack = new ItemStack(this.itemType);\r\n    if (this.components) {\r\n      itemStack.amount = this.components?.amount ?? 1;\r\n      itemStack.data = this.components?.data ?? 0;\r\n      itemStack.nameTag = this.components?.nameTag;\r\n      itemStack.setLore(this.components?.loreList ?? []);\r\n      const enchantments: EnchantmentList =\r\n        itemStack.getComponent(\"enchantments\").enchantments;\r\n      for (const enchantment of this.components?.enchantments ?? []) {\r\n        enchantments.addEnchantment(enchantment);\r\n      }\r\n      itemStack.getComponent(\"enchantments\").enchantments = enchantments;\r\n    }\r\n    return itemStack;\r\n  }\r\n}\r\n", "import { Entity } from \"@minecraft/server\";\nimport { AIR } from \"../../../index.js\";\nimport { Page } from \"./Page.js\";\n\nexport type FillTypeCallback = (\n  entity: Entity,\n  page: Page,\n  extras: any\n) => void;\n\n/**\n * Fills a entity with desired itmes\n */\nexport function DefaultFill(entity: Entity, page: Page, extras: any) {\n  const container = entity.getComponent(\"minecraft:inventory\").container;\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n}\n", "import { PAGES } from \"../utils.js\";\r\nimport { DefaultFill, FillTypeCallback } from \"./FillTypes\";\r\nimport { ItemGrabbedCallback } from \"./ItemGrabbedCallback.js\";\r\nimport type { PageItem } from \"./PageItem\";\r\n\r\nexport interface ISlot {\r\n  /**\r\n   * The item that should be in this slot\r\n   */\r\n  item: PageItem;\r\n  /**\r\n   * What happens when there is a change in this slot\r\n   */\r\n  action: (ctx: ItemGrabbedCallback) => void;\r\n}\r\n\r\nexport class Page {\r\n  /**\r\n   * The id this page has\r\n   */\r\n  id: string;\r\n  /**\r\n   * How this page fills, these can be custom or kept default\r\n   */\r\n  fillType: FillTypeCallback;\r\n\r\n  /**\r\n   * The slots in this gui\r\n   */\r\n  slots: ISlot[];\r\n\r\n  constructor(id: string, fillType: FillTypeCallback = DefaultFill) {\r\n    if (Object.keys(PAGES).includes(id))\r\n      throw new Error(`Page: ${id}, Already exists!`);\r\n    this.id = id;\r\n    this.fillType = fillType;\r\n    this.slots = [];\r\n    PAGES[id] = this;\r\n  }\r\n\r\n  /**\r\n   * Sets slots in this page\r\n   */\r\n  setSlots(\r\n    slot: Array<number>,\r\n    item: PageItem,\r\n    action: (ctx: ItemGrabbedCallback) => void\r\n  ): Page {\r\n    const data = item ? { item: item, action: action } : null;\r\n    for (const i of slot) {\r\n      this.slots[i] = data;\r\n    }\r\n    return this;\r\n  }\r\n}\r\n", "import { PageItem } from \"../Models/PageItem.js\";\r\nimport { Page } from \"../Models/Page.js\";\r\nimport { MinecraftItemTypes } from \"@minecraft/server\";\r\n\r\n/**\r\n * The Home page of this GUI this is the most important because\r\n * when the GUI is opned it will open up here, any plugin can\r\n * change this but this is the default screen\r\n */\r\nexport let HOME_PAGE = new Page(\"home\")\r\n  .setSlots(\r\n    [\r\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 35, 36, 44, 45, 46, 47, 48,\r\n      50, 51, 52, 53,\r\n    ],\r\n    new PageItem(MinecraftItemTypes.stainedGlassPane, {\r\n      data: 15,\r\n      nameTag: \"\u00A7r\",\r\n    }),\r\n    (ctx) => {\r\n      ctx.SetAction();\r\n    }\r\n  )\r\n  .setSlots(\r\n    [22],\r\n    new PageItem(MinecraftItemTypes.enderChest, {\r\n      nameTag: \"\u00A7l\u00A7bInventory Viewer\",\r\n    }),\r\n    (ctx) => {\r\n      ctx.PageAction(\"moderation:see\");\r\n    }\r\n  )\r\n  .setSlots(\r\n    [54],\r\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\r\n    (ctx) => {\r\n      ctx.CloseAction();\r\n    }\r\n  );\r\n", "export const text = {\n  \"api.name\": () => \"Smelly API\",\n  \"api.error.unknown\": () => \"An unknown error has occured.\",\n  \"api.database.error.table_name\": (a: string, b: number) =>\n    `The display name ${a} is too long for an objective, it can be at most ${b} characters long`,\n  \"api.utilities.formatter.error.ms\": (a: string) =>\n    `${a} is not a string or a number`,\n  \"api.Providers.form.invaildtype\": (a: string, b: string) =>\n    `Type ${a} is not a vaild type to add a ${b}`,\n  \"api.Providers.form.invaildFormtype\": (a: string, b: string) => {\n    `The type ${a} is not a valid type, Vaild types: ${JSON.stringify(b)}`;\n  },\n  \"api.ChestGUI.error.pagenotfound\": (a: string) => `Page ${a} not found!`,\n  \"modules.protections.cps.clickingToFast\": () =>\n    `You are clicking to fast! Please click slower!`,\n  \"modules.managers.mute.isMuted\": () =>\n    `You are muted and cannot send messages please try again later`,\n  \"modules.commands.ban.reply\": (\n    playerName: string,\n    duration: string,\n    reason: string = \"\"\n  ) =>\n    `\u00A7cBanned \u00A7f\"\u00A7a${playerName}\u00A7f\" \u00A7cfor ${length} Because: \"${\n      reason ?? \"No reason Provided\"\n    }\" \u00A7aSuccessfully`,\n  \"lockdown.kick.message\": () => [\n    `\u00A7cYou have been kicked!`,\n    `\u00A7aReason: \u00A7fServer is currently under LockDown`,\n    `\u00A7fServer will be up soon, Try to join later`,\n  ],\n  \"commands.ban.list.player\": (name: string, reason: string, expire: string) =>\n    `- \"${name}\" Because: ${reason}, Expiry ${expire}`,\n  \"commands.freeze.list.player\": (name: string, reason: string) =>\n    `- \"${name}\" Because: ${reason}`,\n  \"commands.mutes.list.player\": (\n    name: string,\n    reason: string,\n    expire: string\n  ) => `- \"${name}\" Because: ${reason}, Expiry ${expire}`,\n};\n", "import { Location, Player } from \"@minecraft/server\";\r\nimport {\r\n  LiteralArgumentType,\r\n  IArgumentType,\r\n  LocationArgumentType,\r\n  StringArgumentType,\r\n  IntegerArgumentType,\r\n  ArrayArgumentType,\r\n  BooleanArgumentType,\r\n} from \"./ArgumentTypes.js\";\r\nimport { CommandCallback } from \"./Callback.js\";\r\nimport { COMMANDS } from \"./index.js\";\r\nimport type { AppendArgument, ICommandData, ArgReturn } from \"./types\";\r\nexport { ArgumentTypes } from \"./ArgumentTypes\";\r\n\r\nexport class Command<\r\n  Callback extends Function = (ctx: CommandCallback) => void\r\n> {\r\n  /**\r\n   * The Arguments on this command\r\n   */\r\n  children: Command<any>[];\r\n\r\n  /**\r\n   * Function to run when this command is called\r\n   */\r\n  callback: Callback;\r\n\r\n  constructor(\r\n    public data: ICommandData,\r\n    public type?: IArgumentType,\r\n    public depth: number = 0,\r\n    public parent?: Command<any>\r\n  ) {\r\n    if (!data.requires) data.requires = (player: Player) => true;\r\n    this.data = data;\r\n    this.type = type ?? new LiteralArgumentType(this.data.name);\r\n    this.children = [];\r\n    this.depth = depth;\r\n    this.parent = parent;\r\n    this.callback = null;\r\n\r\n    COMMANDS.push(this);\r\n  }\r\n\r\n  /**\r\n   * Adds a ranch to this command of your own type\r\n   * @param type a special type to be added\r\n   * @returns new branch to this command\r\n   */\r\n  argument<T extends IArgumentType>(type: T): ArgReturn<Callback, T[\"type\"]> {\r\n    const cmd = new Command<AppendArgument<Callback, T[\"type\"]>>(\r\n      this.data,\r\n      type,\r\n      this.depth + 1,\r\n      this\r\n    );\r\n    this.children.push(cmd);\r\n    return cmd;\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  string(name: string): ArgReturn<Callback, string> {\r\n    return this.argument(new StringArgumentType(name));\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  int(name: string): ArgReturn<Callback, number> {\r\n    return this.argument(new IntegerArgumentType(name));\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  array<T extends ReadonlyArray<string>>(\r\n    name: string,\r\n    types: T\r\n  ): ArgReturn<Callback, T[number]> {\r\n    return this.argument(new ArrayArgumentType(name, types));\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  boolean(name: string): ArgReturn<Callback, boolean> {\r\n    return this.argument(new BooleanArgumentType(name));\r\n  }\r\n\r\n  /**\r\n   * Adds a argument to this command to add 3 parameters with location types and to return a Location\r\n   * @param name name this argument  should have\r\n   * @returns new branch to this command\r\n   */\r\n  location(name: string): ArgReturn<Callback, Location> {\r\n    const cmd = this.argument(new LocationArgumentType(name));\r\n    if (!name.endsWith(\"*\")) {\r\n      const newArg = cmd.location(name + \"_y*\").location(name + \"_z*\");\r\n      //@ts-ignore\r\n      return newArg;\r\n    }\r\n    //@ts-ignore\r\n    return cmd;\r\n  }\r\n\r\n  /**\r\n   * Adds a subCommand to this argument\r\n   * @param name name this literal should have\r\n   * @returns new branch to this command\r\n   */\r\n  literal(data: ICommandData): Command<Callback> {\r\n    const cmd = new Command<Callback>(\r\n      data,\r\n      new LiteralArgumentType(data.name),\r\n      this.depth + 1,\r\n      this\r\n    );\r\n    this.children.push(cmd);\r\n    return cmd;\r\n  }\r\n\r\n  /**\r\n   * Registers this command and its apendending arguments\r\n   * @param callback what to run when this command gets called\r\n   */\r\n  executes(callback: Callback): Command<Callback> {\r\n    this.callback = callback;\r\n    return this;\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport type { IBanData } from \"../../types.js\";\nimport { durationToMs } from \"../../utils.js\";\n\nexport class Ban {\n  /**\n   * Ban a player for a set length\n   */\n  constructor(\n    player: string | Player,\n    duration?: string,\n    reason: string = \"No Reason\",\n    by: string = \"Smelly Anti Cheat\"\n  ) {\n    const id = player instanceof Player ? player.id : TABLES.ids.get(player);\n    if (!id) throw new Error(`\"${player}\" does not have a saved id!`);\n    length = length ? durationToMs(duration) : null;\n    const data: IBanData = {\n      key: id,\n      playerName: player instanceof Player ? player.name : player,\n      date: Date.now(),\n      length: length,\n      expire: length ? length + Date.now() : null,\n      reason: reason,\n      by: by,\n    };\n    TABLES.bans.set(id, data);\n  }\n}\n", "import { text } from \"../../lang/text.js\";\nimport type { CommandCallback } from \"../../lib/Command/Callback.js\";\nimport { Command, ArgumentTypes } from \"../../lib/Command/Command.js\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { getRole, msToTime } from \"../../utils.js\";\nimport { Ban } from \"../models/Ban.js\";\n\nfunction ban(\n  ctx: CommandCallback,\n  player: string,\n  duration: string,\n  reason: string,\n  by: string\n) {\n  if (TABLES.bans.get(TABLES.ids.get(player)))\n    return ctx.reply(`\u00A7c${player} is already banned`);\n  new Ban(player, duration, reason, ctx.sender.name);\n  ctx.reply(text[\"modules.commands.ban.reply\"](player, duration, reason));\n}\n\nconst root = new Command({\n  name: \"ban\",\n  description: \"Manage bans\",\n  requires: (player) => getRole(player) == \"admin\",\n});\n\nroot\n  .literal({\n    name: \"add\",\n    description: \"Bans a player\",\n  })\n  .argument(new ArgumentTypes.playerName())\n  .executes((ctx, player) => {\n    ban(ctx, player, null, null, ctx.sender.name);\n  })\n  .argument(new ArgumentTypes.duration(\"duration\"))\n  .executes((ctx, player, duration) => {\n    ban(ctx, player, duration, null, ctx.sender.name);\n  })\n  .string(\"reason\")\n  .executes((ctx, player, duration, reason) => {\n    ban(ctx, player, duration, reason, ctx.sender.name);\n  });\n\nroot\n  .literal({\n    name: \"remove\",\n    description: \"unbans a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const banData = TABLES.bans\n      .values()\n      .find((ban) => ban.playerName == playerName);\n    if (!banData) return ctx.reply(`${playerName} is not banned`);\n    if (TABLES.bans.delete(banData.key)) {\n      ctx.reply(`\u00A7a${playerName}\u00A7r has been Unbanned!`);\n    } else {\n      ctx.reply(`\u00A7cFailed to unban ${playerName}`);\n    }\n  });\n\nroot\n  .literal({\n    name: \"list\",\n    description: \"Lists all bans\",\n  })\n  .executes((ctx) => {\n    const bans = TABLES.bans.values();\n    if (bans.length == 0) return ctx.sender.tell(`\u00A7cNo one is banned!`);\n    ctx.sender.tell(`\u00A72--- Showing Bans (${bans.length}) ---`);\n    for (const ban of bans) {\n      ctx.sender.tell(\n        text[\"commands.ban.list.player\"](\n          ban.playerName,\n          ban.reason,\n          ban.expire ? msToTime(ban.length) : \"Forever\"\n        )\n      );\n    }\n  });\n", "import { Command } from \"../../lib/Command/Command\";\nimport { TABLES } from \"../../lib/Database/tables\";\nimport { getRole } from \"../../utils\";\n\nconst dbcm = new Command({\n  name: \"database\",\n  description: \"Interacts with SA Database\",\n  aliases: [\"db\"],\n  requires: (player) => getRole(player) == \"admin\",\n});\n\ndbcm\n  .literal({\n    name: \"get\",\n  })\n  .string(\"table\")\n  .string(\"key\")\n  .executes((ctx, table, key) => {\n    try {\n      const data = TABLES[table as keyof typeof TABLES].get(key);\n      if (data) {\n        ctx.reply(data);\n      } else {\n        ctx.reply(`No data could be found for key ${key}`);\n      }\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n\ndbcm\n  .literal({\n    name: \"set\",\n  })\n  .string(\"table\")\n  .string(\"key\")\n  .string(\"value\")\n  .executes((ctx, table, key, value) => {\n    try {\n      TABLES[table as keyof typeof TABLES].set(key, value);\n      ctx.reply(`Set Key: \"${key}\", to value: \"${value}\" on table: \"${table}\"`);\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n\ndbcm\n  .literal({\n    name: \"clear\",\n  })\n  .string(\"table\")\n  .executes((ctx, table) => {\n    try {\n      TABLES[table as keyof typeof TABLES].clear();\n      ctx.reply(`Cleared Table ${table}`);\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n", "import { ArgumentTypes, Command } from \"../../lib/Command/Command.js\";\nimport { getRole } from \"../../utils.js\";\n\nnew Command({\n  name: \"ecwipe\",\n  description: \"Clears a players ender chest\",\n  requires: (player) => getRole(player) == \"admin\",\n})\n  .argument(new ArgumentTypes.player(\"player\"))\n  .executes((ctx, player) => {\n    for (let i = 0; i < 27; i++) {\n      player.runCommand(`replaceitem entity @s slot.enderchest ${i} air`);\n    }\n    ctx.reply(`Cleared ${player.name} Ender chest!`);\n  });\n", "import { Player } from \"@minecraft/server\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport type { IFreezeData } from \"../../types.js\";\n\nexport class Freeze {\n  /**\n   * Freeze a player\n   */\n  constructor(player: Player, reason: string = \"No Reason\") {\n    const data: IFreezeData = {\n      player: player.name,\n      key: player.id,\n      reason: reason,\n      location: {\n        x: player.location.x,\n        y: player.location.y,\n        z: player.location.z,\n        dimension: player.dimension.id,\n      },\n    };\n    TABLES.freezes.set(player.id, data);\n  }\n}\n", "import { ArgumentTypes, Command } from \"../../lib/Command/Command.js\";\nimport { Freeze } from \"../models/Freeze.js\";\nimport { getRole } from \"../../utils.js\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { text } from \"../../lang/text.js\";\n\nconst root = new Command({\n  name: \"freeze\",\n  description: \"Manage Freezes\",\n  requires: (player) => getRole(player) == \"admin\",\n});\n\nroot\n  .literal({\n    name: \"add\",\n    description: \"Freezes a player\",\n  })\n  .argument(new ArgumentTypes.player(\"player\"))\n  .string(\"reason\")\n  .executes((ctx, player, reason) => {\n    new Freeze(player, reason);\n    ctx.reply(\n      `\u00A7cFroze \u00A7f\"\u00A7a${player.name}\u00A7f\" Because: \"${reason}\" \u00A7aSuccessfully`\n    );\n    ctx.sender.tell(\n      `\u00A7cYou have been frozen by \u00A7f\"\u00A7a${ctx.sender.name}\u00A7f\" Because: \"${reason}\"`\n    );\n  });\n\nroot\n  .literal({\n    name: \"remove\",\n    description: \"unfreezes a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const freeze = TABLES.freezes\n      .values()\n      .find((freze) => freze.player == playerName);\n    if (!freeze) return ctx.reply(`${playerName} is not frozen`);\n\n    TABLES.freezes.delete(freeze.key);\n    ctx.reply(`\u00A7a${playerName}\u00A7r has been UnFrozen!`);\n  });\n\nroot\n  .literal({\n    name: \"list\",\n    description: \"Lists all freezes\",\n  })\n  .executes((ctx) => {\n    const freezes = TABLES.freezes.values();\n    if (freezes.length == 0) return ctx.sender.tell(`\u00A7cNo one is frozen!`);\n    ctx.sender.tell(`\u00A72--- Showing Freezes (${freezes.length}) ---`);\n    for (const freeze of freezes) {\n      ctx.sender.tell(\n        text[\"commands.freeze.list.player\"](freeze.player, freeze.reason)\n      );\n    }\n  });\n", "import { Player } from \"@minecraft/server\";\nimport { PREFIX } from \"../../config/commands.js\";\nimport {\n  IArgumentReturnData,\n  IArgumentType,\n} from \"../../lib/Command/ArgumentTypes.js\";\nimport { Command } from \"../../lib/Command/Command.js\";\nimport { COMMANDS } from \"../../lib/Command/index.js\";\n\nclass CommandNameArgumentType implements IArgumentType {\n  type: string;\n  typeName = \"CommandName\";\n  matches(value: string): IArgumentReturnData<string> {\n    return {\n      success: Boolean(\n        COMMANDS.find((c) => c.depth == 0 && c.data.name == value)\n      ),\n      value: value,\n    };\n  }\n  fail(value: string): string {\n    return `\"${value}\" is not a vaild command`;\n  }\n  constructor(public name: string) {}\n}\n\n/**\n * Sends text in chat relation to the args in the command to player\n */\nfunction sendCommandType(\n  baseCommand: Command,\n  args: Command[],\n  player: Player\n) {\n  player.tell(\n    `${PREFIX}${baseCommand.data.name} ${args\n      .map((a) =>\n        a.type.typeName == \"literal\"\n          ? a.data.name\n          : `<${a.type.name}: ${a.type.typeName}>`\n      )\n      .join(\" \")}`\n  );\n}\n\nfunction sendArguments(bc: Command, c: Command, args: Command[], p: Player) {\n  if (!c.data?.requires(p)) return;\n  if (c.callback) {\n    // command has a callback\n    sendCommandType(bc, c.depth == 0 ? args : args.concat(c), p);\n  }\n  if (c.children.length > 0) {\n    // cmd has arguments\n    for (const child of c.children) {\n      sendArguments(bc, child, c.depth == 0 ? args : args.concat(c), p);\n    }\n  }\n}\n\nfunction sendPageHeader(player: Player, p: number, maxPages: number) {\n  player.tell(\n    `\u00A72--- Showing help page ${p} of ${maxPages} (${PREFIX}help <page: int>) ---`\n  );\n}\n\nfunction getMaxPages(player: Player): number {\n  const cmds = COMMANDS.filter((c) => c.depth == 0 && c.data?.requires(player));\n  if (cmds.length == 0) return 0;\n  return Math.ceil(cmds.length / 5);\n}\n\nconst root = new Command({\n  name: \"help\",\n  description: \"Provides help/list of commands.\",\n  aliases: [\"?\", \"h\"],\n}).executes((ctx) => {\n  // show page 1\n  const maxPages = getMaxPages(ctx.sender);\n  const cmds = COMMANDS.filter(\n    (c) => c.depth == 0 && c.data?.requires(ctx.sender)\n  ).slice(1 * 5 - 5, 1 * 5);\n  sendPageHeader(ctx.sender, 1, maxPages);\n  for (const cmd of cmds) {\n    sendArguments(cmd, cmd, [], ctx.sender);\n  }\n});\n\nroot.int(\"page\").executes((ctx, p) => {\n  // shows page\n  const maxPages = getMaxPages(ctx.sender);\n  if (p > maxPages) p = maxPages;\n  const cmds = COMMANDS.filter(\n    (c) => c.depth == 0 && c.data?.requires(ctx.sender)\n  ).slice(p * 5 - 5, p * 5);\n  sendPageHeader(ctx.sender, p, maxPages);\n  for (const cmd of cmds) {\n    sendArguments(cmd, cmd, [], ctx.sender);\n  }\n});\n\nroot\n  .argument(new CommandNameArgumentType(\"command\"))\n  .executes((ctx, command) => {\n    // shows command\n    const cmd = COMMANDS.filter(\n      (c) => c.depth == 0 && c.data.name == command\n    )[0];\n    ctx.sender.tell(\n      `\u00A7e${cmd.data.name}: ${\n        cmd.data.aliases ? `aliases (${cmd.data.aliases.join(\", \")})` : \"\"\n      }`\n    );\n    ctx.sender.tell(`\u00A7e${cmd.data.description}`);\n    ctx.sender.tell(`Usage:`);\n    sendArguments(cmd, cmd, [], ctx.sender);\n  });\n", "import { world } from \"@minecraft/server\";\r\nimport { text } from \"../../lang/text.js\";\r\nimport { Command } from \"../../lib/Command/Command.js\";\r\nimport { getRole, isLockedDown, kick, setLockDown } from \"../../utils.js\";\r\n\r\nnew Command({\r\n  name: \"lockdown\",\r\n  description: \"Toggles the servers lockdown, meaning noone can join\",\r\n  requires: (player) => getRole(player) == \"admin\",\r\n}).executes((ctx) => {\r\n  if (isLockedDown()) {\r\n    setLockDown(false);\r\n    ctx.sender.tell(`Unlocked the server!`);\r\n  } else {\r\n    setLockDown(true);\r\n    for (const player of world.getPlayers()) {\r\n      if (getRole(player) == \"admin\") continue;\r\n      kick(player, text[\"lockdown.kick.message\"]());\r\n    }\r\n    ctx.sender.tell(`Locked down the server, no one can join`);\r\n  }\r\n});\r\n", "import { Player } from \"@minecraft/server\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport type { IMuteData } from \"../../types.js\";\nimport { durationToMs } from \"../../utils.js\";\n\nexport class Mute {\n  length: number;\n  /**\n   * Gets the mute data for this player\n   */\n  static getMuteData(player: Player): IMuteData {\n    return TABLES.mutes.get(player.name);\n  }\n  /**\n   * Mutes a player for a length\n   */\n  constructor(\n    player: Player,\n    duration?: string,\n    reason: string = \"No Reason\",\n    by: string = \"Smelly Anti Cheat\"\n  ) {\n    player.runCommand(`ability @s mute true`);\n    const msLength = duration ? durationToMs(duration) : null;\n    const data: IMuteData = {\n      player: player.name,\n      date: Date.now(),\n      duration: msLength,\n      expire: msLength ? msLength + Date.now() : null,\n      reason: reason,\n      by: by,\n    };\n    TABLES.mutes.set(player.name, data);\n  }\n}\n", "import { ArgumentTypes, Command } from \"../../lib/Command/Command.js\";\nimport { Mute } from \"../models/Mute.js\";\nimport { getRole, msToTime } from \"../../utils.js\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { text } from \"../../lang/text.js\";\n\nconst root = new Command({\n  name: \"mute\",\n  description: \"Manage Mutes\",\n  requires: (player) => [\"admin\", \"moderator\"].includes(getRole(player)),\n});\n\nroot\n  .literal({\n    name: \"add\",\n    description: \"Mutes a player\",\n  })\n  .argument(new ArgumentTypes.player(\"player\"))\n  .argument(new ArgumentTypes.duration(\"duration\"))\n  .string(\"reason\")\n  .executes((ctx, player, duration, reason) => {\n    new Mute(player, duration, reason, ctx.sender.name);\n    ctx.reply(\n      `\u00A7cMuted \u00A7f\"\u00A7a${player.name}\u00A7f\" \u00A7cfor ${duration} Because: \"${reason}\" \u00A7aSuccessfully`\n    );\n    player.tell(\n      `\u00A7cYou have been muted by \u00A7f\"${ctx.sender.name}\" \u00A7cfor ${duration} Because: \"${reason}\"`\n    );\n  });\n\nroot\n  .literal({\n    name: \"remove\",\n    description: \"unmutes a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const mute = TABLES.mutes\n      .values()\n      .find((mute) => mute.player == playerName);\n    if (!mute) return ctx.reply(`${playerName} is not muted!`);\n\n    TABLES.mutes.delete(mute.player);\n    try {\n      ctx.sender.runCommand(`ability \"${playerName}\" mute false`);\n    } catch (error) {}\n    ctx.reply(`\u00A7a${playerName}\u00A7r has been UnMuted!`);\n  });\n\nroot\n  .literal({\n    name: \"list\",\n    description: \"Lists all feeezes\",\n  })\n  .executes((ctx) => {\n    const mutes = TABLES.mutes.values();\n    if (mutes.length == 0) return ctx.sender.tell(`\u00A7cNo one is muted!`);\n    ctx.sender.tell(`\u00A72--- Showing Mutes (${mutes.length}) ---`);\n    for (const mute of mutes) {\n      ctx.sender.tell(\n        text[\"commands.mutes.list.player\"](\n          mute.player,\n          mute.reason,\n          mute.expire ? msToTime(mute.expire) : \"Forever\"\n        )\n      );\n    }\n  });\n", "import { Dimension, Entity, Location } from \"@minecraft/server\";\r\nimport { clearNpcLocations, NPC_LOCATIONS } from \"../../index.js\";\r\nimport { TABLES } from \"../../lib/Database/tables.js\";\r\nimport type { INpcLocation } from \"../../types.js\";\r\n\r\nexport class Npc {\r\n  /**\r\n   * Checks if a entity is a vaild npc\r\n   * @param entity npc\r\n   */\r\n  static isVaild(entity: Entity): boolean {\r\n    if (entity.typeId != \"minecraft:npc\") return false;\r\n    if (NPC_LOCATIONS.find((l) => l.equals(entity.location))) return true;\r\n    return TABLES.npcs.keys().find((key) => entity.id == key) ? true : false;\r\n  }\r\n  /**\r\n   * Adds a new verifed npc to the world\r\n   */\r\n  constructor(location: Location, dimension: Dimension) {\r\n    NPC_LOCATIONS.push(location);\r\n    const entity = dimension.spawnEntity(\"minecraft:npc\", location);\r\n\r\n    const data: INpcLocation = {\r\n      dimension: entity.dimension.id,\r\n      x: entity.location.x,\r\n      y: entity.location.y,\r\n      z: entity.location.z,\r\n    };\r\n    TABLES.npcs.set(entity.id, data);\r\n    clearNpcLocations();\r\n  }\r\n}\r\n", "import { Command } from \"../../lib/Command/Command.js\";\nimport { getRole } from \"../../utils.js\";\nimport { Npc } from \"../models/Npc.js\";\n\nnew Command({\n  name: \"npc\",\n  description: \"Spawns a npc at your coordinates\",\n  requires: (player) => getRole(player) == \"admin\",\n}).executes((ctx) => {\n  new Npc(ctx.sender.location, ctx.sender.dimension);\n  ctx.reply(`Spawned a verifed npc at your current location`);\n});\n", "import { Command } from \"../../lib/Command/Command.js\";\nimport { world } from \"@minecraft/server\";\n\nnew Command({\n  name: \"ping\",\n  description: \"Returns the current TPS of the servers ping\",\n}).executes((ctx) => {\n  let pingTick = world.events.tick.subscribe(({ deltaTime }) => {\n    ctx.reply(`Pong! Current TPS: ${1 / deltaTime}`);\n    world.events.tick.unsubscribe(pingTick);\n  });\n});\n", "import { BlockLocation } from \"@minecraft/server\";\nimport { Command } from \"../../lib/Command/Command.js\";\nimport { Region } from \"../models/Region.js\";\nimport { getRole } from \"../../utils.js\";\n\nconst command = new Command({\n  name: \"region\",\n  description: \"Create a Region\",\n  requires: (player) => getRole(player) == \"admin\",\n});\n\ncommand\n  .literal({\n    name: \"add\",\n    description: \"Adds a new protection region\",\n  })\n  .int(\"from_x\")\n  .int(\"from_z\")\n  .int(\"to_x\")\n  .int(\"to_z\")\n  .executes((ctx, from_x, from_z, to_x, to_z) => {\n    new Region(\n      { x: from_x, z: from_z },\n      { x: to_x, z: to_z },\n      ctx.sender.dimension.id\n    );\n    ctx.reply(\n      `Created Region From ${from_x} -64 ${from_z} ${to_x} 320 ${to_z}`\n    );\n  });\n\ncommand\n  .literal({\n    name: \"remove\",\n    description: \"Removes a region at the players current postion\",\n  })\n  .executes((ctx) => {\n    const loc = new BlockLocation(\n      ctx.sender.location.x,\n      ctx.sender.location.y,\n      ctx.sender.location.z\n    );\n    const r = Region.removeRegionAtBlockLocation(loc, ctx.sender.dimension.id);\n    if (r) {\n      ctx.reply(`Removed Region at ${loc.x} ${loc.y} ${loc.z}`);\n    } else {\n      ctx.reply(`Failed to find/remove region at ${loc.x} ${loc.y} ${loc.z}`);\n    }\n  });\n\ncommand\n  .literal({\n    name: \"removeAll\",\n    description: \"Removes all regions\",\n  })\n  .executes((ctx) => {\n    Region.getAllRegions().forEach((r) => r.delete());\n    ctx.reply(`Removed All regions`);\n  });\n\ncommand\n  .literal({\n    name: \"list\",\n    description: \"Lists all regions and positions\",\n  })\n  .executes((ctx) => {\n    const regions = Region.getAllRegions();\n    for (const region of regions) {\n      ctx.reply(\n        `Region from ${region.from.x}, ${region.from.z} to ${region.to.x}, ${region.to.z} in dimension ${region.dimensionId}`\n      );\n    }\n    if (regions.length == 0) return ctx.reply(`No regions have been made yet`);\n  });\n\nconst permission = command.literal({\n  name: \"permission\",\n  description: \"Handels permissions for regions\",\n});\n\npermission\n  .literal({\n    name: \"set\",\n    description:\n      \"Sets a certin permission on the region the player is currently in to a value\",\n  })\n  .array(\"key\", [\"doorsAndSwitches\", \"openContainers\", \"pvp\"] as const)\n  .boolean(\"value\")\n  .executes((ctx, key, value) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    region.changePermission(key, value);\n    ctx.reply(`Changed permision ${key} to ${value}`);\n  });\n\npermission\n  .literal({\n    name: \"list\",\n    description: \"Lists the permissions for the current region\",\n  })\n  .executes((ctx) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    ctx.reply(\n      `Current region permissions ${JSON.stringify(region.permissions)}`\n    );\n  });\n\nconst entityCommands = permission.literal({\n  name: \"entities\",\n  description: \"Holds the subCommands for adding or removing allowedEntitys\",\n});\n\nentityCommands\n  .literal({\n    name: \"add\",\n    description: \"Adds a entity to the allowed entitys list\",\n  })\n  .string(\"entity\")\n  .executes((ctx, entity) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    const currentAllowedEntitys = region.permissions.allowedEntitys;\n    currentAllowedEntitys.push(entity);\n    region.changePermission(\"allowedEntitys\", currentAllowedEntitys);\n    ctx.reply(\n      `Added entity ${entity} to the allowed entitys of the region your currently standing in`\n    );\n  });\n\nentityCommands\n  .literal({\n    name: \"remove\",\n    description: \"Removes a entity from the allowed entitys in the region\",\n  })\n  .string(\"entity\")\n  // @ts-ignore\n  .executes((ctx, entity) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    let currentAllowedEntitys = region.permissions.allowedEntitys;\n    if (!currentAllowedEntitys.includes(entity))\n      return ctx.reply(\n        `The entity ${entity} is not allowed to enter the region`\n      );\n    currentAllowedEntitys = currentAllowedEntitys.filter((v) => v != entity);\n    region.changePermission(\"allowedEntitys\", currentAllowedEntitys);\n    ctx.reply(\n      `Removed entity ${entity} to the allowed entitys of the region your currently standing in`\n    );\n  });\n", "import { ItemStack, Player, TickEvent } from \"@minecraft/server\";\r\nimport type { BlockInventory } from \"./modules/models/BlockInventory\";\r\n\r\n/**\r\n * The roles that are in this server\r\n */\r\nexport enum ROLES {\r\n  member,\r\n  admin,\r\n  moderator,\r\n  builder,\r\n}\r\n\r\nexport interface IMsOptions {\r\n  compactDuration?: string;\r\n  fullDuration?: string;\r\n  avoidDuration?: Array<string>;\r\n}\r\n\r\nexport interface IplayerTickRegister {\r\n  /**\r\n   * callback to send\r\n   */\r\n  callback: (player: Player, event: TickEvent) => void;\r\n  /**\r\n   * delay in ticks\r\n   */\r\n  delay: number;\r\n  /**\r\n   * the last tick it sent a callback\r\n   */\r\n  lastCall: number;\r\n}\r\n\r\nexport interface ISlotChangeReturn {\r\n  /**\r\n   * Slot that changed\r\n   */\r\n  slot: number;\r\n  /**\r\n   * the item that was grabbed / put\r\n   */\r\n  item: ItemStack;\r\n}\r\n\r\nexport interface IEvents {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface IContainerLocation {\r\n  [key: string]: BlockInventory;\r\n}\r\n\r\nexport interface IBanData {\r\n  key: string;\r\n  playerName: string;\r\n  date: number;\r\n  length: number;\r\n  expire: number | null;\r\n  reason: string;\r\n  by: string;\r\n}\r\n\r\nexport interface IFreezeData {\r\n  player: string;\r\n  key: string;\r\n  reason: string;\r\n  location: {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    dimension: string;\r\n  };\r\n}\r\n\r\nexport interface IMuteData {\r\n  player: string;\r\n  date: number;\r\n  duration: number | null;\r\n  expire: number | null;\r\n  reason: string;\r\n  by: string;\r\n}\r\n\r\nexport interface INpcLocation {\r\n  dimension: string;\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n}\r\n\r\nexport interface IRegionDB {\r\n  dimensionId: string;\r\n  from: IRegionCords;\r\n  to: IRegionCords;\r\n  key: string;\r\n  permissions: IRegionPermissions;\r\n}\r\n\r\nexport interface IRegionCords {\r\n  x: number;\r\n  z: number;\r\n}\r\n\r\nexport interface IRegionPermissions {\r\n  /**\r\n   * if the player can use chests, defualt: true\r\n   */\r\n  doorsAndSwitches: Boolean;\r\n  /**\r\n   * if the player can use doors, default: true\r\n   */\r\n  openContainers: Boolean;\r\n  /**\r\n   * if players can fight, default: false\r\n   */\r\n  pvp: Boolean;\r\n  /**\r\n   * the entitys allowed in this region\r\n   */\r\n  allowedEntitys: Array<string>;\r\n}\r\n\r\nexport interface IChangePlayerRoleData {\r\n  /**\r\n   * The name of the player\r\n   */\r\n  playerName: string;\r\n  /**\r\n   * The role that the player should be set to\r\n   */\r\n  role: keyof typeof ROLES;\r\n}\r\n\r\nexport type durtationSegmentType = \"y\" | \"w\" | \"d\" | \"h\" | \"m\" | \"s\" | \"ms\";\r\nexport type durationSegment = `${number}${durtationSegmentType}`;\r\n", "import { ROLES } from \"../../types\";\nimport { ArgumentTypes, Command } from \"../../lib/Command/Command\";\nimport { getRole, isServerOwner, setRole } from \"../../utils.js\";\n\n// Helper\nconst StringIsNumber = (value: any) => isNaN(Number(value)) === false;\n\n// Turn enum into array\nfunction ToArray(enumme: any) {\n  return (\n    Object.keys(enumme)\n      // @ts-ignore\n      .filter(StringIsNumber)\n      .map((key) => enumme[key])\n  );\n}\n\nconst root = new Command({\n  name: \"role\",\n  description: \"Changes the role for a player\",\n  requires: (player) => getRole(player) == \"admin\" || isServerOwner(player),\n});\n\nroot\n  .literal({\n    name: \"set\",\n    description: \"Sets the role for a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .argument(new ArgumentTypes.array(\"role\", ToArray(ROLES) as string[]))\n  .executes((ctx, playerName, role) => {\n    setRole(playerName, role as keyof typeof ROLES);\n    ctx.reply(`Changed role of ${playerName} to ${role}`);\n  });\n\nroot\n  .literal({\n    name: \"get\",\n    description: \"Gets the role of a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    ctx.reply(`${playerName} has role: ${getRole(playerName)}`);\n  });\n", "import { Player } from \"@minecraft/server\";\r\nimport { ActionFormData } from \"@minecraft/server-ui\";\r\nimport { TIMEOUT_THRESHOLD } from \"../../../config/form\";\r\nimport type { ButtonCallback, IActionFormButton } from \"../types\";\r\n\r\nexport class ActionForm {\r\n  /**\r\n   *  the title that this form should have\r\n   */\r\n  title?: string;\r\n  /**\r\n   * extra text that should be displayed in the form\r\n   */\r\n  body?: string;\r\n  /**\r\n   * The buttons this form has\r\n   */\r\n  buttons: IActionFormButton[];\r\n\r\n  /**\r\n   * The default minecraft form this form is based on\r\n   */\r\n  form: ActionFormData;\r\n\r\n  /**\r\n   * The amount of times it takes to show this form in ms\r\n   * if this value goes above 200 it will time out\r\n   */\r\n  triedToShow: number;\r\n\r\n  /**\r\n   * Creates a new form to be shown to a player\r\n   * @param title the title that this form should have\r\n   * @param body extra text that should be displayed in the form\r\n   */\r\n  constructor(title?: string, body?: string) {\r\n    this.title = title;\r\n    this.body = body;\r\n    this.form = new ActionFormData();\r\n\r\n    if (title) this.form.title(title);\r\n    if (body) this.form.body(body);\r\n\r\n    this.buttons = [];\r\n\r\n    this.triedToShow = 0;\r\n  }\r\n\r\n  /**\r\n   * Adds a button to this form\r\n   * @param text text to show on this button\r\n   * @param iconPath the path this button shows\r\n   * @param callback what happens when this button is clicked\r\n   * @example ```\r\n   * addButton(\"settings\", \"textures/items/sum\")\r\n   * ```\r\n   */\r\n  addButton(\r\n    text: string,\r\n    iconPath: string = null,\r\n    callback: ButtonCallback\r\n  ): ActionForm {\r\n    this.buttons.push({\r\n      text: text,\r\n      iconPath: iconPath,\r\n      callback: callback,\r\n    });\r\n    this.form.button(text, iconPath);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows this form to the player\r\n   * @param player player to show to\r\n   */\r\n  show(player: Player): void {\r\n    this.form.show(player).then((response) => {\r\n      if (response.canceled) {\r\n        if (response.cancelationReason == \"userBusy\") {\r\n          // check time and reshow form\r\n          if (this.triedToShow > TIMEOUT_THRESHOLD)\r\n            return player.tell(\r\n              `\u00A7cForm Timeout: tried to show form, but you were busy (close chat after running command)`\r\n            );\r\n          this.triedToShow++;\r\n          this.show(player);\r\n        }\r\n        return;\r\n      }\r\n      this.buttons[response.selection].callback?.();\r\n    });\r\n  }\r\n}\r\n", "/**\r\n * If a form tries to show for longer than this value\r\n * the form will stop trying to show. this is used for a timeout\r\n * because if someone trys to open a form but doesnt close chat\r\n */\r\nexport const TIMEOUT_THRESHOLD = 200;\r\n", "import { ItemTypes, MinecraftBlockTypes, Player } from \"@minecraft/server\";\r\nimport { APPEAL_LINK } from \"../../config/app\";\r\nimport { ENCHANTMENTS } from \"../../config/enchantments\";\r\nimport { BANNED_BLOCKS, BANNED_ITEMS } from \"../../config/moderation\";\r\nimport { TABLES } from \"../../lib/Database/tables\";\r\nimport { ModalForm } from \"../../lib/Form/Models/ModelForm\";\r\n\r\nexport function showPage1(player: Player) {\r\n  new ModalForm(\"Manage Banned Items\")\r\n    .addDropdown(\"Add/Remove Item\", [\"add\", \"remove\"] as const, 0)\r\n    .addTextField(\"Item Id\", \"minecraft:string\")\r\n    .show(player, (ctx, method, id) => {\r\n      if (!ItemTypes.get(id)?.id)\r\n        return ctx.error(\r\n          `\u00A7c\"${id}\" is not a vaild item id, note: this item must be either a item in a behavior pack or a default minecraft item`\r\n        );\r\n      if (method == \"add\") {\r\n        // add item to list\r\n        let items: Array<String> =\r\n          TABLES.config.get(\"banned_items\") ?? BANNED_ITEMS;\r\n        if (items.includes(id))\r\n          return ctx.error(`\u00A7cItem \"${id}\" is already banned`);\r\n        items.push(id);\r\n        TABLES.config.set(\"banned_items\", items);\r\n        player.tell(`Banned the item \"${id}\"`);\r\n      } else {\r\n        // remove item\r\n        let items: string[] = TABLES.config.get(\"banned_items\") ?? BANNED_ITEMS;\r\n        if (!items.includes(id))\r\n          return ctx.error(`\u00A7cItem: \"${id}\" is not banned`);\r\n        items = items.filter((p) => p != id);\r\n        TABLES.config.set(\"banned_items\", items);\r\n        player.tell(`Removed Banned item \"${id}\"`);\r\n      }\r\n    });\r\n}\r\n\r\nexport function showPage2(player: Player) {\r\n  new ModalForm(\"Manage Banned Blocks\")\r\n    .addDropdown(\"Add/Remove Block\", [\"add\", \"remove\"] as const, 0)\r\n    .addTextField(\"Block Id\", \"minecraft:barrier\")\r\n    .show(player, (ctx, method, id) => {\r\n      if (!MinecraftBlockTypes.get(id)?.id)\r\n        return ctx.error(\r\n          `\u00A7c\"${id}\" is not a vaild block id, note: this item must be either a block in a behavior pack or a default minecraft block`\r\n        );\r\n      if (method == \"add\") {\r\n        // add item to list\r\n        let blocks: string[] =\r\n          TABLES.config.get(\"banned_blocks\") ?? BANNED_BLOCKS;\r\n        if (blocks.includes(id))\r\n          return ctx.error(`\u00A7cBlock \"${id}\" is already banned`);\r\n        blocks.push(id);\r\n        TABLES.config.set(\"banned_blocks\", id);\r\n        player.tell(`Banned the block \"${id}\"`);\r\n      } else {\r\n        // remove item\r\n        let blocks: string[] =\r\n          TABLES.config.get(\"banned_blocks\") ?? BANNED_BLOCKS;\r\n        if (!blocks.includes(id))\r\n          return ctx.error(`block: \"${id}\" is not banned`);\r\n        blocks = blocks.filter((p) => p != id);\r\n        TABLES.config.set(\"banned_blocks\", id);\r\n        player.tell(`Removed Banned block \"${id}\"`);\r\n      }\r\n    });\r\n}\r\n\r\ntype MaxEnchantments = {\r\n  [key: string]: number;\r\n};\r\n\r\nexport function showPage3(player: Player) {\r\n  new ModalForm(\"Manage Enchantment Levels\")\r\n    .addDropdown(\"Enchantment to change\", Object.keys(ENCHANTMENTS), 0)\r\n    .addTextField(\"Level (number)\", \"5\")\r\n    .show(player, (ctx, enchantment, levelstring) => {\r\n      if (isNaN(levelstring as any))\r\n        return ctx.error(\r\n          `\u00A7c\"${levelstring}\" is not a number, please enter a value like, \"3\", \"9\", etc.`\r\n        );\r\n      const level = parseInt(levelstring);\r\n      let enchants: MaxEnchantments =\r\n        TABLES.config.get(\"enchantments\") ?? ENCHANTMENTS;\r\n      enchants[enchantment] = level;\r\n      TABLES.config.set(\"enchantments\", enchants);\r\n      player.tell(`Set max level for ${enchantment} to ${level}`);\r\n    });\r\n}\r\n\r\nexport function showPage4(player: Player) {\r\n  new ModalForm(\"Manage Appeal Link\")\r\n    .addTextField(\"Appeal Link\", APPEAL_LINK)\r\n    .show(player, (ctx, link) => {\r\n      TABLES.config.set(\"appealLink\", link);\r\n      player.tell(`Changed the servers appeal link to ${link}`);\r\n    });\r\n}\r\n", "/*\r\n|--------------------------------------------------------------------------\r\n| Version\r\n|--------------------------------------------------------------------------\r\n|\r\n| This is the version of rubedo recomended to NOT CHANGE could cause bugs.\r\n|\r\n*/\r\nexport const VERSION = \"2.5.0-beta\";\r\n\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Game Version\r\n|--------------------------------------------------------------------------\r\n|\r\n| This is the version of minecraft that this version of rubedo\r\n| was made for its a simple constant to tell creators what version\r\n| this gametest api is supposed to work perfectly for.\r\n|\r\n*/\r\nexport const GAME_VERSION = \"1.19.41\";\r\n\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Appeal Link\r\n|--------------------------------------------------------------------------\r\n|\r\n| This is the appeal link that gets showed when someone gets banned\r\n| this link pops up at the bottom of the ban message to show\r\n| where they can appeal there ban.\r\n|\r\n*/\r\nexport const APPEAL_LINK = \"https://discord.gg/dMa3A5UYKX\";\r\n", "/*\n|--------------------------------------------------------------------------\n| Enchantments\n|--------------------------------------------------------------------------\n|\n| This is the default enchantments that can be added to items\n| each enchantment is set to its desired max level this can be changed here\n| or in game using -config enchantments set \"enchantment\" value\n|\n*/\nexport const ENCHANTMENTS = {\n  aquaAffinity: 1,\n  baneOfArthropods: 5,\n  binding: 1,\n  blastProtection: 4,\n  channeling: 1,\n  depthStrider: 3,\n  efficiency: 5,\n  featherFalling: 4,\n  fireAspect: 2,\n  fireProtection: 4,\n  flame: 1,\n  fortune: 3,\n  frostWalker: 2,\n  impaling: 5,\n  infinity: 1,\n  knockback: 2,\n  looting: 3,\n  loyalty: 4,\n  luckOfTheSea: 3,\n  lure: 3,\n  mending: 1,\n  multishot: 1,\n  piercing: 4,\n  power: 5,\n  projectileProtection: 4,\n  protection: 4,\n  punch: 2,\n  quickCharge: 3,\n  respiration: 3,\n  riptide: 3,\n  sharpness: 5,\n  silkTouch: 1,\n  smite: 5,\n  soulSpeed: 3,\n  swiftSneak: 4,\n  thorns: 3,\n  unbreaking: 3,\n  vanishing: 1,\n};\n", "/**\n * This is a list of items that are banned from holding\n */\nexport const BANNED_ITEMS = [\n  \"minecraft:beehive\",\n  \"minecraft:bee_nest\",\n  \"minecraft:acacia_standing_sign\",\n  \"minecraft:acacia_wall_sign\",\n  \"minecraft:agent_spawn_egg\",\n  \"minecraft:allay_spawn_egg\",\n  \"minecraft:allow\",\n  \"minecraft:axolotl_bucket\",\n  \"minecraft:axolotl_spawn_egg\",\n  \"minecraft:balloon\",\n  \"minecraft:bamboo_sapling\",\n  \"minecraft:barrier\",\n  \"minecraft:barrier\",\n  \"minecraft:bat_spawn_egg\",\n  \"minecraft:bedrock\",\n  \"minecraft:bee_nest\",\n  \"minecraft:bee_spawn_egg\",\n  \"minecraft:beehive\",\n  \"minecraft:birch_standing_sign\",\n  \"minecraft:birch_wall_sign\",\n  \"minecraft:blackstone_double_slab\",\n  \"minecraft:blaze_spawn_egg\",\n  \"minecraft:border_block\",\n  \"minecraft:brewingstandblock\",\n  \"minecraft:bubble_column\",\n  \"minecraft:camera\",\n  \"minecraft:carrots\",\n  \"minecraft:cat_spawn_egg\",\n  \"minecraft:cave_spider_spawn_egg\",\n  \"minecraft:cave_vines\",\n  \"minecraft:cave_vines_body_with_berries\",\n  \"minecraft:chain_command_block\",\n  \"minecraft:chemical_heat\",\n  \"minecraft:chemistry_table\",\n  \"minecraft:chicken_spawn_egg\",\n  \"minecraft:client_request_placeholder_block\",\n  \"minecraft:cobbled_deepslate_double_slab\",\n  \"minecraft:cod_bucket\",\n  \"minecraft:cod_spawn_egg\",\n  \"minecraft:colored_torch\",\n  \"minecraft:colored_torch_bp\",\n  \"minecraft:colored_torch_rg\",\n  \"minecraft:command_block\",\n  \"minecraft:command_block_minecart\",\n  \"minecraft:compound\",\n  \"minecraft:compoundcreator\",\n  \"minecraft:cow_spawn_egg\",\n  \"minecraft:creeper_spawn_egg\",\n  \"minecraft:crimson_double_slab\",\n  \"minecraft:crimson_standing_sign\",\n  \"minecraft:crimson_wall_sign\",\n  \"minecraft:darkoak_standing_sign\",\n  \"minecraft:darkoak_wall_sign\",\n  \"minecraft:daylight_detector_inverted\",\n  \"minecraft:debug_stick\",\n  \"minecraft:deepslate_brick_double_slab\",\n  \"minecraft:deepslate_tile_double_slab\",\n  \"minecraft:deny\",\n  \"minecraft:dolphin_spawn_egg\",\n  \"minecraft:donkey_spawn_egg\",\n  \"minecraft:double_cut_copper_slab\",\n  \"minecraft:double_wooden_slab\",\n  \"minecraft:drowned_spawn_egg\",\n  \"minecraft:elder_guardian_spawn_egg\",\n  \"minecraft:end_gateway\",\n  \"minecraft:end_portal\",\n  \"minecraft:end_portal_frame\",\n  \"minecraft:enderman_spawn_egg\",\n  \"minecraft:endermite_spawn_egg\",\n  \"minecraft:evoker_spawn_egg\",\n  \"minecraft:exposed_double_cut_copper_slab\",\n  \"minecraft:fire\",\n  \"minecraft:flowing_lava\",\n  \"minecraft:flowing_water\",\n  \"minecraft:fox_spawn_egg\",\n  \"minecraft:frog_spawn_egg\",\n  \"minecraft:frosted_ice\",\n  \"minecraft:ghast_spawn_egg\",\n  \"minecraft:glow_squid_spawn_egg\",\n  \"minecraft:glow_stick\",\n  \"minecraft:glowingobsidian\",\n  \"minecraft:goat_spawn_egg\",\n  \"minecraft:guardian_spawn_egg\",\n  \"minecraft:hard_glass\",\n  \"minecraft:hard_glass_pane\",\n  \"minecraft:hard_stained_glass\",\n  \"minecraft:hard_stained_glass_pane\",\n  \"minecraft:hoglin_spawn_egg\",\n  \"minecraft:horse_spawn_egg\",\n  \"minecraft:husk_spawn_egg\",\n  \"minecraft:ice_bomb\",\n  \"minecraft:info_update\",\n  \"minecraft:info_update2\",\n  \"minecraft:invisible_bedrock\",\n  \"minecraft:invisiblebedrock\",\n  \"minecraft:item.acacia_door\",\n  \"minecraft:item.bed\",\n  \"minecraft:item.beetroot\",\n  \"minecraft:item.birch_door\",\n  \"minecraft:item.cake\",\n  \"minecraft:item.campfire\",\n  \"minecraft:item.cauldron\",\n  \"minecraft:item.chain\",\n  \"minecraft:item.crimson_door\",\n  \"minecraft:item.dark_oak_door\",\n  \"minecraft:item.flower_pot\",\n  \"minecraft:item.frame\",\n  \"minecraft:item.glow_frame\",\n  \"minecraft:item.hopper\",\n  \"minecraft:item.iron_door\",\n  \"minecraft:item.jungle_door\",\n  \"minecraft:item.kelp\",\n  \"minecraft:item.nether_sprouts\",\n  \"minecraft:item.nether_wart\",\n  \"minecraft:item.reeds\",\n  \"minecraft:item.skull\",\n  \"minecraft:item.soul_campfire\",\n  \"minecraft:item.spruce_door\",\n  \"minecraft:item.warped_door\",\n  \"minecraft:item.wheat\",\n  \"minecraft:item.wooden_door\",\n  \"minecraft:jigsaw\",\n  \"minecraft:jungle_standing_sign\",\n  \"minecraft:jungle_wall_sign\",\n  \"minecraft:lava\",\n  \"minecraft:lava_cauldron\",\n  \"minecraft:light_block\",\n  \"minecraft:lit_blast_furnace\",\n  \"minecraft:lit_deepslate_redstone_ore\",\n  \"minecraft:lit_furnace\",\n  \"minecraft:lit_redstone_lamp\",\n  \"minecraft:lit_redstone_ore\",\n  \"minecraft:lit_smoker\",\n  \"minecraft:llama_spawn_egg\",\n  \"minecraft:magma_cube_spawn_egg\",\n  \"minecraft:medicine\",\n  \"minecraft:melon_stem\",\n  \"minecraft:mob_spawner\",\n  \"minecraft:mooshroom_spawn_egg\",\n  \"minecraft:movingBlock\",\n  \"minecraft:moving_block\",\n  \"minecraft:movingblock\",\n  \"minecraft:mule_spawn_egg\",\n  \"minecraft:netherreactor\",\n  \"minecraft:npc_spawn\",\n  \"minecraft:npc_spawn_egg\",\n  \"minecraft:ocelot_spawn_egg\",\n  \"minecraft:oxidized_double_cut_copper_slab\",\n  \"minecraft:panda_spawn_egg\",\n  \"minecraft:parrot_spawn_egg\",\n  \"minecraft:phantom_spawn_egg\",\n  \"minecraft:pig_spawn_egg\",\n  \"minecraft:piglin_brute_spawn_egg\",\n  \"minecraft:piglin_spawn_egg\",\n  \"minecraft:pillager_spawn_egg\",\n  \"minecraft:piston_arm_collision\",\n  \"minecraft:piston_arm_collision\",\n  \"minecraft:pistonarmcollision\",\n  \"minecraft:polar_bear_spawn_egg\",\n  \"minecraft:polished_blackstone_brick_double_slab\",\n  \"minecraft:polished_blackstone_double_slab\",\n  \"minecraft:polished_deepslate_double_slab\",\n  \"minecraft:portal\",\n  \"minecraft:potatoes\",\n  \"minecraft:powder_snow\",\n  \"minecraft:powder_snow_bucket\",\n  \"minecraft:powered_comparator\",\n  \"minecraft:powered_repeater\",\n  \"minecraft:pufferfish_bucket\",\n  \"minecraft:pufferfish_spawn_egg\",\n  \"minecraft:pumpkin_stem\",\n  \"minecraft:rabbit_spawn_egg\",\n  \"minecraft:rapid_fertilizer\",\n  \"minecraft:ravager_spawn_egg\",\n  \"minecraft:real_double_stone_slab\",\n  \"minecraft:real_double_stone_slab2\",\n  \"minecraft:real_double_stone_slab3\",\n  \"minecraft:real_double_stone_slab4\",\n  \"minecraft:redstone_wire\",\n  \"minecraft:repeating_command_block\",\n  \"minecraft:reserved3\",\n  \"minecraft:reserved4\",\n  \"minecraft:reserved6\",\n  \"minecraft:salmon_bucket\",\n  \"minecraft:salmon_spawn_egg\",\n  \"minecraft:sea_turtle_spawn_egg\",\n  \"minecraft:sheep_spawn_egg\",\n  \"minecraft:shulker_spawn_egg\",\n  \"minecraft:silverfish_spawn_egg\",\n  \"minecraft:skeleton_horse_spawn_egg\",\n  \"minecraft:skeleton_spawn_egg\",\n  \"minecraft:slime_spawn_egg\",\n  \"minecraft:soul_fire\",\n  \"minecraft:soul_fire\",\n  \"minecraft:sparkler\",\n  \"minecraft:spawn_egg\",\n  \"minecraft:spawn_egg\",\n  \"minecraft:spawner\",\n  \"minecraft:spider_spawn_egg\",\n  \"minecraft:spruce_standing_sign\",\n  \"minecraft:spruce_wall_sign\",\n  \"minecraft:squid_spawn_egg\",\n  \"minecraft:standing_banner\",\n  \"minecraft:standing_sign\",\n  \"minecraft:stickyPistonArmCollision\",\n  \"minecraft:sticky_piston_arm_collision\",\n  \"minecraft:stonecutter\",\n  \"minecraft:stray_spawn_egg\",\n  \"minecraft:strider_spawn_egg\",\n  \"minecraft:structure_block\",\n  \"minecraft:structure_void\",\n  \"minecraft:tadpole_bucket\",\n  \"minecraft:tadpole_spawn_egg\",\n  \"minecraft:tripwire\",\n  \"minecraft:tropical_fish_bucket\",\n  \"minecraft:tropical_fish_spawn_egg\",\n  \"minecraft:underwater_torch\",\n  \"minecraft:unknown\",\n  \"minecraft:unlit_redstone_ore\",\n  \"minecraft:unpowered_comparator\",\n  \"minecraft:unpowered_repeater\",\n  \"minecraft:vex_spawn_egg\",\n  \"minecraft:villager_spawn_egg\",\n  \"minecraft:vindicator_spawn_egg\",\n  \"minecraft:wall_banner\",\n  \"minecraft:wall_sign\",\n  \"minecraft:wandering_trader_spawn_egg\",\n  \"minecraft:warden_spawn_egg\",\n  \"minecraft:warped_double_slab\",\n  \"minecraft:warped_standing_sign\",\n  \"minecraft:warped_wall_sign\",\n  \"minecraft:water\",\n  \"minecraft:waxed_double_cut_copper_slab\",\n  \"minecraft:waxed_exposed_double_cut_copper_slab\",\n  \"minecraft:waxed_oxidized_double_cut_copper_slab\",\n  \"minecraft:waxed_weathered_double_cut_copper_slab\",\n  \"minecraft:weathered_double_cut_copper_slab\",\n  \"minecraft:witch_spawn_egg\",\n  \"minecraft:wither_spawn_egg\",\n  \"minecraft:wolf_spawn_egg\",\n  \"minecraft:zoglin_spawn_egg\",\n  \"minecraft:zombie_horse_spawn_egg\",\n  \"minecraft:zombie_spawn_egg\",\n  \"minecraft:zombie_villager_spawn_egg\",\n  \"minecraft:zombified_piglin_spawn_egg\",\n];\n\n/**\n * List of blocks that cannot be placed down\n */\nexport const BANNED_BLOCKS = [\n  \"minecraft:moving_block\",\n  \"minecraft:beehive\",\n  \"minecraft:beenest\",\n];\n\n/**\n * A List of all containers a item could be in\n */\nexport const BLOCK_CONTAINERS = [\n  \"minecraft:chest\",\n  //\"minecraft:barrel\",\n  \"minecraft:trapped_chest\",\n  //\"minecraft:dispenser\",\n  //\"minecraft:dropper\",\n  //\"minecraft:furnace\",\n  //\"minecraft:blast_furnace\",\n  //\"minecraft:lit_furnace\",\n  //\"minecraft:lit_blast_furnace\",\n  //\"minecraft:hopper\",\n  //\"minecraft:shulker_box\",\n  //\"minecraft:undyed_shulker_box\",\n];\n\n/**\n * The block size to check for blockContainers\n */\nexport const CHECK_SIZE = { x: 7, y: 7, z: 7 };\n", "import { Player } from \"@minecraft/server\";\r\nimport { ModalFormData } from \"@minecraft/server-ui\";\r\nimport { TIMEOUT_THRESHOLD } from \"../../../config/form\";\r\nimport type { AppendFormField, IModalFormArg, Range } from \"../types\";\r\nimport { FormCallback } from \"./FormCallback\";\r\n\r\nexport class ModalForm<Callback extends Function = (ctx: FormCallback) => void> {\r\n  /**\r\n   *  the title that this form should have\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * The default minecraft form this form is based on\r\n   */\r\n  form: ModalFormData;\r\n\r\n  /**\r\n   * The arguments this form has\r\n   */\r\n  args: IModalFormArg[];\r\n\r\n  /**\r\n   * The amount of times it takes to show this form in ms\r\n   * if this value goes above 200 it will time out\r\n   */\r\n  triedToShow: number;\r\n\r\n  /**\r\n   * Creates a new form to be shown to a player\r\n   * @param title the title that this form should have\r\n   */\r\n  constructor(title?: string) {\r\n    this.title = title;\r\n    this.form = new ModalFormData();\r\n\r\n    if (title) this.form.title(title);\r\n\r\n    this.args = [];\r\n\r\n    this.triedToShow = 0;\r\n  }\r\n\r\n  /**\r\n   * Adds a dropdown to this form\r\n   * @param label label to show on dropdown\r\n   * @param options the availiabe options for this dropdown\r\n   * @param defaultValueIndex the default value index\r\n   * @returns this\r\n   */\r\n  addDropdown<T extends ReadonlyArray<string>>(\r\n    label: string,\r\n    options: T,\r\n    defaultValueIndex?: number\r\n  ): ModalForm<AppendFormField<Callback, T[number]>> {\r\n    // @ts-ignore\r\n    this.args.push({ type: \"dropdown\", options: options });\r\n    // @ts-ignore\r\n    this.form.dropdown(label, options, defaultValueIndex);\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a slider to this form\r\n   * @param label label to be shown on this slider\r\n   * @param minimumValue the smallest value this can be\r\n   * @param maximumValue the maximum value this can be\r\n   * @param valueStep how this slider increments\r\n   * @param defaultValue the default value in slider\r\n   * @returns this\r\n   */\r\n  addSlider<T extends number, U extends number>(\r\n    label: string,\r\n    minimumValue: T,\r\n    maximumValue: U,\r\n    valueStep: number,\r\n    defaultValue?: number\r\n  ): ModalForm<AppendFormField<Callback, Range<T, U>>> {\r\n    this.args.push({ type: \"slider\" });\r\n    this.form.slider(\r\n      label,\r\n      minimumValue,\r\n      maximumValue,\r\n      valueStep,\r\n      defaultValue\r\n    );\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a toggle to this form\r\n   * @param label the name of this toggle\r\n   * @param defaultValue the default toggle value could be true or false\r\n   * @returns\r\n   */\r\n  addToggle(\r\n    label: string,\r\n    defaultValue?: boolean\r\n  ): ModalForm<AppendFormField<Callback, boolean>> {\r\n    this.args.push({ type: \"toggle\" });\r\n    this.form.toggle(label, defaultValue);\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a text field to this form\r\n   * @param label label for this textField\r\n   * @param placeholderText the text that shows on this field\r\n   * @param defaultValue the default value that this field has\r\n   */\r\n  addTextField(\r\n    label: string,\r\n    placeholderText: string,\r\n    defaultValue?: string\r\n  ): ModalForm<AppendFormField<Callback, string>> {\r\n    this.args.push({ type: \"textField\" });\r\n    this.form.textField(label, placeholderText, defaultValue);\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows this form to a player\r\n   * @param player player to show to\r\n   * @param callback sends a callback when this form is submited\r\n   */\r\n  show(player: Player, callback: Callback): void {\r\n    this.form.show(player).then((response) => {\r\n      if (response.canceled) {\r\n        if (response.cancelationReason == \"userBusy\") {\r\n          // check time and reshow form\r\n          if (this.triedToShow > TIMEOUT_THRESHOLD)\r\n            return player.tell(\r\n              `\u00A7cForm Timeout: tried to show form, but you were busy (close chat after running command)`\r\n            );\r\n          this.triedToShow++;\r\n          this.show(player, callback);\r\n        }\r\n        return;\r\n      }\r\n      callback(\r\n        new FormCallback(this, player, callback),\r\n        ...response.formValues.map((v, i) =>\r\n          this.args[i].type == \"dropdown\" ? this.args[i].options[v] : v\r\n        )\r\n      );\r\n    });\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { MessageFormData } from \"@minecraft/server-ui\";\r\nimport { TIMEOUT_THRESHOLD } from \"../../../config/form\";\r\nimport type { ButtonCallback, IMessageFormButton } from \"../types\";\r\n\r\nexport class MessageForm {\r\n  /**\r\n   *  the title that this form should have\r\n   */\r\n  title?: string;\r\n  /**\r\n   * extra text that should be displayed in the form\r\n   */\r\n  body?: string;\r\n  /**\r\n   * The default minecraft form this form is based on\r\n   */\r\n  form: MessageFormData;\r\n  /**\r\n   * the first button of the dialog.\r\n   */\r\n  button1: IMessageFormButton;\r\n  /**\r\n   * the seccond button of the dialog.\r\n   */\r\n  button2: IMessageFormButton;\r\n  /**\r\n   * The amount of times it takes to show this form in ms\r\n   * if this value goes above 200 it will time out\r\n   */\r\n  triedToShow: number;\r\n\r\n  /**\r\n   * Creates a new form to be shown to a player\r\n   * @param title the title that this form should have\r\n   * @param body extra text that should be displayed in the form\r\n   */\r\n  constructor(title?: string, body?: string) {\r\n    this.title = title;\r\n    this.body = body;\r\n    this.form = new MessageFormData();\r\n\r\n    if (title) this.form.title(title);\r\n    if (body) this.form.body(body);\r\n\r\n    this.triedToShow = 0;\r\n  }\r\n\r\n  /**\r\n   * Method that sets the text for the first button of the dialog.\r\n   * @param text text to show on this button\r\n   * @param callback what happens when this button is clicked\r\n   * @example ```\r\n   * setButton1(\"settings\", () => {})\r\n   * ```\r\n   */\r\n  setButton1(text: string, callback: ButtonCallback): MessageForm {\r\n    this.button1 = { text: text, callback: callback };\r\n    this.form.button1(text);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Method that sets the text for the second button of the dialog.\r\n   * @param text text to show on this button\r\n   * @param callback what happens when this button is clicked\r\n   * @example ```\r\n   * setButton2(\"settings\", () => {})\r\n   * ```\r\n   */\r\n  setButton2(text: string, callback: ButtonCallback): MessageForm {\r\n    this.button2 = { text: text, callback: callback };\r\n    this.form.button2(text);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows this form to the player\r\n   * @param player player to show to\r\n   */\r\n  show(player: Player): void {\r\n    this.form.show(player).then((response) => {\r\n      if (response.canceled) {\r\n        if (response.cancelationReason == \"userBusy\") {\r\n          // check time and reshow form\r\n          if (this.triedToShow > TIMEOUT_THRESHOLD)\r\n            return player.tell(\r\n              `\u00A7cForm Timeout: tried to show form, but you were busy (close chat after running command)`\r\n            );\r\n          this.triedToShow++;\r\n          this.show(player);\r\n        }\r\n        return;\r\n      }\r\n      if (response.selection == 1) this.button1?.callback?.();\r\n      if (response.selection == 0) this.button2?.callback?.();\r\n    });\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { ActionForm } from \"./ActionForm\";\r\nimport { MessageForm } from \"./MessageForm\";\r\nimport { ModalForm } from \"./ModelForm\";\r\n\r\nexport class FormCallback {\r\n  /**\r\n   * form that was used in this call\r\n   */\r\n  private form: ActionForm | MessageForm | ModalForm<any>;\r\n  /**\r\n   * player that this form used\r\n   */\r\n  private player: Player;\r\n\r\n  /**\r\n   * the function that was called\r\n   */\r\n  private callback: () => void;\r\n\r\n  /**\r\n   * Creates a new form callback instance that can be used by\r\n   * buttons, and args to run various functions\r\n   * @param form form that is used in this call\r\n   */\r\n  constructor(\r\n    form: ActionForm | MessageForm | ModalForm<any>,\r\n    player: Player,\r\n    callback: any\r\n  ) {\r\n    this.form = form;\r\n    this.player = player;\r\n    this.callback = callback;\r\n  }\r\n\r\n  /**\r\n   * Reshows the form and shows the user a error message\r\n   * @param message error message to show\r\n   */\r\n  error(message: string) {\r\n    new MessageForm(\"Error\", message)\r\n      .setButton1(\"Return to form\", () => {\r\n        this.form.show(this.player, this.callback);\r\n      })\r\n      .setButton2(\"Cancel\", null)\r\n      .show(this.player);\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { TABLES } from \"../../lib/Database/tables\";\r\nimport { ActionForm } from \"../../lib/Form/Models/ActionForm\";\r\nimport { ModalForm } from \"../../lib/Form/Models/ModelForm\";\r\n\r\nexport function showPage1(player: Player) {\r\n  new ActionForm(\"Rubedo Settings\")\r\n    .addButton(\"Anti Spam\", \"textures/ui/permissions_op_crown.png\", () => {\r\n      showPage2(player);\r\n    })\r\n    .addButton(\"Cbe\", \"textures/blocks/sculk_shrieker_top.png\", () => {\r\n      showPage3(player);\r\n    })\r\n    .addButton(\"Gamemode\", \"textures/blocks/barrier.png\", () => {\r\n      showPage4(player);\r\n    })\r\n    .addButton(\"Nuker\", \"textures/ui/Feedback.png\", () => {\r\n      showPage5(player);\r\n    })\r\n    .show(player);\r\n}\r\n\r\nexport function showPage2(player: Player) {\r\n  const spam_config = TABLES.config.get(\"spam_config\") ?? {\r\n    repeatedMessages: true,\r\n    zalgo: true,\r\n    violationCount: 0,\r\n    permMutePlayer: false,\r\n  };\r\n  new ModalForm(\"Manage Spam Protection\")\r\n    .addToggle(\"Ban Repeated Messages\", spam_config.repeatedMessages)\r\n    .addToggle(\"Ban Zalgo\", spam_config.zalgo)\r\n    .addSlider(\r\n      \"Violation Count before ban (if ban is false this does nothing)\",\r\n      0,\r\n      20,\r\n      1,\r\n      spam_config.violationCount\r\n    )\r\n    .addToggle(\"Perm Mute Player\", spam_config.permMutePlayer)\r\n    .show(\r\n      player,\r\n      (ctx, repeatedMessages, zalgo, violationCount, permMutePlayer) => {\r\n        TABLES.config.set(\"spam_config\", {\r\n          repeatedMessages: repeatedMessages,\r\n          zalgo: zalgo,\r\n          violationCount: violationCount,\r\n          permMutePlayer: permMutePlayer,\r\n        });\r\n        player.tell(`Updated Spam Protection settings!`);\r\n      }\r\n    );\r\n}\r\n\r\nexport function showPage3(player: Player) {\r\n  const cbe_data = TABLES.config.get(\"cbe_config\") ?? {\r\n    clearItem: true,\r\n    violationCount: 0,\r\n    banPlayer: false,\r\n  };\r\n  new ModalForm(\"Manage CBE Protection\")\r\n    .addToggle(\"Clear Item\", cbe_data.clearItem)\r\n    .addSlider(\r\n      \"Violation Count before ban (if ban is false this does nothing)\",\r\n      0,\r\n      20,\r\n      1,\r\n      cbe_data.violationCount\r\n    )\r\n    .addToggle(\"Ban Player\", cbe_data.banPlayer)\r\n    .show(player, (ctx, clearItem, violationCount, banPlayer) => {\r\n      TABLES.config.set(\"cbe_config\", {\r\n        clearItem: clearItem,\r\n        violationCount: violationCount,\r\n        banPlayer: banPlayer,\r\n      });\r\n      player.tell(`Updated CBE Protection settings!`);\r\n    });\r\n}\r\n\r\nexport function showPage4(player: Player) {\r\n  const gamemode_data = TABLES.config.get(\"gamemode_config\") ?? {\r\n    setToSurvival: true,\r\n    clearPlayer: true,\r\n    violationCount: 0,\r\n    banPlayer: false,\r\n  };\r\n  new ModalForm(\"Manage Gamemode Protection\")\r\n    .addToggle(\"Set to survival\", gamemode_data.setToSurvival)\r\n    .addToggle(\r\n      \"Clear Player (Once this players gamemode has been switched back to survival should it clear the inventory?)\",\r\n      gamemode_data.clearPlayer\r\n    )\r\n    .addSlider(\r\n      \"Violation Count before ban (if ban is false this does nothing)\",\r\n      0,\r\n      20,\r\n      1,\r\n      gamemode_data.violationCount\r\n    )\r\n    .addToggle(\"Ban Player\", gamemode_data.banPlayer)\r\n    .show(\r\n      player,\r\n      (ctx, setToSurvival, clearPlayer, violationCount, banPlayer) => {\r\n        TABLES.config.set(\"gamemode_config\", {\r\n          setToSurvival: setToSurvival,\r\n          clearPlayer: clearPlayer,\r\n          violationCount: violationCount,\r\n          banPlayer: banPlayer,\r\n        });\r\n        player.tell(`Updated Gamemode Protection settings!`);\r\n      }\r\n    );\r\n}\r\n\r\nexport function showPage5(player: Player) {\r\n  const nuker_data = TABLES.config.get(\"nuker_data\") ?? {\r\n    violationCount: 0,\r\n    banPlayer: false,\r\n  };\r\n  new ModalForm(\"Manage Gamemode Protection\")\r\n    .addSlider(\r\n      \"Violation Count before ban (if ban is false this does nothing)\",\r\n      0,\r\n      20,\r\n      1,\r\n      nuker_data.violationCount\r\n    )\r\n    .addToggle(\"Ban Player\", nuker_data.banPlayer)\r\n    .show(player, (ctx, violationCount, banPlayer) => {\r\n      TABLES.config.set(\"nuker_data\", {\r\n        violationCount: violationCount,\r\n        banPlayer: banPlayer,\r\n      });\r\n      player.tell(`Updated Nuker Protection settings!`);\r\n    });\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { ActionForm } from \"../../lib/Form/Models/ActionForm\";\r\nimport * as settings from \"./settings\";\r\nimport * as automod from \"./automod\";\r\n\r\nexport function showHome(player: Player) {\r\n  new ActionForm(\"Rubedo Settings\")\r\n    .addButton(\"Auto Mod\", \"textures/ui/permissions_op_crown.png\", () => {\r\n      automod.showPage1(player);\r\n    })\r\n    .addButton(\"Banned items\", \"textures/blocks/sculk_shrieker_top.png\", () => {\r\n      settings.showPage1(player);\r\n    })\r\n    .addButton(\"Banned blocks\", \"textures/blocks/barrier.png\", () => {\r\n      settings.showPage2(player);\r\n    })\r\n    .addButton(\"Enchantments\", \"textures/items/book_enchanted.png\", () => {\r\n      settings.showPage3(player);\r\n    })\r\n    .addButton(\"Appeal Link\", \"textures/ui/Feedback.png\", () => {\r\n      settings.showPage4(player);\r\n    })\r\n    .show(player);\r\n}\r\n", "import { Command } from \"../../lib/Command/Command.js\";\r\nimport { getRole } from \"../../utils.js\";\r\nimport { showHome } from \"../forms/home.js\";\r\n\r\nnew Command({\r\n  name: \"settings\",\r\n  description: \"Opens up the settings menu for the player\",\r\n  requires: (player) => [\"admin\", \"moderator\"].includes(getRole(player)),\r\n}).executes((ctx) => {\r\n  showHome(ctx.sender);\r\n  ctx.sender.tell(`\u00A7aForm request sent, close chat to continue!`);\r\n});\r\n", "import { world } from \"@minecraft/server\";\nimport { Command } from \"../../lib/Command/Command.js\";\nimport { getRole } from \"../../utils.js\";\n\nnew Command({\n  name: \"vanish\",\n  description: \"Toggles Vanish Mode on the sender\",\n  requires: (player) => getRole(player) == \"admin\",\n})\n  .boolean(\"say\")\n  .executes((ctx, say) => {\n    if (ctx.sender.hasTag(`spectator`)) {\n      ctx.sender.runCommand(`gamemode c`);\n      ctx.sender.runCommand(`event entity @s removeSpectator`);\n      ctx.sender.removeTag(`spectator`);\n      if (!say) return;\n      world.say({\n        rawtext: [\n          {\n            translate: \"multiplayer.player.joined\",\n            with: [`\u00A7e${ctx.sender.name}`],\n          },\n        ],\n      });\n    } else {\n      ctx.sender.runCommand(`gamemode spectator`);\n      ctx.sender.runCommand(`event entity @s addSpectator`);\n      ctx.sender.addTag(`spectator`);\n      if (!say) return;\n      world.say({\n        rawtext: [\n          {\n            translate: \"multiplayer.player.left\",\n            with: [`\u00A7e${ctx.sender.name}`],\n          },\n        ],\n      });\n    }\n  });\n", "import { Command } from \"../../lib/Command/Command.js\";\nimport { VERSION } from \"../../config/app\";\n\nnew Command({\n  name: \"version\",\n  description: \"Get Current Version\",\n  aliases: [\"v\"],\n}).executes((ctx) => {\n  ctx.reply(`Current Rubedo Version: ${VERSION}`);\n});\n", "import { APPEAL_LINK } from \"../../config/app.js\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport {\n  kick,\n  forEachValidPlayer,\n  msToTime,\n} from \"../../utils.js\";\n\nforEachValidPlayer((player) => {\n  try {\n    const banData = TABLES.bans.get(player.id);\n    if (!banData) return;\n    console.warn(player.name);\n    if (banData.expire && banData.expire < Date.now())\n      return TABLES.bans.delete(player.id);\n    kick(\n      player,\n      [\n        `\u00A7cYou have been banned!`,\n        `\u00A7aReason: \u00A7f${banData.reason}`,\n        `\u00A7fExpiry: \u00A7b${banData.expire ? msToTime(banData.length) : \"Forever\"}`,\n        `\u00A7fAppeal at: \u00A7b${TABLES.config.get(\"appealLink\") ?? APPEAL_LINK}`,\n      ],\n      () => {\n        console.warn(new Error(\"Failed to kick player\"));\n        TABLES.bans.delete(player.id);\n      }\n    );\n  } catch (error) {\n    console.warn(error + error.stack);\n  }\n}, 20);\n", "import { Location } from \"@minecraft/server\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { DIMENSIONS, forEachValidPlayer } from \"../../utils.js\";\n\nforEachValidPlayer((player) => {\n  const freezeData = TABLES.freezes.get(player.id);\n  if (!freezeData) return;\n  player.teleport(\n    new Location(\n      freezeData.location.x,\n      freezeData.location.y,\n      freezeData.location.z\n    ),\n    DIMENSIONS[freezeData.location.dimension as keyof typeof DIMENSIONS],\n    0,\n    0\n  );\n}, 20);\n", "import { world } from \"@minecraft/server\";\nimport { PREFIX } from \"../../config/commands.js\";\nimport { Mute } from \"../models/Mute.js\";\nimport { text } from \"../../lang/text.js\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\n\nworld.events.beforeChat.subscribe((data) => {\n  if (data.message.startsWith(PREFIX)) return;\n  const muteData = Mute.getMuteData(data.sender);\n  if (!muteData) return;\n  if (muteData.expire && muteData.expire < Date.now())\n    return TABLES.mutes.delete(data.sender.name);\n  data.cancel = true;\n  data.sender.tell(text[\"modules.managers.mute.isMuted\"]());\n});\n", "import { BlockLocation, Player, world } from \"@minecraft/server\";\nimport { Region } from \"../models/Region.js\";\nimport {\n  DIMENSIONS,\n  forEachValidPlayer,\n  getRole,\n  loadRegionDenys,\n} from \"../../utils.js\";\nimport { setTickInterval } from \"../../lib/Scheduling/utils.js\";\nimport { BLOCK_CONTAINERS, DOORS_SWITCHES } from \"../../config/region.js\";\n\n/**\n * Sets Deny blocks at bottom of region every 5 mins\n */\nsetTickInterval(() => {\n  loadRegionDenys();\n}, 6000);\n\n/**\n * Permissions for region\n */\nworld.events.beforeItemUseOn.subscribe((data) => {\n  if ([\"moderator\", \"admin\"].includes(getRole(data.source as Player))) return;\n  const region = Region.blockLocationInRegion(\n    data.blockLocation,\n    data.source.dimension.id\n  );\n  if (!region) return;\n  const block = data.source.dimension.getBlock(data.blockLocation);\n  if (\n    DOORS_SWITCHES.includes(block.typeId) &&\n    region.permissions.doorsAndSwitches\n  )\n    return;\n  if (\n    BLOCK_CONTAINERS.includes(block.typeId) &&\n    region.permissions.openContainers\n  )\n    return;\n  data.cancel = true;\n});\n\nworld.events.beforeExplosion.subscribe((data) => {\n  for (let i = 0; i < data.impactedBlocks.length; i++) {\n    const bL = data.impactedBlocks[i];\n    let region = Region.blockLocationInRegion(bL, data.dimension.id);\n    if (region) return (data.cancel = true);\n  }\n});\n\nworld.events.entityCreate.subscribe((data) => {\n  const region = Region.blockLocationInRegion(\n    new BlockLocation(\n      data.entity.location.x,\n      data.entity.location.y,\n      data.entity.location.z\n    ),\n    data.entity.dimension.id\n  );\n  if (!region) return;\n  if (region.permissions.allowedEntitys.includes(data.entity.typeId)) return;\n  data.entity.teleport({ x: 0, y: -64, z: 0 }, data.entity.dimension, 0, 0);\n  data.entity.kill();\n});\n\nsetTickInterval(() => {\n  for (const region of Region.getAllRegions()) {\n    for (const entity of DIMENSIONS[\n      region.dimensionId as keyof typeof DIMENSIONS\n    ].getEntities({ excludeTypes: region.permissions.allowedEntitys })) {\n      if (!region.entityInRegion(entity)) continue;\n      entity.teleport({ x: 0, y: -64, z: 0 }, entity.dimension, 0, 0);\n      entity.kill();\n    }\n  }\n}, 100);\n\n/**\n * Gives player a tag if they are in a region\n */\nforEachValidPlayer((player) => {\n  for (const region of Region.getAllRegions()) {\n    if (region.entityInRegion(player)) {\n      player.addTag(`inRegion`);\n      if (!region.permissions.pvp) player.addTag(`region-protected`);\n    } else {\n      player.removeTag(`inRegion`);\n      player.removeTag(`region-protected`);\n    }\n  }\n}, 5);\n", "import { world } from \"@minecraft/server\";\nimport { text } from \"../../lang/text\";\nimport { TABLES } from \"../../lib/Database/tables\";\nimport { DIMENSIONS, getRole, isLockedDown, kick, setRole } from \"../../utils\";\nimport { Mute } from \"../models/Mute\";\nimport { ChangePlayerRoleTask } from \"../models/Task\";\n\nworld.events.playerJoin.subscribe(({ player }) => {\n  if (isLockedDown() && getRole(player) != \"admin\")\n    return kick(player, text[\"lockdown.kick.message\"]());\n  let e = world.events.tick.subscribe((data) => {\n    try {\n      DIMENSIONS.overworld.runCommand(`testfor @a[name=\"${player.name}\"]`);\n      world.events.tick.unsubscribe(e);\n      if (Mute.getMuteData(player)) player.runCommand(`ability @s mute true`);\n      if (!player.hasTag(\"old\")) {\n        // Player is new!\n        TABLES.ids.set(player.name, player.id);\n      } else {\n        player.addTag(\"old\");\n      }\n      /**\n       * This is a role that was tried to push when the player was offline\n       * so were setting it now because the player just joined\n       */\n      const roleToSet = ChangePlayerRoleTask.getPlayersRoleToSet(player.name);\n      if (roleToSet) setRole(player, roleToSet);\n    } catch (error) {}\n  });\n});\n", "import {\n  Entity,\n  InventoryComponentContainer,\n  Items,\n  MinecraftItemTypes,\n  world,\n} from \"@minecraft/server\";\nimport { AIR } from \"../../index.js\";\nimport { PageItem } from \"../../lib/Chest GUI/Models/PageItem\";\nimport { Page } from \"../../lib/Chest GUI/Models/Page\";\nimport { CHESTGUIS } from \"../../lib/Chest GUI/utils.js\";\n\n/**\n * The possible fillibale slots where items can be put\n * this is for inventory fill\n */\nconst FILLABLE_SLOTS = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44,\n];\n\n/**\n * The possible fillibale slots where items can be put\n * this is for inventory fill\n */\nconst FILLABLE_SLOTS_ENDERCHEST = [\n  10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32,\n  33, 34, 37, 38, 39, 40, 41, 42, 43,\n];\n\n/**\n * Fills the chest Screen with the desired kit\n */\nexport function ViewPlayersFill(entity: Entity, page: Page, extras: any) {\n  const container: InventoryComponentContainer = entity.getComponent(\n    \"minecraft:inventory\"\n  ).container;\n\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n  for (const [i, player] of [...world.getPlayers()].entries()) {\n    const slot = FILLABLE_SLOTS[i];\n    const item = new PageItem(MinecraftItemTypes.skull, {\n      nameTag: player.name,\n      data: 3,\n    });\n    container.setItem(slot, item.itemStack);\n    page.slots[slot] = {\n      item: item,\n      action: (ctx) => {\n        ctx.PageAction(\"moderation:see_inventory\", { name: player.name });\n      },\n    };\n  }\n}\n\n/**\n * Fills the chest Screen with the desired kit\n */\nexport function ViewPlayerInventoryFill(\n  entity: Entity,\n  page: Page,\n  extras: any\n) {\n  const container = entity.getComponent(\"minecraft:inventory\").container;\n\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n  const EnderChestItem = new PageItem(MinecraftItemTypes.enderChest, {\n    nameTag: `\u00A7eView \u00A7f${extras?.name}\u00A7e Ender Chest\\n\u00A7fNote: \u00A7cThis will not grab \u00A7lANY NBT!\u00A7r`,\n  });\n  container.setItem(49, EnderChestItem.itemStack);\n  page.slots[49] = {\n    item: EnderChestItem,\n    action: (ctx) => {\n      ctx.PageAction(\"moderation:see_ender_chest\", { name: extras.name });\n    },\n  };\n  const player = [...world.getPlayers()].find((p) => p.name == extras.name);\n  if (!player) {\n    const gui = Object.values(CHESTGUIS).find((e) => e.entity.id == entity.id);\n    gui.despawn();\n    player.tell(`\"${extras.name}\" Could not be found, Gui Crashed`);\n  }\n  const inventory = player.getComponent(\"inventory\").container;\n  /**\n   * the value of how many slots have been taken\n   */\n  let used_slots = 0;\n  for (let i = 0; i < inventory.size; i++) {\n    const item = inventory.getItem(i);\n    const slot = FILLABLE_SLOTS[used_slots];\n    used_slots++;\n    if (!item) {\n      container.setItem(slot, AIR);\n      continue;\n    }\n    container.setItem(slot, item);\n    page.slots[slot] = {\n      item: new PageItem(\n        Items.get(item.typeId),\n        { amount: item.amount, data: item.data },\n        item\n      ),\n      action: (ctx) => {\n        if (i < 9) {\n          player.runCommand(`replaceitem entity @s slot.hotbar ${i} air`);\n        } else {\n          player.runCommand(\n            `replaceitem entity @s slot.inventory ${i - 9} air`\n          );\n        }\n        ctx.GiveAction();\n        page.slots[slot] = {\n          item: null,\n          action: (ctx) => {\n            inventory.addItem(ctx.getItemAdded());\n          },\n        };\n      },\n    };\n  }\n}\n\n/**\n * Fills the chest Screen with the desired kit\n */\nexport function ViewPlayerEnderChestFill(\n  entity: Entity,\n  page: Page,\n  extras: any\n) {\n  const container = entity.getComponent(\"minecraft:inventory\").container;\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n  const player = [...world.getPlayers()].find((p) => p.name == extras?.name);\n  if (!player) return;\n  /**\n   * the value of how many slots have been taken\n   */\n  let used_slots = 0;\n  for (const item of Object.values(MinecraftItemTypes)) {\n    try {\n      player.runCommand(\n        `testfor @s[hasitem={item=${item.id},location=slot.enderchest}]`\n      );\n      const ChestGuiItem = new PageItem(item.id, {\n        nameTag: \"Note: \u00A7l\u00A7cThis is not the exzact item\",\n      });\n      const slot = FILLABLE_SLOTS_ENDERCHEST[used_slots];\n      container.setItem(slot, ChestGuiItem.itemStack);\n      page.slots[slot] = {\n        item: ChestGuiItem,\n        action: (ctx) => {\n          ctx.GiveAction();\n          page.slots[slot] = null;\n        },\n      };\n      used_slots++;\n    } catch (error) {}\n  }\n}\n\nnew Page(\"moderation:see\", ViewPlayersFill)\n  .setSlots(\n    [45, 46, 47, 49, 51, 52, 53],\n    new PageItem(MinecraftItemTypes.stainedGlassPane, {\n      nameTag: \"\u00A7r\",\n      data: 15,\n    }),\n    (ctx) => {\n      ctx.SetAction();\n    }\n  )\n  .setSlots(\n    [50],\n    new PageItem(MinecraftItemTypes.arrow, {\n      nameTag: \"\u00A7fBack\",\n    }),\n    (ctx) => {\n      ctx.PageAction(\"home\");\n    }\n  )\n  .setSlots(\n    [48],\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\n    (ctx) => {\n      ctx.CloseAction();\n    }\n  );\n\nnew Page(\"moderation:see_inventory\", ViewPlayerInventoryFill)\n  .setSlots(\n    [45, 46, 47, 49, 51, 52, 53],\n    new PageItem(MinecraftItemTypes.stainedGlassPane, {\n      nameTag: \"\u00A7r\",\n      data: 15,\n    }),\n    (ctx) => {\n      ctx.SetAction();\n    }\n  )\n  .setSlots(\n    [50],\n    new PageItem(MinecraftItemTypes.arrow, {\n      nameTag: \"\u00A7fBack\",\n    }),\n    (ctx) => {\n      ctx.PageAction(\"moderation:see\");\n    }\n  )\n  .setSlots(\n    [48],\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\n    (ctx) => {\n      ctx.CloseAction();\n    }\n  );\n\nnew Page(\"moderation:see_ender_chest\", ViewPlayerEnderChestFill)\n  .setSlots(\n    [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 35, 36, 44, 45, 46, 47, 49,\n      51, 52, 53,\n    ],\n    new PageItem(MinecraftItemTypes.stainedGlassPane, {\n      nameTag: \"\u00A7r\",\n      data: 15,\n    }),\n    (ctx) => {\n      ctx.SetAction();\n    }\n  )\n  .setSlots(\n    [50],\n    new PageItem(MinecraftItemTypes.arrow, {\n      nameTag: \"\u00A7fBack\",\n    }),\n    (ctx) => {\n      ctx.PageAction(\"moderation:see\");\n    }\n  )\n  .setSlots(\n    [48],\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\n    (ctx) => {\n      ctx.CloseAction();\n    }\n  );\n", "import {\n  EnchantmentList,\n  ItemStack,\n  MinecraftBlockTypes,\n  MinecraftItemTypes,\n  world,\n} from \"@minecraft/server\";\nimport { BANNED_BLOCKS, BANNED_ITEMS } from \"../../config/moderation\";\nimport { ENCHANTMENTS } from \"../../config/enchantments\";\nimport { TABLES } from \"../../lib/Database/tables\";\nimport { Npc } from \"../models/Npc\";\nimport { forEachValidPlayer, getRole } from \"../../utils\";\nimport { PlayerLog } from \"../models/PlayerLog\";\nimport { Ban } from \"../models/Ban\";\n\n/**\n * Minecraft Bedrock Anti CBE\n * @license MIT\n * @author Smell of curry\n * @version 1.0.0\n * --------------------------------------------------------------------------\n * This is a anti hacked items, meaning it checks a players inventory every\n * tick then it tests if they have any banned items, then checks if they have\n * items that have hacked enchants and clears the item from inventory\n * --------------------------------------------------------------------------\n */\n\nconst AIR = new ItemStack(MinecraftItemTypes.stick, 0);\n\n/**\n * Enttiies that are not allowed to spawn because they can be used by CBE\n */\nconst CBE_ENTITIES = [\"minecraft:command_block_minecart\"];\n\n/**\n * Stores per world load violation data for players\n */\nconst ViolationCount = new PlayerLog<number>();\n\nforEachValidPlayer((player) => {\n  const cbe_data = TABLES.config.get(\"cbe_config\") ?? {\n    clearItem: true,\n    violationCount: 0,\n    banPlayer: false,\n  };\n  const inventory = player.getComponent(\"inventory\").container;\n  for (let i = 0; i < inventory.size; i++) {\n    const item = inventory.getItem(i);\n    if (!item) continue;\n    const clear = () => {\n      console.warn(`[Protection: CBE]: ${player.name} Has a CBE item!`);\n      if (cbe_data.clearItem)\n        player.getComponent(\"inventory\").container.setItem(i, AIR);\n      const count = (ViolationCount.get(player) ?? 0) + 1;\n      ViolationCount.set(player, count);\n      if (cbe_data.banPlayer && count >= cbe_data.violationCount)\n        new Ban(player, null, null, \"Cbe Detection\");\n    };\n\n    let bannedItems = TABLES.config.get(\"banned_items\") ?? BANNED_ITEMS;\n    if (bannedItems.includes(item.typeId)) return clear();\n\n    const enchs: EnchantmentList =\n      item.getComponent(\"enchantments\").enchantments;\n    const MAX_ENCHS = TABLES.config.get(\"enchantments\") ?? ENCHANTMENTS;\n    /**\n     * List of all enchs that are vaild and on the item\n     * Used to test if a enchant appears multiple times!\n     */\n    const ids: Array<string> = [];\n    for (const ench of enchs) {\n      let maxLevel = MAX_ENCHS[ench.type.id] ?? ench.type.maxLevel;\n      if (enchs.slot == 0 && !enchs.canAddEnchantment(ench)) return clear();\n      if (ench.level > maxLevel) return clear();\n      if (ids.includes(ench.type.id)) return clear();\n      ids.push(ench.type.id);\n    }\n  }\n});\n\nworld.events.beforeDataDrivenEntityTriggerEvent.subscribe(({ id, entity }) => {\n  if (id != \"minecraft:entity_spawned\") return;\n  const kill = () => {\n    try {\n      entity.triggerEvent(\"despawn\");\n      entity.kill();\n    } catch (error) {\n      entity.kill();\n    }\n  };\n  if (CBE_ENTITIES.includes(entity.typeId)) return kill();\n  if (entity.typeId == \"minecraft:npc\" && !Npc.isVaild(entity)) return kill();\n});\n\nworld.events.blockPlace.subscribe(({ block, player }) => {\n  if ([\"moderator\", \"admin\"].includes(getRole(player))) return;\n  const bannedBlocks = TABLES.config.get(\"banned_blocks\") ?? BANNED_BLOCKS;\n  if (bannedBlocks.includes(block.typeId))\n    block.setType(MinecraftBlockTypes.air);\n});\n", "import { Ban } from \"../models/Ban.js\";\nimport { forEachValidPlayer } from \"../../utils\";\n\n/**\n * Minecraft Bedrock Anti Crasher\n * @license MIT\n * @author Smell of curry\n * @version 1.0.0\n * --------------------------------------------------------------------------\n * This anti crasher works by testing if a player has reached a location\n * Horion's crasher teleports the player to 30 Million so we just test for\n * That location and if they are there we kick the player (USES: player.json)\n * --------------------------------------------------------------------------\n */\n\n/**\n * This is the distance where if you go past it will ban you\n */\nconst DISTANCE = 320000;\n\nforEachValidPlayer((player) => {\n  if (\n    Math.abs(player.location.x) > DISTANCE ||\n    Math.abs(player.location.y) > DISTANCE ||\n    Math.abs(player.location.z) > DISTANCE\n  ) {\n    new Ban(player, null, null, \"Hacking: Crasher\");\n  }\n});\n", "import {\n  Dimension,\n  Events,\n  Location,\n  Player,\n  world,\n  XYRotation,\n} from \"@minecraft/server\";\nimport { CURRENT_TICK } from \"../../index.js\";\nimport { PlayerLog } from \"./PlayerLog\";\n\nexport class PreviousLocation {\n  player: Player;\n  location: Location;\n  dimension: Dimension;\n  rotation: XYRotation;\n  tick: number;\n  storage: PlayerLog;\n  events: Object;\n  /**\n   * Saves a constructs a new saved location of a player\n   */\n  constructor(player: Player, tick: number, storage: PlayerLog) {\n    this.player = player;\n    this.location = player.location;\n    this.dimension = player.dimension;\n    this.rotation = player.rotation;\n    this.tick = tick;\n    this.storage = storage;\n\n    this.events = {\n      playerLeave: world.events.playerLeave.subscribe(({ playerName }) => {\n        if (playerName == this.player.name) this.expire();\n      }),\n    };\n\n    this.storage.set(player, this);\n  }\n\n  /**\n   * Teleports the player back to the previous location\n   */\n  back() {\n    this.player.teleport(\n      this.location,\n      this.dimension,\n      this.rotation.x,\n      this.rotation.y\n    );\n  }\n\n  /**\n   * Updates this save to a new location\n   */\n  update() {\n    this.tick = CURRENT_TICK;\n    this.location = this.player.location;\n    this.dimension = this.player.dimension;\n    this.rotation = this.player.rotation;\n  }\n\n  /**\n   * Expires this previous location\n   */\n  expire() {\n    this.storage.delete(this.player);\n    for (const key in this.events) {\n      // @ts-ignore\n      world.events[key as keyof Events].unsubscribe(this.events[key]);\n    }\n  }\n}\n", "import { PlayerLog } from \"../models/PlayerLog.js\";\nimport { forEachValidPlayer } from \"../../utils\";\nimport { PreviousLocation as PrevLo } from \"../models/PreviousLocation.js\";\nimport {\n  ItemStack,\n  Player,\n  PlayerInventoryComponentContainer,\n} from \"@minecraft/server\";\n\n/**\n * Minecraft Bedrock Anti Fly\n * @license MIT\n * @author Smell of curry\n * @author moisesgamingtv9\n * @version 1.0.0\n * --------------------------------------------------------------------------\n * This anti fly works by detecting horizontal velocity, bassicly when\n * the player has reached the FLYING_VELOCITY they are considered flying And\n * if they are considered flying for 1 second they will be teleported back.\n * --------------------------------------------------------------------------\n */\n\n/**\n * Stores Last Previous grounded location\n */\nexport const log = new PlayerLog();\n\n/**\n * The Velocity of the player when there flying\n */\nconst FLYING_VELOCITY = 0.9;\n\n/**\n * The max ammount of time in ticks you can \"fly\" for\n */\nconst FLY_TIME = 20;\n\n/**\n * If this is true it will damage the player when they get tped back\n */\nconst DAMAGE = true;\n\n/**\n * If a player has one of these tags then the proccess stops for them\n */\nconst TAGS = [\"gliding\", \"riding\", \"levitating\", \"swimming\"];\n\n/**\n * Gets a players held item\n * @example getHeldItem(Player);\n */\nfunction getHeldItem(player: Player): ItemStack | null {\n  const inventory: PlayerInventoryComponentContainer = player.getComponent(\n    \"minecraft:inventory\"\n  ).container;\n  return inventory.getItem(player.selectedSlot);\n}\n\nforEachValidPlayer((player, { currentTick }) => {\n  if (player.getTags().some((tag) => TAGS.includes(tag))) return;\n  const get = () => log.get(player) ?? new PrevLo(player, currentTick, log);\n  const velocity = Math.sqrt(player.velocity.x ** 2 + player.velocity.z ** 2);\n  if (player.hasTag(\"on_ground\")) return get().update();\n  if (velocity < FLYING_VELOCITY) return;\n  if (getHeldItem(player)?.typeId == \"minecraft:trident\") return;\n  if (currentTick - get().tick < FLY_TIME) return;\n  // Player is flying\n  get().back();\n  if (DAMAGE) {\n    try {\n      player.runCommand(`damage @s 4 fly_into_wall`);\n    } catch (error) {}\n  }\n}, 20);\n", "import { GameMode, world } from \"@minecraft/server\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { setTickInterval } from \"../../lib/Scheduling/utils.js\";\nimport { getRole } from \"../../utils.js\";\nimport { Ban } from \"../models/Ban.js\";\nimport { PlayerLog } from \"../models/PlayerLog.js\";\n\n/**\n * The gamemode that you cannot be in unless you have staff tag\n */\nconst ILLEGLE_GAMEMODE = GameMode.creative;\n\n/**\n * Stores per world load violation data for players\n */\nconst ViolationCount = new PlayerLog<number>();\n\nsetTickInterval(() => {\n  const gamemode_config = TABLES.config.get(\"gamemode_config\") ?? {\n    setToSurvival: true,\n    clearPlayer: true,\n    violationCount: 0,\n    banPlayer: false,\n  };\n  for (const player of world.getPlayers({ gameMode: ILLEGLE_GAMEMODE })) {\n    if ([\"moderator\", \"admin\", \"builder\"].includes(getRole(player))) continue;\n    try {\n      if (gamemode_config.setToSurvival) player.runCommand(`gamemode s`);\n      if (gamemode_config.clearPlayer) player.runCommand(`clear @s`);\n    } catch (error) {}\n    const count = (ViolationCount.get(player) ?? 0) + 1;\n    ViolationCount.set(player, count);\n    if (gamemode_config.banPlayer && count >= gamemode_config.violationCount)\n      new Ban(player, null, null, \"Invaild Gamemode\");\n  }\n}, 20);\n", "import { world } from \"@minecraft/server\";\nimport { TABLES } from \"../../lib/Database/tables\";\nimport { kick } from \"../../utils\";\n\n/**\n * If a player is using this name we know there using toolbox\n */\nconst TOOLBOX_NAME = `\u00A7c\u00A7k\u00A7m\u00A7A\u00A7r\u00A7cToolbox Gamer\u00A7k\u00A7mA\u00A7r`;\n\nworld.events.playerJoin.subscribe(({ player }) => {\n  const fail = () =>\n    kick(player, [\n      `\u00A7cYou have been kicked!`,\n      `\u00A7aReason: \u00A7f'${player.name}' is Detected for nameSpoof`,\n      `\u00A7fThis Server requires you to have a valid gamertag!`,\n    ]);\n  if (player.name == TOOLBOX_NAME) return fail();\n  if ([...world.getPlayers()].filter((p) => p.name == player.name).length > 1)\n    return fail();\n  if ((TABLES.ids.get(player.name) ?? player.id) != player.id) return fail();\n\n  // Player Probably isnt namespoofing\n});\n", "import { world, Location } from \"@minecraft/server\";\nimport { setTickTimeout } from \"../../lib/Scheduling/utils.js\";\nimport { BLOCK_CONTAINERS } from \"../../config/moderation\";\nimport { PlayerLog } from \"../models/PlayerLog.js\";\nimport { getRole } from \"../../utils.js\";\nimport { CONTAINER_LOCATIONS } from \"../managers/containers.js\";\nimport { TABLES } from \"../../lib/Database/tables.js\";\nimport { Ban } from \"../models/Ban.js\";\n\n/**\n * Minecraft Bedrock Anti Nuker\n * @license MIT\n * @author Smell of curry\n * @version 1.0.0\n * --------------------------------------------------------------------------\n * This anti nuker works by loging everytime a player breaks a block\n * Then the next time they break a block it tests the time from now to then\n * And if they broke a block in 50 miliseconds than we place that block back\n * --------------------------------------------------------------------------\n */\n\n/**\n * The log of the players break times\n */\nconst log = new PlayerLog();\n\n/**\n * if a block is broken faster than this time it is considered hacking\n */\nconst IMPOSSIBLE_BREAK_TIME = 70;\n\n/**\n * When breaking vegitation blocks it could cause a false trigger\n * so when a block gets broken and it has one of the block tags\n * it gets skipped and doesnt count in the nuker event\n *\n * @link https://wiki.bedrock.dev/blocks/block-tags.html\n */\nconst VAILD_BLOCK_TAGS = [\n  \"snow\",\n  \"lush_plants_replaceable\",\n  \"azalea_log_replaceable\",\n  \"minecraft:crop\",\n  \"fertilize_area\",\n];\n\n/**\n * A list of all the blocks that are impossible to break unless you have hacks\n */\nconst IMPOSSIBLE_BREAKS = [\n  \"minecraft:water\",\n  \"minecraft:flowing_water\",\n  \"minecraft:lava\",\n  \"minecraft:flowing_lava\",\n  \"minecraft:bedrock\",\n];\n\n/**\n * Stores per world load violation data for players\n */\nconst ViolationCount = new PlayerLog<number>();\n\nworld.events.blockBreak.subscribe(\n  ({ block, brokenBlockPermutation, dimension, player }) => {\n    if ([\"moderator\", \"admin\"].includes(getRole(player))) return;\n    if (block.getTags().some((tag) => VAILD_BLOCK_TAGS.includes(tag))) return;\n    const old = log.get(player);\n    log.set(player, Date.now());\n    if (!old) return;\n\n    if (IMPOSSIBLE_BREAKS.includes(block.typeId)) return;\n    if (old < Date.now() - IMPOSSIBLE_BREAK_TIME) return;\n    const nuker_data = TABLES.config.get(\"nuker_data\") ?? {\n      violationCount: 0,\n      banPlayer: false,\n    };\n    const count = (ViolationCount.get(player) ?? 0) + 1;\n    ViolationCount.set(player, count);\n    if (nuker_data.banPlayer && count >= nuker_data.violationCount)\n      new Ban(player, null, null, \"Using Nuker\");\n\n    // setting block back\n    dimension\n      .getBlock(block.location)\n      .setPermutation(brokenBlockPermutation.clone());\n    // setting chest inventory back\n    if (BLOCK_CONTAINERS.includes(brokenBlockPermutation.type.id)) {\n      const OLD_INVENTORY = CONTAINER_LOCATIONS[JSON.stringify(block.location)];\n      if (OLD_INVENTORY) {\n        OLD_INVENTORY.load(block.getComponent(\"inventory\").container);\n      }\n    }\n    // killing dropped items\n    setTickTimeout(() => {\n      [\n        ...dimension.getEntities({\n          maxDistance: 2,\n          type: \"minecraft:item\",\n          location: new Location(\n            block.location.x,\n            block.location.y,\n            block.location.z\n          ),\n        }),\n      ].forEach((e) => e.kill());\n    }, 0);\n  }\n);\n", "import { world } from \"@minecraft/server\";\r\nimport { BLOCK_CONTAINERS, CHECK_SIZE } from \"../../config/moderation\";\r\nimport { setTickInterval } from \"../../lib/Scheduling/utils\";\r\nimport { IContainerLocation } from \"../../types\";\r\nimport { locationToBlockLocation } from \"../../utils\";\r\nimport { BlockInventory } from \"../models/BlockInventory\";\r\n\r\n/**\r\n * storage of all container locations in the world\r\n */\r\nexport let CONTAINER_LOCATIONS: IContainerLocation = {};\r\n\r\nsetTickInterval(() => {\r\n  CONTAINER_LOCATIONS = {};\r\n  for (const player of world.getPlayers()) {\r\n    const blockLoc = locationToBlockLocation(player.location);\r\n    const pos1 = blockLoc.offset(CHECK_SIZE.x, CHECK_SIZE.y, CHECK_SIZE.z);\r\n    const pos2 = blockLoc.offset(-CHECK_SIZE.x, -CHECK_SIZE.y, -CHECK_SIZE.z);\r\n\r\n    for (const location of pos1.blocksBetween(pos2)) {\r\n      if (location.y < -64) continue;\r\n      const block = player.dimension.getBlock(location);\r\n      if (!BLOCK_CONTAINERS.includes(block.typeId)) continue;\r\n      CONTAINER_LOCATIONS[JSON.stringify(location)] = new BlockInventory(\r\n        block.getComponent(\"inventory\").container\r\n      );\r\n    }\r\n  }\r\n}, 100);\r\n", "import { BlockInventoryComponentContainer, ItemStack } from \"@minecraft/server\";\n\nexport class BlockInventory {\n  emptySlotsCount: number;\n  size: number;\n  items: Array<ItemStack>;\n  /**\n   * Coverts a blockInventoryComponentContainer and saves it\n   * @param {BlockInventoryComponentContainer} inventory\n   */\n  constructor(inventory: BlockInventoryComponentContainer) {\n    this.emptySlotsCount = inventory.emptySlotsCount;\n    this.size = inventory.size;\n    this.items = [];\n    for (let i = 0; i < this.size; i++) {\n      this.items[i] = inventory.getItem(i);\n    }\n  }\n\n  /**\n   * Loads this inventory onto a BlockInventoryComponentContainer\n   * @param {BlockInventoryComponentContainer} block block to load on\n   */\n  load(block: BlockInventoryComponentContainer) {\n    for (let i = 0; i < block.size; i++) {\n      if (!this.items[i]) continue;\n      block.setItem(i, this.items[i]);\n    }\n  }\n}\n", "import { world } from \"@minecraft/server\";\r\nimport { PREFIX } from \"../../config/commands\";\r\nimport { TABLES } from \"../../lib/Database/tables\";\r\nimport { getRole } from \"../../utils\";\r\nimport { Mute } from \"../models/Mute\";\r\nimport { PlayerLog } from \"../models/PlayerLog\";\r\n\r\nconst previousMessage = new PlayerLog<string>();\r\n\r\n/**\r\n * Stores per world load violation data for players\r\n */\r\nconst ViolationCount = new PlayerLog<number>();\r\n\r\nworld.events.beforeChat.subscribe((data) => {\r\n  if (data.message.startsWith(PREFIX)) return;\r\n  if ([\"admin\", \"moderator\"].includes(getRole(data.sender))) return;\r\n  const spam_config = TABLES.config.get(\"spam_config\") ?? {\r\n    repeatedMessages: true,\r\n    zalgo: true,\r\n    violationCount: 0,\r\n    permMutePlayer: false,\r\n  };\r\n  const isSpam = () => {\r\n    const count = (ViolationCount.get(data.sender) ?? 0) + 1;\r\n    ViolationCount.set(data.sender, count);\r\n    if (spam_config.permMutePlayer && count >= spam_config.violationCount)\r\n      new Mute(data.sender, null, null, \"Reached Violation count\");\r\n  };\r\n  if (\r\n    spam_config.repeatedMessages &&\r\n    previousMessage.get(data.sender) == data.message\r\n  ) {\r\n    data.cancel = true;\r\n    isSpam();\r\n    return data.sender.tell(`\u00A7cRepeated message detected!`);\r\n  }\r\n  if (spam_config.zalgo && /%CC%/g.test(encodeURIComponent(data.message))) {\r\n    data.cancel = true;\r\n    isSpam();\r\n    return data.sender.tell(\r\n      `\u00A7cYou message contains some type of zalgo and cannot be sent!`\r\n    );\r\n  }\r\n  previousMessage.set(data.sender, data.message);\r\n});\r\n", "import { Player, world } from \"@minecraft/server\";\r\nimport { setRole } from \"../../utils\";\r\n\r\nlet e = world.events.beforeDataDrivenEntityTriggerEvent.subscribe((data) => {\r\n  if (world.getDynamicProperty(\"roleHasBeenSet\"))\r\n    return world.events.beforeDataDrivenEntityTriggerEvent.unsubscribe(e);\r\n  if (!(data.entity instanceof Player)) return;\r\n  if (data.id != \"rubedo:becomeAdmin\") return;\r\n  setRole(data.entity, \"admin\");\r\n  world.setDynamicProperty(\"roleHasBeenSet\", true);\r\n  world.setDynamicProperty(\"worldsOwner\", data.entity.id);\r\n  data.entity.tell(\r\n    `\u00A7l\u00A7cYou have been given admin, the function start will not work anymore!!!!`\r\n  );\r\n});\r\n", "import { system } from \"@minecraft/server\";\r\n\r\nsystem.events.beforeWatchdogTerminate.subscribe((data) => {\r\n  data.cancel = true;\r\n  console.warn(`WATCHDOG TRIED TO CRASH = ${data.terminateReason}`);\r\n});\r\n", "import {\r\n  DynamicPropertiesDefinition,\r\n  EntityTypes,\r\n  MinecraftEntityTypes,\r\n  world,\r\n} from \"@minecraft/server\";\r\nimport { ENTITY_IDENTIFER } from \"../../config/database\";\r\nimport { OBJECTIVES } from \"../../config/objectives\";\r\nimport { runCommand } from \"../../utils\";\r\n\r\nworld.events.worldInitialize.subscribe(({ propertyRegistry }) => {\r\n  /**\r\n   * Loads Ticking Area\r\n   */\r\n  runCommand(`tickingarea add 0 0 0 0 0 0 db true`);\r\n\r\n  let def = new DynamicPropertiesDefinition();\r\n  def.defineString(\"name\", 30);\r\n  def.defineNumber(\"index\");\r\n  propertyRegistry.registerEntityTypeDynamicProperties(\r\n    def,\r\n    EntityTypes.get(ENTITY_IDENTIFER)\r\n  );\r\n\r\n  let def2 = new DynamicPropertiesDefinition();\r\n  def2.defineString(\"role\", 30);\r\n  propertyRegistry.registerEntityTypeDynamicProperties(\r\n    def2,\r\n    MinecraftEntityTypes.player\r\n  );\r\n\r\n  let def3 = new DynamicPropertiesDefinition();\r\n  def3.defineBoolean(\"roleHasBeenSet\");\r\n  def3.defineString(\"worldsOwner\", 100);\r\n  def3.defineBoolean(\"isLockDown\");\r\n  propertyRegistry.registerWorldDynamicProperties(def3);\r\n\r\n  for (const obj of OBJECTIVES) {\r\n    world.scoreboard.addObjective(obj.objective, obj.displayName ?? \"\");\r\n  }\r\n});\r\n", "/*\n|--------------------------------------------------------------------------\n| Objectives\n|--------------------------------------------------------------------------\n|\n| This is a list of all objectives this pack uses\n| please add any objective to this list so it can be added at world creation\n| make sure to add them beofre sending pack to others and new worlds.\n|\n*/\ninterface IObjective {\n  objective: string;\n  displayName?: string;\n}\n\nexport const OBJECTIVES: Array<IObjective> = [];\n"],
  "mappings": "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",
  "names": ["ItemStack", "MinecraftItemTypes", "world", "world", "Location", "world", "length", "BlockLocation", "BlockLocation", "command", "length", "BlockLocation", "e", "data", "world", "text", "e", "command", "Location", "world", "command", "Player", "world", "world", "world", "CALLBACKS", "world", "e", "text", "world", "ItemStack", "MinecraftItemTypes", "world", "Player", "Player", "Player", "ban", "root", "root", "command", "world", "world", "root", "mute", "world", "BlockLocation", "BlockLocation", "ROLES", "root", "text", "MinecraftBlockTypes", "BLOCK_CONTAINERS", "text", "MinecraftBlockTypes", "showPage1", "showPage2", "showPage3", "showPage4", "showPage1", "world", "world", "Location", "Location", "world", "world", "BlockLocation", "world", "world", "BlockLocation", "world", "world", "e", "MinecraftItemTypes", "world", "world", "MinecraftItemTypes", "e", "ctx", "ItemStack", "MinecraftBlockTypes", "MinecraftItemTypes", "world", "AIR", "ItemStack", "MinecraftItemTypes", "world", "MinecraftBlockTypes", "world", "world", "getHeldItem", "world", "ViolationCount", "world", "world", "world", "world", "Location", "world", "world", "BLOCK_CONTAINERS", "log", "ViolationCount", "world", "BLOCK_CONTAINERS", "Location", "e", "world", "ViolationCount", "world", "Player", "world", "world", "Player", "world", "world", "ItemStack", "MinecraftItemTypes", "world"]
}
